<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MHUrho</name>
    </assembly>
    <members>
        <member name="T:MHUrho.CameraMovement.CameraMovedEventArgs">
            <summary>
            Arguments of the CameraMoved event invoked on each camera movement.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMovedEventArgs.WorldPosition">
            <summary>
            Position of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMovedEventArgs.WorldRotation">
            <summary>
            Rotation of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMovedEventArgs.CameraMode">
            <summary>
            Current mode of the camera.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMovedEventArgs.FollowedEntity">
            <summary>
            If the camera mode is <see cref="F:MHUrho.CameraMovement.CameraMode.Following"/>,
            holds the followed entity, otherwise is null.
            </summary>
        </member>
        <member name="T:MHUrho.CameraMovement.OnCameraMoveDelegate">
            <summary>
            Encapsulates methods that handle camera movement events.
            </summary>
            <param name="args">The camera movement event data.</param>
        </member>
        <member name="T:MHUrho.CameraMovement.CameraMover">
             <summary>
             Implements movement of the camera in the game world.
             Has two distinct values for movement, decaying and static.
             Static movement changes only by calls to the Set methods.
             Decaying movement decays based on the <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/> and
             <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> setting.
            
             Both of these movements are added together to create total movement of the camera.
             </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.SmoothMovement">
            <summary>
            If the movement decaying movement should gradually slow down or it should stop
            immediately after applying the movement.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.FreeFloat">
            <summary>
            If the camera is in free floating mode.
            Mutually exclusive with <see cref="P:MHUrho.CameraMovement.CameraMover.Following"/>.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.Following">
            <summary>
            If the camera is following an entity.
            If true, the entity is accessible as <see cref="P:MHUrho.CameraMovement.CameraMover.Followed"/>.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.Drag">
            <summary>
            How much does the camera slow down per tick.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.StaticMovement">
            <summary>
            Current movement applied each tick that does not change without explicit request.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.StaticHorizontalMovement">
            <summary>
            <see cref="P:MHUrho.CameraMovement.CameraMover.StaticMovement"/> in the XZ plane. Basically a projection.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.StaticVerticalMovement">
            <summary>
            <see cref="P:MHUrho.CameraMovement.CameraMover.StaticMovement"/> in the vertical axis.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.StaticYaw">
            <summary>
            Rotation around the vertical axis that does not change without explicit request.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.StaticPitch">
            <summary>
            Rotation around the horizontal axis that does not change without explicit request.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.Camera">
            <summary>
            The camera component of the UrhoSharp engine.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.Position">
            <summary>
            Position of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.PositionXZ">
            <summary>
            Position of the camera projected into the XZ plane.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraMover.Followed">
            <summary>
            If camera is following an entity, holds a reference to the followed entity.
            Otherwise is null.
            </summary>
        </member>
        <member name="E:MHUrho.CameraMovement.CameraMover.CameraMoved">
            <summary>
            Event invoked on every change of position or rotation of the camera.
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.CameraMover.decayingRotation">
            <summary>
            Only yaw and pitch, no roll
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.GetCameraController(Urho.Node,MHUrho.WorldMap.IMap,Urho.Vector2)">
            <summary>
            Creates ad initializes the camera and the component for camera movement control.
            </summary>
            <param name="levelNode">The node representing the level.</param>
            <param name="map">Map of the level.</param>
            <param name="initialPosition">Initial position of the camera at the start of the game.</param>
            <returns>The component responsible for moving the camera.</returns>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.#ctor">
            <summary>
            Initializes the CameraMover to receive scene updates.
            Needs to be public so it can be created by <see cref="M:Urho.Node.CreateComponent``1(Urho.CreateMode,System.UInt32)"/>.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingVerticalMovement(System.Single)">
            <summary>
            Adds movement along the vertical axis that decays in time, based on
            the setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="movement">The added movement to the current decaying movement. Additional distance
            the camera should move per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticVerticalSpeed(System.Single)">
            <summary>
            Sets movement along the vertical axis that is applied each second until
            set otherwise.
            </summary>
            <param name="movement">The distance the camera should move per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingHorizontalMovement(Urho.Vector2)">
            <summary>
            Adds movement along the horizontal plane that decays in time, based on
            the setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="movement">The change of position of the camera per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticHorizontalMovement(Urho.Vector2)">
            <summary>
            Sets movement along the horizontal plane that is applied each second until set otherwise.
            </summary>
            <param name="movement">The change of the position of the camera per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingMovement(Urho.Vector3)">
            <summary>
            Adds movement in the 3D space that decays in time, based on
            the setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="movement">The change of position of the camera per second added to current movement.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticMovement(Urho.Vector3)">
            <summary>
            Sets movement along the horizontal plane that is applied each second until set otherwise.
            </summary>
            <param name="movement">The change of position of the camera per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingYawChange(System.Single)">
            <summary>
            Adds rotation along the vertical axis that decays in time, based on the
            setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="yaw">The additional change of rotation per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticYawChange(System.Single)">
            <summary>
            Sets rotation along the vertical axis that is applied each second until set otherwise.
            </summary>
            <param name="yaw">The change of rotation per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingPitchChange(System.Single)">
            <summary>
            Adds rotation along the horizontal axis that decays in time, based on the
            setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="pitch">The additional change of rotation per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticPitchChange(System.Single)">
            <summary>
            Sets rotation along the horizontal axis that is applied each second until set otherwise.
            </summary>
            <param name="pitch">The change of rotation per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingRotation(Urho.Vector2)">
            <summary>
            Adds <paramref name="rotation"/> to decaying rotation, which decays with (is divided by) <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/> every tick
            </summary>
            <param name="rotation">The initial rotation of the camera, <see cref="F:Urho.Vector2.X"/> is yaw, <see cref="F:Urho.Vector2.Y"/> is pitch</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticRotation(Urho.Vector2)">
            <summary>
            Sets the static rotation of the camera, which will rotate every tick based on <see cref="F:MHUrho.CameraMovement.CameraMover.staticRotation"/> + <see cref="F:MHUrho.CameraMovement.CameraMover.decayingRotation"/>
            Has the same value until set otherwise
            </summary>
            <param name="rotation">The rotation of the camera, <see cref="F:Urho.Vector2.X"/> is yaw, <see cref="F:Urho.Vector2.Y"/> is pitch</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.AddDecayingZoomChange(System.Single)">
            <summary>
            Adds the <paramref name="zoom"/> to the current change of zoom per second that changes every tick based on
            the setting of <see cref="P:MHUrho.CameraMovement.CameraMover.SmoothMovement"/> and <see cref="P:MHUrho.CameraMovement.CameraMover.Drag"/>.
            </summary>
            <param name="zoom">The additional change of the zoom per second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SetStaticZoomChange(System.Single)">
            <summary>
            Sets the change of the zoom that is applied every second until set otherwise.
            </summary>
            <param name="zoom">The constant change in zoom each second.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.MoveTo(Urho.Vector2)">
            <summary>
            Sets the camera position to be at the <paramref name="xzPosition"/> in the XZ plane.
            Leaves the height unchanged.
            </summary>
            <param name="xzPosition">The new position of the camera in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.MoveTo(Urho.Vector3)">
            <summary>
            Sets the camera position to be at the <paramref name="position"/>.
            </summary>
            <param name="position">The new position of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.MoveBy(Urho.Vector2)">
            <summary>
            Moves camera by <paramref name="xzDelta"/> in the XZ plane from the current position.
            Does not change the height of the camera.
            </summary>
            <param name="xzDelta">The change of position in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.MoveBy(Urho.Vector3)">
            <summary>
            Moves camera by <paramref name="delta"/> from the current position.
            </summary>
            <param name="delta">The change of position of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.StopAllCameraMovement">
            <summary>
            Stops all movement of the camera, both decaying and static.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SwitchToFree">
            <summary>
            Switches camera to free mode, freely flying above the terrain
            Stops all camera movement at the time of the switch
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SwitchToFixed">
            <summary>
            Switches camera to fixed mode, following the terrain.
            Typical RTS camera
            Stops all camera movement at the time of the switch
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.Follow(MHUrho.Logic.IEntity)">
             <summary>
             Switches camera to entity following mode, in which
             the camera moves based on the movement of the followed <paramref name="entity"/>.
            
             Is switched back to Fixed when any attempt at movement (not rotation) is made.
             </summary>
             <param name="entity"></param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.StopFollowing">
            <summary>
            Stops following an entity and switches back to fixed mode.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.GetPointUnderInput(Urho.Vector3,Urho.Vector2)">
            <summary>
            Gets a point pointed at by touch or cursor (represented as normalized screen coords <paramref name="normalizedScreenPos"/>)
            in the vertical plane perpendicular to camera direction in the XZ plane placed at the <paramref name="point"/>.
            In other words, we place a plane on the <paramref name="point"/>, rotate it so it is perpendicular to the XZ plane
            and to the direction of the camera projected into the XZ plane, and then we get a point in this plane under the cursor
            from users perspective and the coordinates of this point in the game world.
            </summary>
            <param name="point">World point in the desired plane</param>
            <param name="normalizedScreenPos">Normalized screen position of the input</param>
            <returns>Point in the desired plane pointed at by the input</returns>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.ResetCamera">
            <summary>
            Resets camera to it's default position in the current mode.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.OnUpdate(System.Single)">
            <summary>
            Handles scene update, moves the camera based on the set movement, rotation and zoom, calculates
            the movement decay for decaying movement.
            </summary>
            <param name="timeStep">The time elapsed since the last update.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.OnDeleted">
            <summary>
            Handles the disposal of the component.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.SwitchToState(MHUrho.CameraMovement.CameraStates)">
            <summary>
            Switches state of the camera to the <paramref name="newState"/>
            </summary>
            <param name="newState">The new state of the camera to switch to.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.GetStateInstance(MHUrho.CameraMovement.CameraStates)">
            <summary>
            Gets the state instance corresponding to the <paramref name="newState"/> value.
            </summary>
            <param name="newState">The state of which we want the implementing instance.</param>
            <returns>The instance of the class implementing the behavior of the given state.</returns>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraMover.OnCameraMoved(MHUrho.CameraMovement.CameraMovedEventArgs)">
            <summary>
            Safely invokes the event <see cref="E:MHUrho.CameraMovement.CameraMover.CameraMoved"/>.
            </summary>
            <param name="args">The arguments to invoke the event with.</param>
        </member>
        <member name="T:MHUrho.CameraMovement.CameraStates">
             <summary>
             States of the camera, for now they match to mode like this
             RTS == Fixed
             Freefloating == FreeFloat
             Following == Following
            
             But they are kept separate for future changes
             </summary>
        </member>
        <member name="T:MHUrho.CameraMovement.StateSwitchedDelegate">
            <summary>
            The delegate for methods handling the state switch event.
            </summary>
            <param name="newState">The new state we are switching to.</param>
        </member>
        <member name="T:MHUrho.CameraMovement.CameraState">
            <summary>
            Implementation of the state design pattern to
            implement three different behaviors of the camera.
            </summary>
        </member>
        <member name="E:MHUrho.CameraMovement.CameraState.CameraMoved">
            <summary>
            Invoked when camera changes position, rotation or zoom.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraState.CameraWorldPosition">
            <summary>
            Position of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraState.CameraWorldRotation">
            <summary>
            Rotation of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.CameraState.CameraMode">
            <summary>
            The current mode of the camera.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.#ctor(MHUrho.WorldMap.IMap,MHUrho.CameraMovement.StateSwitchedDelegate)">
            <summary>
            Creates new instance of the representation of camera behavior.
            </summary>
            <param name="map">The level map in which the camera exists.</param>
            <param name="stateSwitched">The handler to invoke when a state switch occurs.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.MoveTo(Urho.Vector2)">
            <summary>
            Sets the camera position to be at the <paramref name="xzPosition"/> in the XZ plane.
            Leaves the height unchanged.
            </summary>
            <param name="xzPosition">The new position of the camera in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.MoveTo(Urho.Vector3)">
            <summary>
            Sets the camera position to be at the <paramref name="position"/>.
            </summary>
            <param name="position">The new position of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.MoveBy(Urho.Vector2)">
            <summary>
            Moves camera by <paramref name="xzMovement"/> in the XZ plane from the current position.
            Does not change the height of the camera.
            </summary>
            <param name="xzMovement">The change of position in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.MoveBy(Urho.Vector3)">
            <summary>
            Moves camera by <paramref name="movement"/> from the current position.
            </summary>
            <param name="movement">The change of position of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.Rotate(Urho.Vector2)">
            <summary>
            Rotates the camera around the vertical axis by <paramref name="rotation"/>.X and
            around the horizontal axis by <paramref name="rotation"/>.Y.
            </summary>
            <param name="rotation">Rotation of the camera around the vertical and horizontal axes.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.Zoom(System.Single)">
            <summary>
            Changes the zoom of the camera by <paramref name="zoom"/>.
            </summary>
            <param name="zoom">The change of the zoom of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.Reset">
            <summary>
            Resets the camera to the default position for the state.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.PreChangesUpdate">
            <summary>
            Update invoked before the changes to the position, rotation and zoom are executed.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.PostChangesUpdate">
            <summary>
            Update invoked after the changes to the position, rotation and zoom are executed.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.SwitchToThis(MHUrho.CameraMovement.CameraState)">
            <summary>
            Initializes state when switching to this state
            </summary>
            <param name="fromState">Previous state or null if starting game</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.SwitchFromThis(MHUrho.CameraMovement.CameraState)">
            <summary>
            Cleans up state when switching to another state
            </summary>
            <param name="toState">State we are switching to</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.OnCameraMove(MHUrho.Logic.IEntity)">
            <summary>
            Invokes the <see cref="E:MHUrho.CameraMovement.CameraState.CameraMoved"/> event.
            </summary>
            <param name="followedEntity">If we are invoking the event while following an entity, contains the reference to the followed entity.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.RoundPositionToMap(Urho.Vector2)">
            <summary>
            If the given <paramref name="position"/> is outside the map borders, rounds it
            to the closest border. Otherwise does not change the <paramref name="position"/>.
            </summary>
            <param name="position">The position to round to be inside the map.</param>
            <returns>Position rounded to be inside the map if it was outside the map, or <paramref name="position"/> if
            it was already inside the map.</returns>
        </member>
        <member name="M:MHUrho.CameraMovement.CameraState.RoundPositionToMap(Urho.Vector3,System.Boolean,System.Single,System.Single)">
            <summary>
            If the given <paramref name="position"/> is outside the map borders or closer to the borders than <paramref name="minOffsetBorder"/>,
            rounds it to be at least <paramref name="minOffsetBorder"/> from the closest border.
            If the <paramref name="position"/> is underneath the map, moves it vertically above the terrain to be at least <paramref name="minOffsetHeight"/>
            above the height of the terrain.
            If <paramref name="heightFromBuildings"/> is true, takes into the consideration the height of the buildings, not only the height of the terrain.
            Otherwise does not change the <paramref name="position"/>.
            </summary>
            <param name="position">The position to round to be inside the map with specified offsets.</param>
            <param name="heightFromBuildings">Take into consideration height of the buildings above the height of the map itself.</param>
            <param name="minOffsetBorder">Minimal offset of the camera from the border.</param>
            <param name="minOffsetHeight">Minimal offset of the camera in the vertical direction from the terrain height or building height, based on <paramref name="heightFromBuildings"/>.</param>
            <returns>Position rounded inside the map at least <paramref name="minOffsetBorder"/> from the closest border, above the terrain
            at least <paramref name="minOffsetHeight"/> above, or if <paramref name="heightFromBuildings"/> above the possible buildings.</returns>
        </member>
        <member name="P:MHUrho.CameraMovement.EntityFollowingCamera.CameraMode">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.CameraMovement.EntityFollowingCamera.Followed">
            <summary>
            The entity being followed by the camera.
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.EntityFollowingCamera.cameraWorldDirection">
            <summary>
            Direction of the camera so it faces the same directiong
            regardless of the followed entity turning
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.MoveTo(Urho.Vector2)">
            <inheritdoc />
            <summary>
            Switches to Fixed camera mode, manual movement of the camera
            is not allowed when following an entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.MoveTo(Urho.Vector3)">
            <inheritdoc />
            <summary>
            Switches to Fixed camera mode, manual movement of the camera
            is not allowed when following an entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.MoveBy(Urho.Vector2)">
            <inheritdoc />
            /// <summary>
            Switches to Fixed camera mode, manual movement of the camera
            is not allowed when following an entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.MoveBy(Urho.Vector3)">
            <inheritdoc />
            /// <summary>
            Switches to Fixed camera mode, manual movement of the camera
            is not allowed when following an entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.Reset">
            <inheritdoc />
            <summary>
            Resets the camera to default position relative to the followed entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.PreChangesUpdate">
            <summary>
            Corrects the direction, canceling any movement of the followed entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.PostChangesUpdate">
            <summary>
            Stores the wanted camera direction and position, in case the followed entity
            moves or rotates. Invokes CameraMoved if the camera moved.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.SwitchToThis(MHUrho.CameraMovement.CameraState)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.SwitchFromThis(MHUrho.CameraMovement.CameraState)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.SetFollowedEntity(MHUrho.Logic.IEntity)">
            <summary>
            Sets the entity to follow by this camera.
            If already following, switches from the current entity to new <paramref name="entity"/>
            </summary>
            <param name="entity">The entity to follow.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.SignalCameraMoved">
            <summary>
            Informs everyone that the camera moved.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.ClearFollowed">
            <summary>
            Removes the handlers watching for followed entity movement and rotation from the entity
            and stops following the entity.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.OnFollowedRotationChanged(MHUrho.Logic.IEntity)">
            <summary>
            Counteracts the rotation of the entity, so that the camera remains
            facing the stored direction <see cref="F:MHUrho.CameraMovement.EntityFollowingCamera.cameraWorldDirection"/>.
            </summary>
            <param name="entity">The followed entity.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.OnFollowedPositionChanged(MHUrho.Logic.IEntity)">
            <summary>
            Handles the movement of the followed entity, remembers to signal
            that the camera moved in the game world.
            </summary>
            <param name="entity">The followed entity.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.EntityFollowingCamera.CorrectWorldDirection">
            <summary>
            Counteracts the rotation of the followed entity so that the camera always faces the <see cref="F:MHUrho.CameraMovement.EntityFollowingCamera.cameraWorldDirection"/>.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.FixedCamera.CameraMode">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.CameraMovement.FixedCamera.cameraMoved">
            <summary>
            If the camera moved during the current update calculation
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.#ctor(MHUrho.WorldMap.IMap,Urho.Node,Urho.Node,Urho.Vector2,MHUrho.CameraMovement.StateSwitchedDelegate)">
            <summary>
            Creates new camera behavior that follows an artificial invisible fixed point in the game world.
            </summary>
            <param name="map">The map of the level the camera exists in.</param>
            <param name="levelNode">The <see cref="T:Urho.Node"/> representing the whole level.</param>
            <param name="cameraNode">The <see cref="T:Urho.Node"/> containing the <see cref="T:Urho.Camera"/> component.</param>
            <param name="initialPosition">The initial position of the followed point in the game world.</param>
            <param name="stateSwitched">The handler to invoke when a state switch occurs.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveTo(Urho.Vector2)">
            <summary>
            Moves the followed point to the <paramref name="xzPosition"/> in the XZ plane,
            adjusts the height of the followed point to be on the terrain.
            </summary>
            <param name="xzPosition">The new position of the followed point in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveTo(Urho.Vector3)">
            <inheritdoc />
            <summary>
            Moves the followed point to the <paramref name="position"/> in the game world.
            </summary>
            <param name="position">The new position of the followed point in the game world.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveBy(Urho.Vector2)">
            <inheritdoc />
            <summary>
            Moves the followed point by <paramref name="xzMovement"/> in XZ plane from the
            camera perspective. The X coordinate represents movement to the right of the camera,
            Z coordinate represents movement forward from the direction of view of the camera WHEN
            PROJECTED into the game world XZ plane.
            </summary>
            <param name="xzMovement">The X coordinate represents movement to the right of the camera,
            Z coordinate represents movement forward from the direction of view of the camera WHEN
            PROJECTED into the game world XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveBy(Urho.Vector3)">
            <summary>
            Moves the followed point by <paramref name="movement"/>. The X and Z coordinates
            are used as in <see cref="M:MHUrho.CameraMovement.FixedCamera.MoveBy(Urho.Vector2)"/>, the Y coordinate is used for movement in
            the world Y axis direction.
            </summary>
            <param name="movement">The change of position of the followed point, where X and Z are used as in
            <see cref="M:MHUrho.CameraMovement.FixedCamera.MoveBy(Urho.Vector2)"/> and Y is used for movement in world vertical direction.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.Reset">
            <summary>
            Resets the camera to default offset from the followed point and turns the
            camera to look at the followed point.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.PreChangesUpdate">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.PostChangesUpdate">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.SwitchToThis(MHUrho.CameraMovement.CameraState)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.SwitchFromThis(MHUrho.CameraMovement.CameraState)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.SignalCameraMoved">
            <summary>
            Handles the signal from predecessor methods that the camera was moved.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveHorizontal(System.Single,System.Single)">
            <summary>
            Moves camera in the XZ plane, parallel to the ground
            X axis is right(+)/ left(-), 
            Z axis is in the direction of camera(+)/ in the direction opposite of the camera
            Camera clipping to buildings and things is handled every tick in PostChangeUpdate
            </summary>
            <param name="deltaX">Movement of the camera in left/right direction</param>
            <param name="deltaZ">Movement of the camera in forward/backward direction</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FixedCamera.MoveVertical(System.Single)">
            <summary>
            Moves camera in the Y axis, + is up, - is down
            Camera clipping to buildings and things is handled every tick in PostChangeUpdate
            </summary>
            <param name="delta">Amount of movement</param>
        </member>
        <member name="F:MHUrho.CameraMovement.FreeFloatCamera.MinHeightOffset">
            <summary>
            Minimal distance from the ground right below the current position of the camera.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.FreeFloatCamera.CameraWorldPosition">
            <summary>
            Position of the camera in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.FreeFloatCamera.CameraWorldRotation">
            <summary>
            Rotation of the camera compared to the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.FreeFloatCamera.CameraMode">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.CameraMovement.FreeFloatCamera.levelNode">
            <summary>
            Node representing the whole level in the game engine.
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.FreeFloatCamera.cameraNode">
            <summary>
            Node of the camera itself.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.#ctor(MHUrho.WorldMap.IMap,Urho.Node,Urho.Node,MHUrho.CameraMovement.StateSwitchedDelegate)">
            <summary>
            Creates a camera behavior that moves the camera freely inside the bounds of the level.
            </summary>
            <param name="map">The map the camera will be moving around in.</param>
            <param name="levelNode">The <see cref="T:Urho.Node"/> representing the whole level.</param>
            <param name="cameraNode">The <see cref="T:Urho.Node"/> containing the <see cref="T:Urho.Camera"/> component.</param>
            <param name="stateSwitched">Handler that will be called when a state switch occurs.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.MoveTo(Urho.Vector2)">
            <summary>
            Moves the camera to the <paramref name="xzPosition"/> in the XZ plane,
            does not change the Y coordinate of the camera.
            </summary>
            <param name="xzPosition">The position in the XZ plane to move the camera to.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.MoveTo(Urho.Vector3)">
            <summary>
            Moves the camera to the <paramref name="position"/> in the game world.
            If the given position falls outside the map, moves the camera as
            close as possible to the <paramref name="position"/> while still
            being inside the map.
            </summary>
            <param name="position">The new position of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.MoveBy(Urho.Vector2)">
            <summary>
            Moves the camera by <paramref name="xzMovement"/> in the XZ plane.
            Does not change the Y coordinate of the camera position.
            If the movement would be outside the map bounds, moves the camera to the border of the map.
            </summary>
            <param name="xzMovement">The change of position in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.MoveBy(Urho.Vector3)">
            <summary>
            Moves the camera by <paramref name="movement"/> from the point of view of the camera.
            X coordinate represents movement to the right, Z coordinate movement forward, Y coordinate
            up.
            </summary>
            <param name="movement">The change of position of the camera based on the direction of view of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.Rotate(Urho.Vector2)">
            <summary>
            Rotates the camera around it's current position.
            </summary>
            <param name="rotation">The rotation to apply to the camera, X around vertical axis, Y around the axis pointing to the right
            from the current point of view of the camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.Zoom(System.Single)">
            <summary>
            This type of camera does not zoom.
            </summary>
            <param name="zoom">Does nothing.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.Reset">
            <summary>
            Resets the camera rotation so that it will face in the default direction.
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.FreeFloatCamera.SwitchToThis(MHUrho.CameraMovement.CameraState)">
            <inhertidoc />
        </member>
        <member name="F:MHUrho.CameraMovement.PointFollowingCamera.MinZoomDistance">
            <summary>
            Limit of zooming so that we don't get too close to the followed point.
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.PointFollowingCamera.MinOffsetFromTerrain">
            <summary>
            Minimal distance in the vertical direction from the terrain or building below. 
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.PointFollowingCamera.CameraWorldPosition">
            <summary>
            Position of the followed point in the game world.
            </summary>
        </member>
        <member name="P:MHUrho.CameraMovement.PointFollowingCamera.CameraWorldRotation">
            <summary>
            Rotation of the followed point in the game world.
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.PointFollowingCamera.CameraHolder">
            <summary>
            Point on the ground
            Camera follows this point at constant offset while not in FreeFloat mode
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.PointFollowingCamera.CameraNode">
            <summary>
            Node of the camera itself
            </summary>
        </member>
        <member name="F:MHUrho.CameraMovement.PointFollowingCamera.WantedCameraVerticalOffset">
            <summary>
            Vertical offset of the camera during Fixed mode without stretch
            World Y coordinate difference from CameraHolder
            The camera stretches upwards when there is an obstacle
            When the camera moves away from the obstacle, it returns to this height
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.#ctor(MHUrho.WorldMap.IMap,Urho.Node,Urho.Node,MHUrho.CameraMovement.StateSwitchedDelegate)">
            <summary>
            Creates new instance representing a camera behavior that follows a set point in a game world.
            </summary>
            <param name="map">The level map in which the camera exists.</param>
            <param name="cameraNode">The node containing the <see cref="T:Urho.Camera"/> component. </param>
            <param name="cameraHolder">The point the camera will be offset from and following.</param>
            <param name="stateSwitched">The handler to invoke when a state switch occurs.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.Rotate(Urho.Vector2)">
            <summary>
            Rotates the camera around the followed point. X represents rotation around the vertical axis,
            Y represents the rotation around the axis pointing right from the current direction of camera.
            </summary>
            <param name="rotation">The applied rotation of the camera, X represents rotation around the vertical axis,
            Y represents the rotation around the axis pointing right from the current direction of camera.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.Zoom(System.Single)">
            <summary>
            Moves the camera closer to or further from the followed point, where + means further and - means closer.
            </summary>
            <param name="delta">The change of distance from the followed point, + means further away, - means closer.</param>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.PreChangesUpdate">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.PostChangesUpdate">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.FixCameraNodeTerrainClipping">
            <summary>
            Moves camera node in the Y direction above terrain and buildings at the camera XZ coords 
            </summary>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.SwitchToThisFromPFC(MHUrho.CameraMovement.PointFollowingCamera)">
            <summary>
            Uses the stored information in the previous <see cref="T:MHUrho.CameraMovement.PointFollowingCamera"/> state we are
            switching from so that the camera does not suddenly jump and stuff.
            </summary>
            <param name="pointFollowingCamera"></param>
        </member>
        <member name="M:MHUrho.CameraMovement.PointFollowingCamera.SignalCameraMoved">
            <summary>
            Signals that the camera moved.
            </summary>
        </member>
        <member name="T:MHUrho.DefaultComponents.BallisticProjectile">
            <summary>
            Projectile component that gets that moves the projectile along a ballistic trajectory
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.BallisticProjectile.GetTimesAndVectorsForStaticTarget(Urho.Vector3,Urho.Vector3,System.Single,System.Single@,Urho.Vector3@,System.Single@,Urho.Vector3@)">
            <summary>
            Calculates the movement vectors for projectile with initial speed <paramref name="initialProjectileSpeed"/>, to go from <paramref name="sourcePosition"/> to <paramref name="targetPosition"/>
            
            </summary>
            <param name="targetPosition"></param>
            <param name="sourcePosition"></param>
            <param name="initialProjectileSpeed"></param>
            <param name="lowTime"></param>
            <param name="lowVector"></param>
            <param name="highTime"></param>
            <param name="highVector"></param>
            <returns>True if it is possible to hit the <paramref name="targetPosition"/> with the given <paramref name="initialProjectileSpeed"/>,
            and the out parameters are valid, or false if it is not possible and the out params are invalid</returns>
        </member>
        <member name="T:MHUrho.DefaultComponents.ClickedDelegate">
            <summary>
            
            </summary>
            <param name="button">Pressed button</param>
            <param name="buttons">Other buttons down during the button press</param>
            <param name="qualifiers">Qualifiers like shift, ctrl, alt etc. </param>
        </member>
        <member name="T:MHUrho.DefaultComponents.MeeleAttacker">
            <summary>
            Component that attacks a target in selectable intervals.
            Can automatically search for target unit and automatically attack it.
            Can be manually ordered to attack unit or building.
            </summary>
        </member>
        <member name="T:MHUrho.DefaultComponents.MeeleAttacker.IBaseUser">
            <summary>
            Base interface to be expanded in classes derived from MeeleAttacker
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.IBaseUser.IsInRange(MHUrho.DefaultComponents.MeeleAttacker,MHUrho.Logic.IEntity)">
            <summary>
            Checks if the unit is in meele range of the attacker and should be attacked.
            </summary>
            <param name="attacker">The current attacker.</param>
            <param name="target">Attacked target.</param>
            <returns>True if the unit is in range, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.IBaseUser.PickTarget(System.Collections.Generic.ICollection{MHUrho.Logic.IUnit})">
            <summary>
            Pick the target unit from all automatically found units in <paramref name="possibleTargets"/>.
            </summary>
            <param name="possibleTargets">Automatically found units that are in search distance</param>
            <returns>The chosen unit to attack or null if none should be attacked.</returns>
        </member>
        <member name="P:MHUrho.DefaultComponents.MeeleAttacker.SearchForTarget">
            <summary>
            If meeleAttacker should automatically search for a target
            Automatically will only attack units, not buildings.
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.MeeleAttacker.TimeBetweenSearches">
            <summary>
            Timeout between searching for target
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.MeeleAttacker.SearchRectangleSize">
            <summary>
            Determines the size of the searched rectangle when searching for target.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.MeeleAttacker.Attacked">
            <summary>
            Invoked when meeleAtacker attacks the current target.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.MeeleAttacker.TargetInRange">
            <summary>
            Invoked each game tick the current target is in range.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.MeeleAttacker.TargetFound">
            <summary>
            Invoked when target is acquired automatically
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.#ctor(MHUrho.Logic.ILevelManager,System.Boolean,Urho.IntVector2,System.Single,System.Single,System.Single,System.Single,MHUrho.DefaultComponents.MeeleAttacker.IBaseUser)">
            <summary>
            Constructor for loading, needs the <paramref name="timeToNextAttack"/>
            </summary>
            <param name="level">Current level.</param>
            <param name="searchForTarget">If the new instance should automatically search for target.</param>
            <param name="searchRectangleSize">Size of the searched area</param>
            <param name="timeBetweenSearches"></param>
            <param name="timeBetweenAttacks"></param>
            <param name="timeToNextSearch"></param>
            <param name="timeToNextAttack"></param>
            <param name="user">Plugin providing the implementation of methods needed for our implementation.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.Attack(MHUrho.Logic.IEntity)">
            <summary>
            Sets <paramref name="newTarget"/> as the current target.
            </summary>
            <param name="newTarget">The new target to attack.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.StopAttacking">
            <summary>
            Stops attacking any current target.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.TryAttack(System.Single)">
            <summary>
            Progresses the attack, stepping the time between attacks if <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.Target"/> is in range
            </summary>
            <param name="timeStep">Time elapsed since the last update</param>
            <returns>true if <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.Target"/> is in range, false if it is not</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.SearchForTargetInRange(System.Single)">
            <summary>
            If <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.SearchForTarget"/> is true,searches for targets in rectangle of size <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.SearchRectangleSize"/> around the owning entitys position
            Otherwise does nothing.
            Searches only for units, buildings can only be targeted by a call to <see cref="M:MHUrho.DefaultComponents.MeeleAttacker.Attack(MHUrho.Logic.IEntity)"/>.
            </summary>
            <param name="timeStep"></param>
        </member>
        <member name="M:MHUrho.DefaultComponents.MeeleAttacker.OnTargetDeath(MHUrho.Logic.IEntity)">
            <summary>
            Removes the target on its death.
            </summary>
        </member>
        <member name="T:MHUrho.DefaultComponents.MovingMeeleAttacker">
            <summary>
            A component that can check for targets in a rectangle of size <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.SearchRectangleSize"/>,
            if it finds a target or is given target explicitly by <see cref="M:MHUrho.DefaultComponents.MeeleAttacker.Attack(MHUrho.Logic.IEntity)"/>,
            pathfinds to the target and if in range, raises <see cref="E:MHUrho.DefaultComponents.MeeleAttacker.Attacked"/> event every <see cref="P:MHUrho.DefaultComponents.MeeleAttacker.TimeBetweenAttacks"/> seconds
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.MovingMeeleAttacker.CreateNew``1(``0,MHUrho.Logic.ILevelManager,System.Boolean,Urho.IntVector2,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="plugin"></param>
            <param name="level"></param>
            <param name="searchForTarget"></param>
            <param name="searchRectangleSize">The size of the rectangle with the Entity in the center that will be checked for possible targets</param>
            <param name="timeBetweenSearches">Time between searching the rectangle of size <paramref name="searchRectangleSize"/> if <paramref name="searchForTarget"/> is true</param>
            <param name="timeBetweenPositionChecks">Time between the attacker checks if the targets position changed and recalculates its path</param>
            <param name="timeBetweenAttacks">Time between each attack</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.MovingRangeTarget.IUser.GetFutureWaypoints(MHUrho.DefaultComponents.MovingRangeTarget)">
            <summary>
            Gets waypoints beginning with the current position with the time 0,
            and all the remaining waypoints
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:MHUrho.DefaultComponents.MovingRangeTarget.offset">
            <summary>
            Offset from <see cref="P:MHUrho.Logic.IEntity.Position"/> in the entity space (rotates with entity)
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.IRangeTarget.GetFutureWaypoints">
            <summary>
            Gets waypoints begining with the current position with time 0,
            and all following waypoints to the end of the path
            </summary>
            <returns></returns>
        </member>
        <member name="E:MHUrho.DefaultComponents.RangeTargetComponent.TargetMoved">
            <summary>
            Invoked every time target moves.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.RangeTargetComponent.AddShooter(MHUrho.DefaultComponents.RangeTargetComponent.IShooter)">
            <summary>
            Adds a shooter to be notified when this target dies
            
            IT IS RESET WITH LOAD, you need to add again when loading
            you can get this target by its <see cref="P:MHUrho.DefaultComponents.RangeTargetComponent.InstanceID"/> from <see cref="!:ILevelManager.GetTarget(int targetID)"/>
            </summary>
            <param name="shooter">the shooter to notify</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.RangeTargetComponent.OnDeleted">
            <summary>
            Called on destruction of component, basically a destructor
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.Shooter.RateOfFire">
            <summary>
            Shots per minute
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.Shooter.SearchForTarget">
            <summary>
            If shooter should search for a target automatically.
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.Shooter.TargetSearchDelay">
            <summary>
            Delay between search sweeps.
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.Shooter.SourceOffset">
            <summary>
            Offset of the spawn point of projectiles from the <see cref="P:MHUrho.Logic.Entity.Position"/> of the owning entity
            Offset is in the Entities local space, +z is forward, +x is right, +y is up in the Entities current orientation
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.Shooter.Target">
            <summary>
            Current target the shooter is shooting at.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.TargetAutoAcquired">
            <summary>
            Invoked when shooter acquires a target automatically.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.ShotReloaded">
            <summary>
            Invoked when timeout between shots expires.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.BeforeShotFired">
            <summary>
            Invoked just before projectile is fired.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.TargetLost">
            <summary>
            Invoked when shooter looses current target. (Target gets out of range, etc.)
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.TargetDestroyed">
            <summary>
            Invoked when target dies.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.Shooter.ShotFired">
            <summary>
            Invoked just after the projectile is fired.
            </summary>
        </member>
        <member name="F:MHUrho.DefaultComponents.Shooter.projectileType">
            <summary>
            Type of the projectile to shoot.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.#ctor(MHUrho.Logic.ILevelManager,MHUrho.Logic.ProjectileType,Urho.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="level">Current level.</param>
            <param name="projectileType">Type of the projectile to shoot.</param>
            <param name="sourceOffset">Offset of the source of projectiles from the Entity Node.</param>
            <param name="rateOfFire">Number of projectiles to shoot per minute.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.CreateNew(MHUrho.Plugins.EntityInstancePlugin,MHUrho.Logic.ILevelManager,MHUrho.Logic.ProjectileType,Urho.Vector3,System.Single)">
            <summary>
            Creates new instance of a shooter and attaches it to the Entity and it's node.
            </summary>
            <param name="plugin">Plugin of the entity</param>
            <param name="level">Current level.</param>
            <param name="projectileType">Type of the projectile to shoot.</param>
            <param name="sourceOffset">Offset of the source of projectiles from the Entity Node.</param>
            <param name="rateOfFire">Rate of fire in number of projectiles per minute.</param>
            <returns>The newly created instance of Shooter.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.ShootAt(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Stops shooting at any current target and sets <paramref name="newTarget"/> as the target of this Shooter if the <paramref name="newTarget"/> is in range of this shooter.
            </summary>
            <param name="newTarget">New target to try shooting at.</param>
            <returns>True if <paramref name="newTarget"/> is in range, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.CanShootAt(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Checks if <paramref name="target"/> can be shot at, mainly if the target is in range.
            </summary>
            <param name="target">The target to check.</param>
            <returns>True of target can be shot at, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.StopShooting">
            <summary>
            Stops shooting at any current target.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.ResetShotDelay">
            <summary>
            Manually resets shot delay, meaning if shooter has a target, it will shoot at it immediately.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.MHUrho#DefaultComponents#RangeTargetComponent#IShooter#OnTargetDestroy(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Informs the shooter that the target was destroyed.
            </summary>
            <param name="target">The destroyed target.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.OnDeleted">
            <summary>
            Invoked when this component is deleted, basically a destructor.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.Shooter.OnUpdateChecked(System.Single)">
            <summary>
            Game tick update, invoked only when both Level and Entity are enabled.
            </summary>
            <param name="timeStep">Elapsed time since the previous update.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.UnitSelector.IUser.ExecuteOrder(MHUrho.Control.Order)">
            <summary>
            Executes given <paramref name="order"/>, returns true if executed successfully, false otherwise.
            </summary>
            <param name="order">Order to execute.</param>
            <returns>True if executed successfully, false otherwise</returns>
        </member>
        <member name="E:MHUrho.DefaultComponents.UnitSelector.UnitSelected">
            <summary>
            Invoked on unit selection
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.UnitSelector.UnitDeselected">
            <summary>
            Invoked on unit deselection
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.UnitSelector.Order(MHUrho.Control.Order)">
            <summary>
            Issues an <paramref name="order"/> to the unit.
            If the order was executed, returns true, otherwise false.
            </summary>
            <param name="order">Order to execute.</param>
            <returns>True if unit executed given order, False if there is nothing the unit can do</returns>
        </member>
        <member name="T:MHUrho.DefaultComponents.WorldWalker.IUser">
            <summary>
            Interface that must be implemented by the plugin of the entity using this component.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.IUser.GetNodeDistCalculator">
            <summary>
            Gets node distance calculator.
            This method may be called many times.
            Every received instance will not be used after unit is moved by WorldWalker.
            </summary>
            <returns>Node distance calculator.</returns>
        </member>
        <member name="P:MHUrho.DefaultComponents.WorldWalker.State">
            <summary>
            State of the last request executed by this WorldWalker.
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.WorldWalker.Path">
            <summary>
            Current path the WorldWalker is following, or null if WorldWalker is not moving
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.WorldWalker.MovementStarted">
            <summary>
            Invoked on start of a new movement.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.WorldWalker.MovementFinished">
            <summary>
            Invoked on successful completition of a movement request
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.WorldWalker.MovementFailed">
            <summary>
            Invoked on a failure of movement, either there is currently no path
            to the provided target or path calculation failed.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.WorldWalker.MovementCanceled">
            <summary>
            Invoked on user cancellation of current movement.
            </summary>
        </member>
        <member name="E:MHUrho.DefaultComponents.WorldWalker.PathRecalculated">
            <summary>
            Invoked on every path recalculation. Recalculation happens on failure to move along
            previously calculated path.
            </summary>
        </member>
        <member name="P:MHUrho.DefaultComponents.WorldWalker.Unit">
            <summary>
            The unit this WorldWalker moves around the world.
            </summary>
        </member>
        <member name="F:MHUrho.DefaultComponents.WorldWalker.user">
            <summary>
            The plugin providing an implementation of the required methods.
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.CreateNew``1(``0,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new WorldWalker and attaches it to the Unit and its node.
            </summary>
            <typeparam name="T">Unit plugin that implements the <see cref="T:MHUrho.DefaultComponents.WorldWalker.IUser"/> interface required for this component.</typeparam>
            <param name="plugin">Unit plugin of the unit this WorldWalker should be attached to.</param>
            <param name="level">Current level.</param>
            <returns>The newly created WorldWalker instance.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.GoTo(MHUrho.PathFinding.INode)">
            <summary>
            Tries to start movement towards the <paramref name="targetNode"/>. Returns true if path was found, false if no path was found.
            </summary>
            <param name="targetNode">Target of the movement.</param>
            <returns>Returns true if path was found, false if no path was found.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.Stop">
            <summary>
            Stops the current movement if there is any
            </summary>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.GetRestOfThePath">
            <summary>
            Returns the current position and the part of the path that has not been reached yet.
            </summary>
            <returns>Remaining part of the path to be walked in the form of waypoints.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.GetRestOfThePath(Urho.Vector3)">
            <summary>
            Returns the current position and the part of the path that has not been reached yet, each waypoint offset by <paramref name="offset"/>.
            </summary>
            <param name="offset">Offset from the unit feet position that every Waypoint position will be translated by</param>
            <returns>Returns the current position and the part of the path that has not been reached yet, each waypoint offset by <paramref name="offset"/>.</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.OnUpdateChecked(System.Single)">
            <summary>
            Scene update, checked that the level is started and the updates of this unit are enabled.
            </summary>
            <param name="timeStep">Time from the previous update.</param>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.MoveTowards(MHUrho.PathFinding.Waypoint,System.Single)">
            <summary>
            Moves unit towards the <paramref name="point"/>
            </summary>
            <param name="waypoint">Waypoint to move towards</param>
            <param name="timeStep">TimeStep of the game, time from previous update.</param>
            <returns>If unit reached the waypoint</returns>
        </member>
        <member name="M:MHUrho.DefaultComponents.WorldWalker.GetMoveVector(MHUrho.PathFinding.Waypoint,System.Single)">
            <summary>
            Calculates by how much should the unit move
            </summary>
            <param name="waypoint">The waypoint to move towards</param>
            <param name="timeStep"> How many seconds passed since the last update</param>
            <returns>The change of units position to make it reach the waypoint in time</returns>
        </member>
        <member name="P:MHUrho.EditorTools.Base.MapHighlighting.StaticSquareChangedArgs.Square">
            <summary>
            Square of tile MapLocations
            </summary>
        </member>
        <member name="M:MHUrho.EditorTools.MouseKeyboard.UnitSelectorTool.HandleUnitClick(MHUrho.Logic.IUnit,Urho.MouseButtonUpEventArgs)">
            <summary>
            Tries to handle a click on a unit.
            </summary>
            <param name="unit">The clicked unit.</param>
            <param name="e">Event data.</param>
            <returns>True if the event was handled and should not be propagated to other things behind the clicked unit.</returns>
        </member>
        <member name="M:MHUrho.EditorTools.MouseKeyboard.UnitSelectorTool.HandleBuildingClick(MHUrho.Logic.IBuilding,Urho.MouseButtonUpEventArgs,Urho.Vector3)">
            <summary>
            Tries to handle a click on a building.
            </summary>
            <param name="building">The clicked building.</param>
            <param name="e">Event data.</param>
            <param name="worldPosition">Position of the intersection of raycast used for click and the building geometry.</param>
            <returns>True if the event was handled and should not be propagated to other things behind the clicked building.</returns>
        </member>
        <member name="M:MHUrho.EditorTools.MouseKeyboard.UnitSelectorTool.HandleTileClick(MHUrho.Logic.ITile,Urho.MouseButtonUpEventArgs)">
            <summary>
            Tries to handle a click on a tile.
            </summary>
            <param name="tile">The clicked tile.</param>
            <param name="e">Event data.</param>
            <returns>True if the event was handled and should not be propagated to other things behind the clicked tile.</returns>
        </member>
        <member name="M:MHUrho.EditorTools.ToolManager.RemoveTool(MHUrho.EditorTools.Tool)">
             <summary>
             Removes the first occurence of tool in <see cref="F:MHUrho.EditorTools.ToolManager.Tools"/> and if the removal succeeds, removes the same tool from the UI
            
             Also disposes the tool
             </summary>
             <param name="tool">The tool to remove</param>
             <returns>True if the tool was present in <see cref="F:MHUrho.EditorTools.ToolManager.Tools"/> and was removed, false if it was not present in <see cref="F:MHUrho.EditorTools.ToolManager.Tools"/></returns>
        </member>
        <member name="M:MHUrho.EntityInfo.InsigniaGetter.MarkUsed(MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            
            </summary>
            <param name="insignia"></param>
            <returns>Returns the argument <paramref name="insignia"/></returns>
            <exception cref="T:System.ArgumentException">Thrown when the insignia is already in use</exception>
        </member>
        <member name="M:MHUrho.Helpers.Extensions.IntRectExtensions.TopLeft(Urho.IntRect)">
            <summary>
            Gets Top Left corner from IntRect, copies the IntRectangle to do this
            </summary>
            <param name="rectangle"></param>
            <returns>Position of the top left corner of the rectangle</returns>
        </member>
        <member name="M:MHUrho.Helpers.FloatHelpers.FloatsEqual(System.Single,System.Single,System.Single)">
            <summary>
            Adapted from https://stackoverflow.com/questions/3874627/floating-point-comparison-functions-for-c-sharp
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Helpers.MathHelpers.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves a*x^2 + b*x + c = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Helpers.MathHelpers.SolveQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Source https://blog.forrestthewoods.com/solving-ballistic-trajectories-b0165523348c
             Solve quartic function: c0*x^4 + c1*x^3 + c2*x^2 + c3*x + c4. 
             Returns number of real solutions.
            </summary>
            <param name="c0"></param>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <param name="c4"></param>
            <param name="solution0"></param>
            <param name="solution1"></param>
            <param name="solution2"></param>
            <param name="solution3"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Helpers.Spiral.SpiralEnumerator.#ctor(MHUrho.Helpers.Spiral,System.Int32)">
            <summary>
            NOT TESTED
            </summary>
            <param name="spiral"></param>
            <param name="emptyInnerSize"></param>
        </member>
        <member name="T:MHUrho.ImplementationException">
            <summary>
            Exception thrown when there is an error in the implementation of the program
            </summary>
        </member>
        <member name="T:MHUrho.Input.MHUrhoMouseMovedEventArgs">
            <summary>
            Custom class containing the data of the mouse moved event.
            Mostly to enable mocking of mouse movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.X">
            <summary>
            X coordinate of the cursor after the movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.Y">
            <summary>
            Y coordinate of the cursor after the movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.CursorPosition">
            <summary>
            The position of the cursor after the movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.DeltaX">
            <summary>
            Change of the X coordinate.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.DeltaY">
            <summary>
            Change of the Y coordinate.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.CursorDelta">
            <summary>
            Change of the cursor position.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.Buttons">
            <summary>
            Pressed buttons during the movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MHUrhoMouseMovedEventArgs.Qualifiers">
            <summary>
            Pressed qualifier keys during the movement.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MHUrhoMouseMovedEventArgs.#ctor(Urho.IntVector2,Urho.IntVector2,Urho.MouseButton,System.Int32)">
            <summary>
            Creates representation of mouse movement event.
            </summary>
            <param name="cursorPosition">The position of the cursor after the movement.</param>
            <param name="cursorDelta">The change of the position of the cursor this event represents.</param>
            <param name="buttons">Pressed mouse buttons during the event.</param>
            <param name="qualifiers">Pressed qualifier keys during the event.</param>
        </member>
        <member name="M:MHUrho.Input.MHUrhoMouseMovedEventArgs.#ctor(Urho.MouseMovedEventArgs)">
            <summary>
            Creates representation of mouse movement event.
            </summary>
            <param name="e">Engine representation of the event.</param>
        </member>
        <member name="M:MHUrho.Input.MHUrhoMouseMovedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Urho.MouseButton,System.Int32)">
            <summary>
            Creates representation of mouse movement event.
            </summary>
            <param name="x">The X coordinate of the cursor after the movement.</param>
            <param name="y">The Y coordinate of the cursor after the movement.</param>
            <param name="dx">Change in the X coordinate this event represents.</param>
            <param name="dy">Change in the Y coordinate this event represents.</param>
            <param name="buttons">Pressed mouse buttons during the event.</param>
            <param name="qualifiers">Pressed qualifier keys during the event.</param>
        </member>
        <member name="M:MHUrho.Input.MHUrhoMouseMovedEventArgs.#ctor(Urho.IntVector2,System.Int32,System.Int32,Urho.MouseButton,System.Int32)">
            <summary>
            Creates representation of mouse movement event.
            </summary>
            <param name="cursorPosition">The position of the cursor after the movement.</param>
            <param name="dx">Change in the X coordinate this event represents.</param>
            <param name="dy">Change in the Y coordinate this event represents.</param>
            <param name="buttons">Pressed mouse buttons during the event.</param>
            <param name="qualifiers">Pressed qualifier keys during the event.</param>
        </member>
        <member name="M:MHUrho.Input.MHUrhoMouseMovedEventArgs.#ctor(System.Int32,System.Int32,Urho.IntVector2,Urho.MouseButton,System.Int32)">
            <summary>
            Creates representation of mouse movement event.
            </summary>
            <param name="x">The X coordinate of the cursor after the movement.</param>
            <param name="y">The Y coordinate of the cursor after the movement.</param>
            <param name="cursorDelta">The change of the position of the cursor this event represents.</param>
            <param name="buttons">Pressed mouse buttons during the event.</param>
            <param name="qualifiers">Pressed qualifier keys during the event.</param>
        </member>
        <member name="T:MHUrho.Input.ICameraController">
            <summary>
            Interface representing which translates user input to camera movement.
            </summary>
        </member>
        <member name="T:MHUrho.Input.IControllerFactory">
            <summary>
            Abstract factory based on the design pattern of the same name which produces
            input handling based on the chosen input schema.
            </summary>
        </member>
        <member name="T:MHUrho.Input.InputType">
            <summary>
            Represents an input schema type.
            </summary>
        </member>
        <member name="T:MHUrho.Input.IGameController">
            <summary>
            Provides access to the user input during the game.
            Controls the level lifetime.
            </summary>
        </member>
        <member name="T:MHUrho.Input.OnScreenChangeDelegate">
            <summary>
            Signature of handlers invoked when a menu screen is changed.
            </summary>
        </member>
        <member name="T:MHUrho.Input.IMenuController">
            <summary>
            Provides access to the user input,
            controls the lifetime of menus.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.CameraController">
            <summary>
            Translates user input into camera movement.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.CameraController.CameraMovementType">
            <summary>
            Mode of the camera movement.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.CameraController.CameraMovements">
            <summary>
            Represents current movement of the camera.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.CameraMovements.StopAll">
            <summary>
            Represents that all camera movement was stopped.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.CameraController.CameraScrollSensitivity">
            <summary>
            Camera movement sensitivity (speed)
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.CameraController.CameraRotationSensitivity">
            <summary>
            Camera rotation sensitivity (speed)
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.CameraController.MouseRotationSensitivity">
            <summary>
            Mouse sensitivity when translating to camera rotation.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.CameraController.WheelSensitivity">
            <summary>
            Zoom sensitivity.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.CameraController.MouseBorderCameraMovement">
            <summary>
            If the camera should be moved when the cursor gets close to the app window border.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.CameraController.cameraType">
            <summary>
            Current mode of the camera movement
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.CameraController.input">
            <summary>
            Input provider.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.CameraController.ui">
            <summary>
            UI control.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.CameraController.camera">
            <summary>
            Component directing camera movement.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.CameraController.activeCameraMovement">
            <summary>
            Current camera movement representation.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.#ctor(MHUrho.Input.MouseKeyboard.GameController,MHUrho.UserInterface.MouseKeyboard.GameUI,MHUrho.CameraMovement.CameraMover)">
            <summary>
            Creates a translator from user input to camera movement.
            </summary>
            <param name="input">The user input provider.</param>
            <param name="ui">User interface controller.</param>
            <param name="cameraMover">The component directing the camera movement.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.Dispose">
            <summary>
            Removes all registered handlers for events, releases camera.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.RegisterCameraControlKeys">
            <summary>
            Registers handlers for keyboard events.
            </summary>
            <remarks>
            In future could be read from config file.
            </remarks>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.OnScreenBorderEntered(MHUrho.Input.MouseKeyboard.ScreenBorder)">
            <summary>
            Invoked when the mouse cursor enters area near the game window border.
            </summary>
            <param name="border">Which border area the cursor entered</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.OnScreenBorderLeft(MHUrho.Input.MouseKeyboard.ScreenBorder)">
            <summary>
            Invoked when the mouse cursor leaves an area near the game window border.
            </summary>
            <param name="border">The border area the cursor left.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.OnMouseWheel(Urho.MouseWheelEventArgs)">
            <summary>
            Handles when mouse wheel moves.
            </summary>
            <param name="args">The mouse wheel moved event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.OnMouseMoved(MHUrho.Input.MHUrhoMouseMovedEventArgs)">
            <summary>
            Handles mouse moved event.
            </summary>
            <param name="args">The mouse moved event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraMoveLeft(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera movement to the left.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraMoveLeft(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera movement to the left.
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraMoveRight(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera movement to the right.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraMoveRight(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera movement to the right. 
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraMoveForward(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera movement to the forward.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraMoveForward(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera movement forward.
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraMoveBackward(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera movement backward.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraMoveBackward(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera movement backwards.
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraRotationRight(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera rotation to the right.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraRotationRight(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera rotation to the right. 
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraRotationLeft(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera rotation to the left.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraRotationLeft(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera rotation to the left, 
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraRotationUp(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera rotation up.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraRotationUp(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera rotation up, 
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StartCameraRotationDown(Urho.KeyDownEventArgs)">
            <summary>
            Starts camera rotation down.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.StopCameraRotationDown(Urho.KeyUpEventArgs)">
            <summary>
            Stops the camera rotation down.
            </summary>
            <param name="args">The key up event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.CameraSwitchMode(Urho.KeyDownEventArgs)">
            <summary>
            Switches camera mode to/from free float mode,
            based on the current camera mode.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.CameraController.ResetCamera(Urho.KeyDownEventArgs)">
            <summary>
            Resets the camera to it's default offset and rotation.
            </summary>
            <param name="args">The key down event data.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.Controller">
            <summary>
            Base class for user input providers.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.Controller.Enabled">
            <summary>
            If the input is being captured by this class.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.Controller.MouseSensitivity">
            <summary>
            Scaling of the mouse movement.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.Controller.Game">
            <summary>
            Instance of the current application.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.Controller.Input">
            <summary>
            Game engine input subsystem.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.Controller.UI">
            <summary>
            Game engine ui subsystem.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.#ctor">
            <summary>
            Creates an instance to capture and provide the user input.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.Enable">
            <summary>
            Captures the user input.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.Disable">
            <summary>
            Releases the user input.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.KeyUp(Urho.KeyUpEventArgs)">
            <summary>
            Invoked when a key is released.
            </summary>
            <param name="e">Additional data of the key release event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.KeyDown(Urho.KeyDownEventArgs)">
            <summary>
            Invoked when a key is pressed down.
            </summary>
            <param name="e">Additional data of the key press event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.MouseButtonDown(Urho.MouseButtonDownEventArgs)">
            <summary>
            Invoked when a mouse button is pressed down.
            </summary>
            <param name="e">Additional data of the button press event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.MouseButtonUp(Urho.MouseButtonUpEventArgs)">
            <summary>
            Invoked when a mouse button is released.
            </summary>
            <param name="e">Additional data of the button release event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.MouseMoved(Urho.MouseMovedEventArgs)">
            <summary>
            Invoked when mouse is moved.
            </summary>
            <param name="e">Additional data of the mouse move event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.MouseWheel(Urho.MouseWheelEventArgs)">
            <summary>
            Invoked when the mouse wheel is moved.
            </summary>
            <param name="e">Additional data of the mouse wheel move event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.Controller.CreateCursor">
            <summary>
            Creates a graphical representation of the cursor.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.OnMouseMoveDelegate">
            <summary>
            Encapsulates methods that handle mouse move events.
            </summary>
            <param name="e">The mouse movement event data.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.OnMouseDownDelegate">
            <summary>
            Encapsulates methods that handle mouse button press events.
            </summary>
            <param name="e">The mouse button press event data.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.OnMouseUpDelegate">
            <summary>
            Encapsulates methods that handle mouse button release events.
            </summary>
            <param name="e">The mouse button release event data.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.OnMouseWheelDelegate">
            <summary>
            Encapsulates methods that handle mouse wheel movement events.
            </summary>
            <param name="e">The mouse wheel movement event data.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.ScreenBorderEventDelegate">
            <summary>
            Encapsulates methods that handle the events of cursor entering or leaving the border area of game window.
            </summary>
            <param name="e">The screen border entered or left.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.ScreenBorder">
            <summary>
            Represents the four areas of screen border.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.GameController">
            <summary>
            Captures user input during the game.
            Provides control over the game running state.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.Player">
            <summary>
            The player user is currently controlling.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.MHUrho#Input#IGameController#UIManager">
            <summary>
            The user interface controller.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.UIManager">
            <summary>
            The user interface controller.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.InputType">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.DoOnlySingleRaycasts">
            <summary>
            If raycasts should only be done until the first intersection,
             or if they should be done until some range limit.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.Level">
            <summary>
            The controlled level.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.GameController.CursorPosition">
            <summary>
            Current cursor position in screen coordinates.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.MouseMove">
            <summary>
            Invoked on mouse movement.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.MouseDown">
            <summary>
            Invoked on mouse button press.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.MouseUp">
            <summary>
            Invoked on mouse button release.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.MouseWheelMoved">
            <summary>
            Invoked on mouse wheel movement.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.EnteredScreenBorder">
            <summary>
            Invoked when the cursor enters an area near the screen border.
            </summary>
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.GameController.LeftScreenBorder">
            <summary>
            Invoked when the cursor leaves an area near the screen border.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.octree">
            <summary>
            The game engine component for raycasting.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.camera">
            <summary>
            The comonent controlling camera movement.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.keyUpActions">
            <summary>
            Mapping of keys to actions to invoke on the key release.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.keyDownActions">
            <summary>
            Mapping of keys to actions to invoke on key press.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.keyRepeatActions">
            <summary>
            Mapping of keys to actions to invoke while the key is held down.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.CloseToBorder">
            <summary>
            Percentage of the screen that counts as a border area.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.cachedTileUnderCursor">
            <summary>
            Is set to null at the end of MouseDown, MouseMove, MouseUp and ViewMoved handlers
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.GameController.cursorVisible">
            <summary>
            For storing the cursor visibility on game pause
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.#ctor(MHUrho.Logic.ILevelManager,Urho.Octree,MHUrho.Logic.IPlayer,MHUrho.CameraMovement.CameraMover)">
            <summary>
            Creates an user input provider and level control facade.
            </summary>
            <param name="level">The level the new instance will control.</param>
            <param name="octree">The engine component used for raycasting.</param>
            <param name="player">The player that will own the user input at the start.</param>
            <param name="cameraMover">The component for camera movement.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.Dispose">
            <summary>
            Removes registrations from the engine input subsystem and releases the UI.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.CursorRaycast">
            <summary>
            Returns all intersections in the game world with a ray cast from camera through the cursor.
            Mainly used to see what the user has the mouse over or what he clicked.
            </summary>
            <returns>All intersections of the ray from camera through the cursor.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.CursorRaycastFirstOnly">
            <summary>
            Returns the closest visible thing the cursor is over or null if the cursor is not over any game objects. 
            </summary>
            <returns>Returns the closest visible thing the cursor is over, or null if the cursor is not over any game objects.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RaycastHeightAbovePoint(Urho.Vector3)">
            <summary>
            Returns the height of the cursor above the <paramref name="point"/> when we project the
            cursor onto an Y axis going through the <paramref name="point"/>.
            </summary>
            <param name="point">The world position the height is measured from.</param>
            <returns>The height of the cursor above <paramref name="point"/> when we project the
            cursor onto an Y axis going through the <paramref name="point"/>.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.GetClosestTileCorner">
            <summary>
            Gets the map matrix coordinates of the tile corner closest to the cursor
            
            <seealso cref="M:MHUrho.Input.MouseKeyboard.GameController.GetClosestTileCornerPosition"/>
            </summary>
            <returns>The coordinates of the tile corner closest to the intersection of the map with a ray from camera through cursor.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.GetClosestTileCornerPosition">
            <summary>
            Gets the world position of the tile corner closest to the cursor.
            </summary>
            <returns>The position of the tile corner closest to the intersection of the map with a ray from camera through cursor.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.GetTileUnderCursor">
            <summary>
            Gets tile currently under the cursor, is cached for the calls in the same
            handler, so all tools calling this from MouseMove will get the same value,
            calculated on the first call
            </summary>
            <returns>Tile under the cursor</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.HideCursor">
            <summary>
            Hides the cursor graphical representation, disables cursor movement.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.ShowCursor(System.Nullable{Urho.Vector3})">
            <summary>
            Makes cursor visible
            </summary>
            <param name="abovePoint">world point above which the cursor should show up, or null if does not matter</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RegisterKeyUpAction(Urho.Key,System.Action{Urho.KeyUpEventArgs})">
            <summary>
            Registers a handler <paramref name="action"/> that will be invoked when the <paramref name="key"/> is released.
            </summary>
            <param name="key">The key this handler will respond to.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RemoveKeyUpAction(Urho.Key,System.Action{Urho.KeyUpEventArgs})">
            <summary>
            Removes the registered handler <paramref name="action"/> from the <paramref name="key"/> release event.
            </summary>
            <param name="key">The key the handler responded to.</param>
            <param name="action">The registered action.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RegisterKeyDownAction(Urho.Key,System.Action{Urho.KeyDownEventArgs})">
            <summary>
            Registers a handler <paramref name="action"/> that will be invoked when the <paramref name="key"/> is pressed.
            </summary>
            <param name="key">The key this handler will respond to.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RemoveKeyDownAction(Urho.Key,System.Action{Urho.KeyDownEventArgs})">
            <summary>
            Removes the registered handler <paramref name="action"/> from the <paramref name="key"/> pressed event.
            </summary>
            <param name="key">The key the handler responded to.</param>
            <param name="action">The registered action.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RegisterKeyRepeatAction(Urho.Key,System.Action{Urho.KeyDownEventArgs})">
            <summary>
            Registers a handler <paramref name="action"/> that will be invoked when the <paramref name="key"/> is held down.
            </summary>
            <param name="key">The key this handler will respond to.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.RemoveKeyRepeatAction(Urho.Key,System.Action{Urho.KeyDownEventArgs})">
            <summary>
            Removes the registered handler <paramref name="action"/> from the <paramref name="key"/> held down event.
            </summary>
            <param name="key">The key the handler responded to.</param>
            <param name="action">The registered action.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.Pause">
            <summary>
            Pauses the controlled level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.UnPause">
            <summary>
            Unpauses the controlled level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.EndLevelToEndScreen(System.Boolean)">
            <summary>
            Ends level and switches to the End level screen, displaying either victory or defeat
            based on <paramref name="victory"/> value.
            </summary>
            <param name="victory">If he level ended with player's victory.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.EndLevel">
            <summary>
            Stops level and releases all resources held by the level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.KeyDown(Urho.KeyDownEventArgs)">
            <summary>
            Handles game engine key down event and translates it to platform key pressed event handling.
            </summary>
            <param name="e">The data of the engine key down event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.KeyUp(Urho.KeyUpEventArgs)">
            <summary>
            Handles game engine key up event and translates it to platform key released event handling.
            </summary>
            <param name="e">The data of the engine key up event.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.MouseButtonDown(Urho.MouseButtonDownEventArgs)">
            <summary>
            Handles the engine mouse button down event and translates it to platform mouse button pressed event.
            </summary>
            <param name="e">The engine mouse button down data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.MouseButtonUp(Urho.MouseButtonUpEventArgs)">
            <summary>
            Handles the engine mouse button up event and translates it to platform mouse button released event.
            </summary>
            <param name="e">The engine mouse button up data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.MouseMoved(Urho.MouseMovedEventArgs)">
            <summary>
            Handles the engine mouse moved event and translates it to platform mouse moved event.
            </summary>
            <param name="e">The engine mouse button down data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.MouseWheel(Urho.MouseWheelEventArgs)">
            <summary>
            Handles the engine mouse wheel event and translates it to platform mouse wheel moved event.
            </summary>
            <param name="e">The engine mouse wheel data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.SwitchToPause(Urho.KeyDownEventArgs)">
            <summary>
            Pauses the level and switches to the pause screen.
            </summary>
            <param name="e">The key down event data this responds to.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.OnViewMoved(MHUrho.CameraMovement.CameraMovedEventArgs)">
            <summary>
            Resets the cached tile under cursor after the camera is moved.
            </summary>
            <param name="args">The camera moved event data.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.GetCursorRay">
            <summary>
            Gets a ray going from camera through cursor.
            </summary>
            <returns>A ray going from camera through cursor.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.IsBorder(Urho.IntVector2)">
            <summary>
            Returns if the <paramref name="screenPosition"/> is in a border area of the game window.
            </summary>
            <param name="screenPosition">The position on the screen to evaluate.</param>
            <returns>True if it is in a border area, false if it is not.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.GetBorders(Urho.IntVector2)">
            <summary>
            Gets all border areas the <paramref name="screenPosition"/> is inside.
            </summary>
            <param name="screenPosition">The position on the screen to evaluate.</param>
            <returns>All border areas the <paramref name="screenPosition"/> is inside.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeMouseMove(MHUrho.Input.MHUrhoMouseMovedEventArgs)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.MouseMove"/> event with the given <paramref name="args"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="args">The arguments to invoke the event with</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeMouseDown(Urho.MouseButtonDownEventArgs)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.MouseDown"/> event with the given <paramref name="args"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="args">The arguments to invoke the event with</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeMouseUp(Urho.MouseButtonUpEventArgs)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.MouseUp"/> event with the given <paramref name="args"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="args">The arguments to invoke the event with</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeMouseWheelMoved(Urho.MouseWheelEventArgs)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.MouseWheelMoved"/> event with the given <paramref name="args"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="args">The arguments to invoke the event with</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeEnteredScreenBorder(MHUrho.Input.MouseKeyboard.ScreenBorder)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.EnteredScreenBorder"/> event with the given <paramref name="border"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="border">The border that was entered.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeLeftScreenBorder(MHUrho.Input.MouseKeyboard.ScreenBorder)">
            <summary>
            Safely invokes the <see cref="E:MHUrho.Input.MouseKeyboard.GameController.LeftScreenBorder"/> event with the given <paramref name="border"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="border">The border that was left.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.GameController.InvokeKeyAction``1(System.Action{``0},``0)">
            <summary>
            Safely invokes the action from any of the mappings, with the given <paramref name="args"/>.
            Protects against plugin thrown exceptions.
            </summary>
            <param name="keyAction">The action to invoke.</param>
            <param name="args">The arguments to invoke the action with.</param>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.MenuController">
            <summary>
            Controls the input inside the menu screens.
            Provides a fasade around our UI subsystem.
            </summary>
        </member>
        <member name="P:MHUrho.Input.MouseKeyboard.MenuController.InputType">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Input.MouseKeyboard.MenuController.ScreenChanged">
            <summary>
            Invoked when we switch to different menu screen.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.MenuController.UIController">
            <summary>
            The UI controller.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.MenuController.app">
            <summary>
            The instance representing the current App.
            </summary>
        </member>
        <member name="F:MHUrho.Input.MouseKeyboard.MenuController.pausedLevelController">
            <summary>
            Controller controlling the currently paused level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.#ctor(MHUrho.MHUrhoApp)">
            <summary>
            Provides facade over the UI control
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.InitialSwitchToMainMenu(System.String,System.String)">
            <summary>
            Displays the initial main menu screen with possible warnings about the packages we were unable to load.
            </summary>
            <param name="loadingErrorTitle">The title of the error display.</param>
            <param name="loadingErrorDescription">The description of the loading error.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.SwitchToPauseMenu(MHUrho.Input.IGameController)">
            <summary>
            Dsiplays the pause menu for the level controlled by <paramref name="gameController"/>
            </summary>
            <param name="gameController">Game controller controlling the paused level.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.SwitchToEndScreen(System.Boolean)">
            <summary>
            Displays the end screen with the victory or defeat based on <paramref name="victory"/>.
            </summary>
            <param name="victory">If user was victorious or defeated.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.GetLevelLoaderForEditing(MHUrho.Packaging.LevelRep,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            If there is a paused running level, ends it and then creates a loader for loading <paramref name="level"/>
            for editing.
            Can send loading updates if given <paramref name="parentProgress"/>.
            Scales the percentage updates by <paramref name="subsectionSize"/>, to enable us and the parent to go from 0 to 100.
            </summary>
            <param name="level">The level to create the loader for.</param>
            <param name="parentProgress">The progress watcher for the parent.</param>
            <param name="subsectionSize">The precentage size of the level loading in the whole loading process.</param>
            <returns>A loader for the <paramref name="level"/> that can be used to load the <paramref name="level"/> for editing.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.GetLevelLoaderForPlaying(MHUrho.Packaging.LevelRep,MHUrho.Logic.PlayerSpecification,MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            If there is a paused running level, ends it and then creates a loader for loading <paramref name="level"/>
            for playing.
            Initializes players based on <paramref name="players"/>.
            Initializes level logic based on <paramref name="customSettings"/>.
            Can send loading updates if given <paramref name="parentProgress"/>.
            Scales the percentage updates by <paramref name="subsectionSize"/>, to enable us and the parent to go from 0 to 100.
            </summary>
            <param name="level">The level to create the loader for.</param>
            <param name="players">Data to use for player initialization.</param>
            <param name="customSettings">Settings to use for level logic plugin initialization.</param>
            <param name="parentProgress">The progress watcher for the parent.</param>
            <param name="subsectionSize">The precentage size of the level loading in the whole loading process.</param>
            <returns>A loader for the <paramref name="level"/> that can be used to load the <paramref name="level"/> for editing.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.ExecuteActionOnCurrentScreen(MHUrho.StartupManagement.MenuScreenAction)">
            <summary>
            Executes the given <paramref name="action"/> on the current screen.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.ResumePausedLevel">
            <summary>
            Resumes the currently paused level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.EndPausedLevel">
            <summary>
            Ends the currently paused level.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.SavePausedLevel(System.String)">
            <summary>
            Saves the currently paused level to file with the name <paramref name="fileName"/>.
            </summary>
            <param name="fileName">The name of the save file.</param>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.KeyUp(Urho.KeyUpEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.KeyDown(Urho.KeyDownEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.MouseButtonDown(Urho.MouseButtonDownEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.MouseButtonUp(Urho.MouseButtonUpEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.MouseMoved(Urho.MouseMovedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.MouseWheel(Urho.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MenuController.ClearUI">
            <summary>
            Clears the UI, hides all menu screens.
            </summary>
        </member>
        <member name="T:MHUrho.Input.MouseKeyboard.MouseKeyboardFactory">
            <summary>
            Implementation of the Abstract factory design pattern for abstraction of different input schemas.
            </summary>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MouseKeyboardFactory.CreateCameraController(MHUrho.Input.IGameController,MHUrho.CameraMovement.CameraMover)">
            <summary>
            Creates a controller for camera control using the mouse and keyboard.
            </summary>
            <param name="gameController">The platform input subsystem.</param>
            <param name="cameraMover">The camera movement directing component.</param>
            <returns>Controller that translates user input to camera movement.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MouseKeyboardFactory.CreateGameController(MHUrho.CameraMovement.CameraMover,MHUrho.Logic.ILevelManager,Urho.Octree,MHUrho.Logic.IPlayer)">
            <summary>
            Creates controller for a game level.
            </summary>
            <param name="cameraMover">The component used for directing camera movement.</param>
            <param name="levelManager">The manager of the controlled level.</param>
            <param name="octree">The engine component used for raycasting.</param>
            <param name="player">The player the user will be controlling in the begining.</param>
            <returns>A controller for the given level.</returns>
        </member>
        <member name="M:MHUrho.Input.MouseKeyboard.MouseKeyboardFactory.CreateMenuController(MHUrho.MHUrhoApp)">
            <summary>
            Creates a controller for menu.
            </summary>
            <param name="app">The application instance.</param>
            <returns>A controller for menu.</returns>
        </member>
        <member name="T:MHUrho.Logic.Building">
            <summary>
            Represents a building in the game.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.Building.Loader">
            <summary>
            Implements storing and loading buildings.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Building.Loader.Building">
            <summary>
            The building being loaded
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Building.Loader.loadingBuilding">
            <summary>
            The building being loaded.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Building.Loader.level">
            <summary>
            The level the building is being loaded into.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Building.Loader.storedBuilding">
            <summary>
            Used to store the reference to storedBuilding between Load and ConnectReferences calls
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Building.Loader.type">
            <summary>
            The type of the loading building.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Building.Loader.componentLoaders">
            <summary>
            Loaders of the default components saved on the building.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.#ctor(MHUrho.Logic.LevelManager,MHUrho.Storage.StBuilding)">
            <summary>
            Creates a loader for the <paramref name="storedBuilding"/> that loads it into
            the <paramref name="level"/>.
            </summary>
            <param name="level">The level the building is being loaded to.</param>
            <param name="storedBuilding">The saved building to load.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.CreateNew(System.Int32,Urho.IntVector2,Urho.Quaternion,MHUrho.Logic.BuildingType,MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            Builds the building at <paramref name="topLeftCorner"/> if it is possible.
            </summary>
            <param name="id">The identifier of the new building.</param>
            <param name="topLeftCorner">Position of the top left corner of the building in the game world.</param>
            <param name="rotation">Initial rotation of the building after it is built.</param>
            <param name="type">Type of the building.</param>
            <param name="player">Owner of the building.</param>
            <param name="level">The level the building is being built in.</param>
            <returns>Null if it is not possible to build the building there, new Building if it is possible</returns>
            <exception cref="T:MHUrho.Logic.CreationException">Thrown when there was an exception during building creation, like missing assets or error in the plugin.</exception>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.Save(MHUrho.Logic.Building)">
            <summary>
            Stores the <paramref name="building"/> in a <see cref="T:MHUrho.Storage.StBuilding"/> instance for serialization.
            </summary>
            <param name="building">The building to store.</param>
            <returns>Building stored in <see cref="T:MHUrho.Storage.StBuilding"/> ready for serialization.</returns>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.StartLoading">
            <summary>
            Executes the first step of loading process.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.ConnectReferences">
            <summary>
            Executes the second step of loading process, connecting stored references to
            other game entities.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.Loader.FinishLoading">
            <summary>
            Cleans up the data created only for loading.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Building.Rectangle">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.TopLeft">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.TopRight">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.BottomLeft">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.BottomRight">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Position">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Plugin">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Center">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.BuildingType">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Type">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Size">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Forward">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Backward">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Right">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Left">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Up">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Down">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.BuildingPlugin">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Building.Tiles">
            <inheritdoc/>
        </member>
        <member name="F:MHUrho.Logic.Building.tiles">
            <summary>
            Tiles that are covered by this building.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.#ctor(System.Int32,MHUrho.Logic.ILevelManager,Urho.IntRect,MHUrho.Logic.BuildingType,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new building in the game.
            </summary>
            <param name="id">Identifier of the new building.</param>
            <param name="level">The level to create the building in.</param>
            <param name="rectangle">Rectangle of the part of the map taken by this building.</param>
            <param name="type">Type of this building.</param>
            <param name="player">Owner of the new building.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.#ctor(System.Int32,MHUrho.Logic.ILevelManager,Urho.IntRect,MHUrho.Logic.BuildingType)">
            <summary>
            Constructor for loading instance.
            </summary>
            <param name="id">Identifier of the loaded building.</param>
            <param name="level">The level the building is loading into.</param>
            <param name="rectangle">Rectangle of the map taken by this building.</param>
            <param name="type">Type of this building.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.GetLoader(MHUrho.Logic.LevelManager,MHUrho.Storage.StBuilding)">
            <summary>
            Creates a loader to load the building stored in <paramref name="storedBuilding"/> to the <paramref name="level"/>.
            </summary>
            <param name="level">The level to load the building into.</param>
            <param name="storedBuilding">The stored building.</param>
            <returns>Loader to load the building.</returns>
        </member>
        <member name="M:MHUrho.Logic.Building.CreateNew(System.Int32,Urho.IntVector2,Urho.Quaternion,MHUrho.Logic.BuildingType,MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new building in the <paramref name="level"/>.
            </summary>
            <param name="id">The identifier of the new building.</param>
            <param name="topLeftCorner">The position of the top left corner of the building.</param>
            <param name="rotation">Rotation of the building after it is built.</param>
            <param name="type">The type of the building.</param>
            <param name="player">The owner of the building.</param>
            <param name="level">The level to create the building in.</param>
            <returns>New building.</returns>
            <exception cref="T:MHUrho.Logic.CreationException">Thrown when there was an unexpected exception during the creation of the building.</exception>
        </member>
        <member name="M:MHUrho.Logic.Building.Save">
            <summary>
            Stores the building in a <see cref="T:MHUrho.Storage.StBuilding"/> instance for serialization.
            </summary>
            <returns>Building stored in <see cref="T:MHUrho.Storage.StBuilding"/></returns>
        </member>
        <member name="M:MHUrho.Logic.Building.Accept(MHUrho.Logic.IEntityVisitor)">
            <summary>
            Implementation of the visitor design pattern.
            </summary>
            <param name="visitor">The visiting visitor.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.Accept``1(MHUrho.Logic.IEntityVisitor{``0})">
            <summary>
            Implementation of the generic visitor design pattern.
            </summary>
            <param name="visitor">The visiting visitor.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.RemoveFromLevel">
            <summary>
            Removes the building from the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.HitBy(MHUrho.Logic.IEntity,System.Object)">
            <summary>
            Inform the building that it was hit by <paramref name="other"/> entity,
            provide <paramref name="userData"/> for plugin.
            </summary>
            <param name="other">The entity that hit this building.</param>
            <param name="userData">User data for plugin.</param>
        </member>
        <member name="M:MHUrho.Logic.Building.GetHeightAt(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Building.CanChangeTileHeight(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Building.TileHeightChanged(MHUrho.Logic.ITile)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Building.ChangeHeight(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Building.GetFormationController(Urho.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Building.System#IDisposable#Dispose">
            <summary>
            Removes the building from level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Building.OnUpdate(System.Single)">
            <summary>
            Handles the scene update.
            </summary>
            <param name="timeStep">The time elapsed since the last update.</param>
        </member>
        <member name="T:MHUrho.Logic.BuildingType">
            <summary>
            Represents a type of buildings defined in a package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.ID">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.Name">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.Package">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.Assets">
            <summary>
            The assets of this building type that will be added to
            every instance of this type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.IconRectangle">
            <summary>
            Part of the <see cref="P:MHUrho.Packaging.GamePack.BuildingIconTexture"/> representing this building type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.Size">
            <summary>
            Size of buildings of this type, in number of tiles.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.Plugin">
            <summary>
            The type plugin of this building type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.BuildingType.MHUrho#Logic#IEntityType#Plugin">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.#ctor">
            <summary>
            Data has to be loaded after constructor by <see cref="!:Load(XElement, int, GamePack)"/>
            It is done this way to allow cyclic references during the Load method, so anything 
            that references this buildingType back can get the reference during the loading of this instance
            </summary>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.#ctor(System.Int32,System.String,MHUrho.Packaging.GamePack,MHUrho.Packaging.AssetContainer,Urho.IntRect,Urho.IntVector2,MHUrho.Plugins.BuildingTypePlugin)">
            <summary>
            This constructor enables creation of mock instances, that are not loaded from package and have other uses.
            </summary>
            <param name="id">Identifier of the building type.</param>
            <param name="name">Name of the building type.</param>
            <param name="package">The package the building type is loaded from.</param>
            <param name="assets">The assets added to every instance of building of this type.</param>
            <param name="iconRectangle">Part of the <see cref="P:MHUrho.Packaging.GamePack.BuildingIconTexture"/> representing this type.</param>
            <param name="size">Size of the buildings of this type in number of tiles.</param>
            <param name="plugin">Type plugin of this building type.</param>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads building type from the given <paramref name="xml"/> element.
            Expects that the <paramref name="xml"/> is validated against the <see cref="F:MHUrho.Packaging.PackageManager.schemas"/>.
            </summary>
            <param name="xml">The XML element to load the building from.</param>
            <param name="package">The package this Xml element is from.</param>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.Equals(System.Object)">
            <summary>
            Compares building types for equality.
            </summary>
            <param name="obj">Other object.</param>
            <returns>True if the <paramref name="obj"/> is the same building type, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.GetHashCode">
            <summary>
            Returns hashcode of this building type.
            </summary>
            <returns>Returns hashcode of this building type.</returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.ClearCache">
            <summary>
            Clears any cache state dependent on the current level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.BuildNewBuilding(System.Int32,MHUrho.Logic.ILevelManager,Urho.IntVector2,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new building of this type.
            </summary>
            <param name="buildingID">The ID of the new building.</param>
            <param name="level">The level the building is created in.</param>
            <param name="topLeft">Position of the top left corner of the building.</param>
            <param name="initRotation">Initial rotation of the building.</param>
            <param name="player">Owner of the building.</param>
            <returns>Newly created building, or null if building cannot be created for some reason.</returns>
            <exception cref="T:MHUrho.Logic.CreationException">Thrown when there was an unexpected exception during the creation of the building.</exception>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.CanBuild(Urho.IntVector2,MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            Returns if this type of buildings can be built at <paramref name="topLeft"/> by the <paramref name="owner"/> in the
            <paramref name="level"/>.
            </summary>
            <param name="topLeft">The position of the building.</param>
            <param name="owner">Owner of the building.</param>
            <param name="level">Level to build the building in.</param>
            <returns>True if it can be built, false if it cannot.</returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.GetNewInstancePlugin(MHUrho.Logic.IBuilding,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates an instance plugin for a new building <paramref name="building"/>.
            </summary>
            <param name="building">The new building to get the instance plugin for.</param>
            <param name="level">The level the building is in.</param>
            <returns>New instance of instance plugin to be used to control the <paramref name="building"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.GetInstancePluginForLoading(MHUrho.Logic.IBuilding,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates an instance plugin for a loading building <paramref name="building"/>.
            </summary>
            <param name="building">The loading building to get the instance plugin for.</param>
            <param name="level">The level the building is loading into.</param>
            <returns>New instance of instance plugin to be used to control the <paramref name="building"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.GetBuildingTilesRectangle(Urho.IntVector2)">
            <summary>
            Gets the rectangle taken up by the building if placed with top left corner at <paramref name="topLeft"/>.
            </summary>
            <param name="topLeft">The position of the top left corner of the building.</param>
            <returns>Rectangle taken up by the building placed with it's top left corner at <paramref name="topLeft"/>. </returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.GetBottomRightTileIndex(Urho.IntVector2)">
            <summary>
            Gets the position of the bottom right corner if placed with top left corner at <paramref name="topLeft"/>.
            </summary>
            <param name="topLeft">The position of the top left corner of the building.</param>
            <returns>The position of the bottom right corner of a building of this type placed with it's top left corner at <paramref name="topLeft"/>. </returns>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.Dispose">
            <summary>
            Releases all resources.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.BuildingType.LoadError(System.String,System.Exception)">
            <summary>
            Logs message and throws a <see cref="T:MHUrho.Packaging.PackageLoadingException"/>
            </summary>
            <param name="message">Message to log and propagate via exception</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Always throws this exception</exception>
        </member>
        <member name="T:MHUrho.Logic.CollisionLayer">
            <summary>
            Which entities will the collider collide with.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.CreationException">
            <summary>
            Thrown when a creation of a new entity fails with unexpected exception.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.Entity">
            <summary>
            Base class for entities in the game
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Entity.ID">
            <inheritdoc />
            <summary>
            ID of this entity
            Hides component member ID, but having two IDs would be more confusing.
            If you need component ID, just cast this to component and access ID
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Entity.Player">
            <inheritdoc />
            <summary>
            Player owning this entity
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Entity.Level">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Position">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.XZPosition">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Type">
            <summary>
            Type of this entity, loaded from package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Entity.Forward">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Backward">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Right">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Left">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Up">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Down">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.Plugin">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.Entity.IsRemovedFromLevel">
            <inheritdoc/>
        </member>
        <member name="E:MHUrho.Logic.Entity.PositionChanged">
            <inheritdoc/>
        </member>
        <member name="E:MHUrho.Logic.Entity.RotationChanged">
            <inheritdoc/>
        </member>
        <member name="E:MHUrho.Logic.Entity.OnRemoval">
            <inheritdoc/>
        </member>
        <member name="F:MHUrho.Logic.Entity.defaultComponents">
            <summary>
            Default components present on this entity, split up by their types for faster search. 
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Entity.#ctor(System.Int32,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new entity in the game.
            </summary>
            <param name="ID">Identifier of the entity.</param>
            <param name="level">Level in which the entity is created.</param>
        </member>
        <member name="M:MHUrho.Logic.Entity.Accept(MHUrho.Logic.IEntityVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.Accept``1(MHUrho.Logic.IEntityVisitor{``0})">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.CreateComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.MHUrho#Logic#IEntity#GetComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.GetComponents``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.GetDefaultComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.HasDefaultComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.GetDefaultComponents``1">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.AddComponent(MHUrho.DefaultComponents.DefaultComponent)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.RemoveComponent(MHUrho.DefaultComponents.DefaultComponent)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.RemoveFromLevel">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.HitBy(MHUrho.Logic.IEntity,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.Entity.SignalPositionChanged">
            <summary>
            Invokes the <see cref="E:MHUrho.Logic.Entity.PositionChanged"/> event.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Entity.SignalRotationChanged">
            <summary>
            Invokes the <see cref="E:MHUrho.Logic.Entity.RotationChanged"/> event.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.FatalRuntimeException">
            <summary>
            An exception representing unrecoverable runtime error.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IBuilding">
            <summary>
            Building in the level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.BuildingType">
            <summary>
            Type of the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.BuildingPlugin">
            <summary>
            The instance plugin of the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.Rectangle">
            <summary>
            The area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.TopLeft">
            <summary>
            Top left (min x, min z) corner of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.TopRight">
            <summary>
            Top right (max x, min z) corner of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.BottomLeft">
            <summary>
            Bottom left (min x, max z) corner of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.BottomRight">
            <summary>
            Bottom right (max x, max z) corner of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.Center">
            <summary>
            Center of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.Size">
            <summary>
            Size of the area taken up by the building.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuilding.Tiles">
            <summary>
            List of tiles taken up by the building.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.Save">
            <summary>
            Serializes the current state of the building into an instance of <see cref="T:MHUrho.Storage.StBuilding"/>.
            </summary>
            <returns>Serialized current state of the building.</returns>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.GetHeightAt(System.Single,System.Single)">
            <summary>
            Returns height at the [<paramref name="x"/>, <paramref name="y"/>] position or null if it is the same as terrain height.
            </summary>
            <param name="x">The x coord of the point.</param>
            <param name="y">The z coord of the point.</param>
            <returns>The height at the [<paramref name="x"/>, <paramref name="y"/>] point or null if it is the same as terrain height.</returns>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.CanChangeTileHeight(System.Int32,System.Int32)">
            <summary>
            Checks if it is possible to change the height of the tile with a corner at the [<paramref name="x"/>, <paramref name="y"/>] coords.
            </summary>
            <param name="x">The x coord of the corner to be changed.</param>
            <param name="y">The z coord of the corner to be changed.</param>
            <returns>True if it is possible to change the height, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.TileHeightChanged(MHUrho.Logic.ITile)">
            <summary>
            Notifies the building that the height of the tile it occupies has changed.
            </summary>
            <param name="tile">The tile with the changed height.</param>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.ChangeHeight(System.Single)">
            <summary>
            Changes the height of the building.
            </summary>
            <param name="newHeight">The new height of the building.</param>
        </member>
        <member name="M:MHUrho.Logic.IBuilding.GetFormationController(Urho.Vector3)">
            <summary>
            Gets the formation controller to direct the positioning of the units around the <paramref name="centerPosition"/>.
            </summary>
            <param name="centerPosition">The central position around which the units should be ordered.</param>
            <returns>The formation controller to direct the positioning of the units.</returns>
        </member>
        <member name="T:MHUrho.Logic.IEntity">
            <summary>
            Common ancestor of all entities in game, namely Units, Buildings and Projectiles
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.ID">
            <summary>
            Entity ID, used for getting reference to entity from Level by
            <see cref="M:MHUrho.Logic.ILevelManager.GetEntity(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Node">
            <summary>
            UrhoSharp <see cref="P:MHUrho.Logic.IEntity.Node"/> the entity is represented by.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Level">
            <summary>
            Level containing the entity.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Type">
            <summary>
            Type of the entity.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Player">
            <summary>
            Get player that owns this entity
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Position">
            <summary>
            Get current position of the center of the entity
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.XZPosition">
            <summary>
            Entity position projected into XZ plane.
            Is a shortcut for the X and Z members of 
            <see cref="P:MHUrho.Logic.IEntity.Position"/>.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Up">
            <summary>
            Vector in world coordinates indicating the upwards direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Down">
            <summary>
            Vector in world coordinates indicating the downwards direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Forward">
            <summary>
            Vector in world coordinates indicating the forward direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Backward">
            <summary>
            Get vector in world coordinates indicating the backwards direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Left">
            <summary>
            Vector in world coordinates indicating the left direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Right">
            <summary>
            Vector in world coordinates indicating the right direction in reference to current entity orientation.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.Plugin">
            <summary>
            User plugin of this entity.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntity.IsRemovedFromLevel">
            <summary>
            If the entity was removed from level and should not be used.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.IEntity.OnRemoval">
            <summary>
            Cleanup actions, called on entity removal.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.IEntity.PositionChanged">
            <summary>
            Triggered on every change in <see cref="P:MHUrho.Logic.IEntity.Position"/>.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.IEntity.RotationChanged">
            <summary>
            Triggered on every change in <see cref="!:Rotation"/>.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IEntity.AddComponent(MHUrho.DefaultComponents.DefaultComponent)">
            <summary>
            Adds one of the classes derived from <see cref="T:MHUrho.DefaultComponents.DefaultComponent"/>. See <see cref="N:MHUrho.DefaultComponents"/>
            </summary>
            <param name="defaultComponent">the component to be added, should not be null</param>
        </member>
        <member name="M:MHUrho.Logic.IEntity.CreateComponent``1">
            <summary>
            Creates any <see cref="T:Urho.Component"/> that can be created with <see cref="M:Urho.Node.CreateComponent``1(Urho.CreateMode,System.UInt32)"/> and its overloads.
            Mainly for creating components provided by the engine itself, contained in <see cref="N:Urho"/> namespace.
            </summary>
            <typeparam name="T">Component from <see cref="N:Urho"/> namespace.</typeparam>
            <returns>Reference to the newly created component.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.GetComponent``1">
            <summary>
            Gets the first component of type <typeparamref name="T"/> or derived from it present on this entity.
            This method is provided for getting the Urho3D basic components from entity.
            For getting <see cref="T:MHUrho.DefaultComponents.DefaultComponent"/> and derived, use <see cref="M:MHUrho.Logic.IEntity.GetDefaultComponent``1"/>.
            O(n) time complexity.
            </summary>
            <typeparam name="T">Any class derived from <see cref="T:Urho.Component"/>.</typeparam>
            <returns>First component of type <typeparamref name="T"/> or derived from it that are present on this entity.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.GetComponents``1">
            <summary>
            Gets every component of type <typeparamref name="T"/> or derived from it present on this entity.
            This method is provided for getting the Urho3D basic components from entity.
            For getting <see cref="T:MHUrho.DefaultComponents.DefaultComponent"/> and derived, use <see cref="M:MHUrho.Logic.IEntity.GetDefaultComponents``1"/>.
            O(n) time complexity.
            </summary>
            <typeparam name="T">Any class derived from <see cref="T:Urho.Component"/>.</typeparam>
            <returns>All components of type <typeparamref name="T"/> or derived from it that are present on this entity.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.GetDefaultComponent``1">
            <summary>
            Get the first component of type <typeparamref name="T"/> or derived from it present on this entity
            O(1) time complexity compared to <see cref="M:Urho.Node.GetComponent``1(System.Boolean)"/> and <see cref="M:Urho.Component.GetComponent``1"/>
            which are O(n) time complexity where n is the number of components.
            </summary>
            <typeparam name="T">One of the components defined in namespace <see cref="N:MHUrho.DefaultComponents"/>.</typeparam>
            <returns>First component of type <typeparamref name="T"/> or derived from it present on this entity, or null if not present.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.GetDefaultComponents``1">
            <summary>
            Get an enumerable of all components of type <typeparamref name="T"/> or derived from it present on this entity.
            O(1) time complexity compared to <see cref="M:Urho.Node.GetComponent``1(System.Boolean)"/> and <see cref="M:Urho.Component.GetComponent``1"/> which are O(n) in the total number of components.
            </summary>
            <typeparam name="T">One of the components defined in namespace <see cref="N:MHUrho.DefaultComponents"/>.</typeparam>
            <returns>Enumerable with all components of type <typeparamref name="T"/> or derived from it.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.HasDefaultComponent``1">
            <summary>
            Checks if there is a components of type <typeparamref name="T"/> or derived from it present on this entity.
            O(1) time complexity.
            </summary>
            <typeparam name="T">One of the components defined in namespace <see cref="N:MHUrho.DefaultComponents"/>.</typeparam>
            <returns>True if there is a component of type <typeparamref name="T"/> or derived from it, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.RemoveComponent(MHUrho.DefaultComponents.DefaultComponent)">
            <summary>
            Removes the provided instance of <see cref="T:MHUrho.DefaultComponents.DefaultComponent"/> from this entity if this instance is present on the entity.
            </summary>
            <param name="defaultComponent">The component instance to remove.</param>
            <returns>True if the <paramref name="defaultComponent"/> was present on this entity and was removed, false if not.</returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.RemoveFromLevel">
            <summary>
            Removes the entity from the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IEntity.Accept(MHUrho.Logic.IEntityVisitor)">
            <summary>
            Accept method for visitor pattern.
            </summary>
            <param name="visitor">Visitor to visit.</param>
        </member>
        <member name="M:MHUrho.Logic.IEntity.Accept``1(MHUrho.Logic.IEntityVisitor{``0})">
            <summary>
            Accept method for generic visitor pattern.
            </summary>
            <typeparam name="T">The type that will be returned by visitor.</typeparam>
            <param name="visitor">Visitor to visit.</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Logic.IEntity.HitBy(MHUrho.Logic.IEntity,System.Object)">
             <summary>
             Signals to this entity that it was hit by the <paramref name="other"/> entity.
            
             If <paramref name="other"/> is a Projectile, it was a range hit, if it is other, it was meele hit.
             </summary>
             <param name="other">The entity that hit this entity.</param>
             <param name="userData">User defined data to be sent to the the plugin.</param>
        </member>
        <member name="T:MHUrho.Logic.IEntityType">
            <summary>
            Represents type of entities loaded from package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IEntityType.Plugin">
            <summary>
            The type plugin of this entity type.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IEntityVisitor">
            <summary>
            Implementation of the Visitor design patter.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IEntityVisitor`1">
            <summary>
            Implementation of the generic Visitor design patter.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.ILevelManager">
            <summary>
            Running game level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.LevelRep">
            <summary>
            The instance representing the level when user is picking levels.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.App">
            <summary>
            The current application.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Map">
            <summary>
            Game world map.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Minimap">
            <summary>
            UI minimap.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Scene">
            <summary>
            The scene graph of this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.LevelNode">
            <summary>
            The root of this level's part of the scene graph.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.PackageManager">
            <summary>
            PackageManager of this application.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Package">
            <summary>
            The package this level belongs to.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.EditorMode">
            <summary>
            If the level is loaded for editing.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.IsEnding">
            <summary>
            If the <see cref="M:MHUrho.Logic.ILevelManager.End"/> was called and we are currently cleaning up.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Units">
            <summary>
            Units present in this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Players">
            <summary>
            Players present in this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Buildings">
            <summary>
            Buildings present in this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Input">
            <summary>
            Input subsystem for this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.UIManager">
            <summary>
            UI subsystem for this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Camera">
            <summary>
            Camera control for this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.ToolManager">
            <summary>
            Tool control for this level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.NeutralPlayer">
            <summary>
            Neutral player, the player that owns and controls the units and buildings making up the level scenery.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.HumanPlayer">
            <summary>
            Player instance representing the user.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelManager.Plugin">
            <summary>
            Logic plugin for the level.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.ILevelManager.Update">
            <summary>
            Invoked on each scene update.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.ILevelManager.Ending">
            <summary>
            Invoked when level is ending.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.Save">
            <summary>
            Stores the current level into a StLevel object.
            </summary>
            <returns>Stored level</returns>
            <exception cref="T:MHUrho.Logic.SavingException">Thrown when the saving of the level fails</exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.SaveTo(System.IO.Stream,System.Boolean)">
            <summary>
            Stores the current level into <see cref="T:MHUrho.Storage.StLevel"/> and writes it into the provided <paramref name="stream"/>.
            If <paramref name="leaveOpen"/> is true, leaves the <paramref name="stream"/> open, otherwise closes it after writing.
            </summary>
            <param name="stream">The stream to write the serialized level into.</param>
            <param name="leaveOpen">If we should leave the stream open after the writing or close it.</param>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.SpawnUnit(MHUrho.Logic.UnitType,MHUrho.Logic.ITile,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <summary>
            Spawns new unit of given <paramref name="unitType"/> into the world map at <paramref name="tile"/>.
            </summary>
            <param name="unitType">The unit to be added.</param>
            <param name="tile">Tile to spawn the unit at.</param>
            <param name="initRotation">Initial rotation of the spawned unit.</param>
            <param name="player">owner of the new unit.</param>
            <returns>The new unit if a unit was spawned, or null if no unit was spawned.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.BuildBuilding(MHUrho.Logic.BuildingType,Urho.IntVector2,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new building in the world.
            </summary>
            <param name="buildingType">Type of the new building.</param>
            <param name="topLeft">Coordinates of the top leftmost tile the building will occupy.</param>
            <param name="initRotation">Initial rotation of the building when it is create.d</param>
            <param name="player">Owner of the building.</param>
            <returns>The new building if it was built, or null if the building could not be built.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.SpawnProjectile(MHUrho.Logic.ProjectileType,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.IPlayer,MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Creates new projectile in the game world.
            </summary>
            <param name="projectileType">The type of the new projectile.</param>
            <param name="position">The initial position of the new projectile.</param>
            <param name="initRotation">The initial rotation of the new projectile.</param>
            <param name="player">The player owning the new projectile.</param>
            <param name="target">The target the new projectile is shooting at.</param>
            <returns>The instance of the new projectile if we were able to create it, null otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.SpawnProjectile(MHUrho.Logic.ProjectileType,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.IPlayer,Urho.Vector3)">
            <summary>
            Creates new projectile in the game world.
            </summary>
            <param name="projectileType">The type of the new projectile.</param>
            <param name="position">The initial position of the new projectile.</param>
            <param name="initRotation">The initial rotation of the new projectile.</param>
            <param name="player">The player owning the new projectile.</param>
            <param name="movement">The initial movement of the projectile.</param>
            <returns>The instance of the new projectile if we were able to create it, null otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.RemoveUnit(MHUrho.Logic.IUnit)">
            <summary>
            Removes <paramref name="unit"/> from the level if it is present.
            </summary>
            <param name="unit">The unit to remove.</param>
            <returns>True if the <paramref name="unit"/> was removed from the level, false if there was no such unit in this level.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Removes <paramref name="building"/> from the level if it is present.
            </summary>
            <param name="building">The building to remove.</param>
            <returns>True if the <paramref name="building"/> was removed from the level, false if there was no such building in this level.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.RemoveProjectile(MHUrho.Logic.IProjectile)">
            <summary>
            Removes <paramref name="projectile"/> from the level if it is present.
            </summary>
            <param name="projectile">The projectile to remove.</param>
            <returns>True if the <paramref name="projectile"/> was removed from the level, false if there was no such projectile in this level.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.RemovePlayer(MHUrho.Logic.IPlayer)">
            <summary>
            Removes <paramref name="player"/> from the level if it is present.
            </summary>
            <param name="player">The projectile to remove.</param>
            <returns>True if the <paramref name="player"/> was removed from the level, false if there was no such player in this level.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetUnit(System.Int32)">
            <summary>
            Returns the unit with ID equal <paramref name="ID"/>.
            Throws an exception if there is no unit with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">The id of the unit to retrieve.</param>
            <returns>The unit with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no unit with the given <paramref name="ID"/></exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetUnit(Urho.Node)">
            <summary>
            Returns the unit that is represented by the <paramref name="node"/> or one of its predecessors or one of its predecessors in the scene graph.
            Throws an exception if the node does not represent a unit.
            </summary>
            <param name="node">The node that is representing the unit in the scene graph.</param>
            <returns>The unit that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetUnit(System.Int32,MHUrho.Logic.IUnit@)">
            <summary>
            Tries to get the unit with ID equal <paramref name="ID"/>.
            If there is a unit with the given <paramref name="ID"/>, returns true and sets <paramref name="unit"/> to reference that unit.
            If there is not a unit with the given <paramref name="ID"/>, returns false and sets the <paramref name="unit"/> to null.
            </summary>
            <param name="ID">The ID of the unit to retrieve.</param>
            <param name="unit">The unit with the given <paramref name="ID"/>, or null if no such unit exists.</param>
            <returns>True if a unit with the given <paramref name="ID"/> exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetUnit(Urho.Node,MHUrho.Logic.IUnit@)">
            <summary>
            Tries to get the unit represented by the given <paramref name="node"/> or one of its predecessors in the scene graph.
            If there is a unit represented by the given <paramref name="node"/> or one of its predecessors, returns true and sets <paramref name="unit"/> to reference that unit.
            If there is not a unit represented by the given <paramref name="node"/> or one of its predecessors, returns false and sets the <paramref name="unit"/> to null.
            </summary>
            <param name="node">The node possibly representing the unit in the scene graph.</param>
            <param name="unit">The unit represented by the given <paramref name="node"/> or one of its predecessors, or null if no such unit exists.</param>
            <returns>True if a unit represented by the given <paramref name="node"/> or one of its predecessors exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetBuilding(System.Int32)">
            <summary>
            Returns the building with ID equal <paramref name="ID"/>.
            Throws an exception if there is no building with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">The id of the building to retrieve.</param>
            <returns>The building with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no building with the given <paramref name="ID"/></exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetBuilding(Urho.Node)">
            <summary>
            Returns the building that is represented by the <paramref name="node"/> or one of its predecessors or one of its predecessors in the scene graph.
            Throws an exception if the node does not represent a building.
            </summary>
            <param name="node">The node that is representing the building in the scene graph.</param>
            <returns>The building that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetBuilding(System.Int32,MHUrho.Logic.IBuilding@)">
            <summary>
            Tries to get the building with ID equal <paramref name="ID"/>.
            If there is a building with the given <paramref name="ID"/>, returns true and sets <paramref name="building"/> to reference that building.
            If there is not a building with the given <paramref name="ID"/>, returns false and sets the <paramref name="building"/> to null.
            </summary>
            <param name="ID">The ID of the building to retrieve.</param>
            <param name="building">The building with the given <paramref name="ID"/>, or null if no such building exists.</param>
            <returns>True if a building with the given <paramref name="ID"/> exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetBuilding(Urho.Node,MHUrho.Logic.IBuilding@)">
            <summary>
            Tries to get the building represented by the given <paramref name="node"/> or one of its predecessors in the scene graph.
            If there is a building represented by the given <paramref name="node"/> or one of its predecessors, returns true and sets <paramref name="building"/> to reference that building.
            If there is not a building represented by the given <paramref name="node"/> or one of its predecessors, returns false and sets the <paramref name="building"/> to null.
            </summary>
            <param name="node">The node possibly representing the building in the scene graph.</param>
            <param name="building">The building represented by the given <paramref name="node"/> or one of its predecessors, or null if no such building exists.</param>
            <returns>True if a building represented by the given <paramref name="node"/> or one of its predecessors exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetPlayer(System.Int32)">
            <summary>
            Returns the player with ID equal <paramref name="ID"/>.
            Throws an exception if there is no player with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">The id of the player to retrieve.</param>
            <returns>The player with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no player with the given <paramref name="ID"/></exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetPlayer(System.Int32,MHUrho.Logic.IPlayer@)">
            <summary>
            Tries to get the player with ID equal <paramref name="ID"/>.
            If there is a player with the given <paramref name="ID"/>, returns true and sets <paramref name="player"/> to reference that player.
            If there is not a player with the given <paramref name="ID"/>, returns false and sets the <paramref name="player"/> to null.
            </summary>
            <param name="ID">The ID of the player to retrieve.</param>
            <param name="player">The player with the given <paramref name="ID"/>, or null if no such player exists.</param>
            <returns>True if a player with the given <paramref name="ID"/> exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetProjectile(System.Int32)">
            <summary>
            Returns the projectile with ID equal <paramref name="ID"/>.
            Throws an exception if there is no projectile with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">The id of the projectile to retrieve.</param>
            <returns>The projectile with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no projectile with the given <paramref name="ID"/></exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetProjectile(Urho.Node)">
            <summary>
            Returns the projectile that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.
            Throws an exception if the node does not represent a projectile.
            </summary>
            <param name="node">The node that is representing the projectile in the scene graph.</param>
            <returns>The projectile that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetProjectile(System.Int32,MHUrho.Logic.IProjectile@)">
            <summary>
            Tries to get the projectile with ID equal <paramref name="ID"/>.
            If there is a projectile with the given <paramref name="ID"/>, returns true and sets <paramref name="projectile"/> to reference that projectile.
            If there is not a projectile with the given <paramref name="ID"/>, returns false and sets the <paramref name="projectile"/> to null.
            </summary>
            <param name="ID">The ID of the projectile to retrieve.</param>
            <param name="projectile">The projectile with the given <paramref name="ID"/>, or null if no such projectile exists.</param>
            <returns>True if a projectile with the given <paramref name="ID"/> exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetProjectile(Urho.Node,MHUrho.Logic.IProjectile@)">
            <summary>
            Tries to get the projectile represented by the given <paramref name="node"/> or one of its predecessors in the scene graph.
            If there is a projectile represented by the given <paramref name="node"/> or one of its predecessors, returns true and sets <paramref name="projectile"/> to reference that projectile.
            If there is not a projectile represented by the given <paramref name="node"/> or one of its predecessors, returns false and sets the <paramref name="projectile"/> to null.
            </summary>
            <param name="node">The node possibly representing the projectile in the scene graph.</param>
            <param name="projectile">The projectile represented by the given <paramref name="node"/> or one of its predecessors, or null if no such projectile exists.</param>
            <returns>True if a projectile represented by the given <paramref name="node"/> or one of its predecessors exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetEntity(System.Int32)">
            <summary>
            Returns the entity with ID equal <paramref name="ID"/>.
            Throws an exception if there is no entity with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">The id of the entity to retrieve.</param>
            <returns>The entity with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there is no entity with the given <paramref name="ID"/></exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetEntity(Urho.Node)">
            <summary>
            Returns the entity that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.
            Throws an exception if the node does not represent a entity.
            </summary>
            <param name="node">The node that is representing the entity in the scene graph.</param>
            <returns>The entity that is represented by the <paramref name="node"/> or one of its predecessors in the scene graph.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetEntity(System.Int32,MHUrho.Logic.IEntity@)">
            <summary>
            Tries to get an entity (unit, building or projectile) with ID equal <paramref name="ID"/>.
            If there is an entity with the given <paramref name="ID"/>, returns true and sets <paramref name="entity"/> to reference that entity.
            If there is not an entity with the given <paramref name="ID"/>, returns false and sets the <paramref name="entity"/> to null.
            </summary>
            <param name="ID">The ID of the entity to retrieve.</param>
            <param name="entity">The entity with the given <paramref name="ID"/>, or null if no such entity exists.</param>
            <returns>True if a entity with the given <paramref name="ID"/> exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.TryGetEntity(Urho.Node,MHUrho.Logic.IEntity@)">
            <summary>
            Tries to get the entity represented by the given <paramref name="node"/> or one of its predecessors in the scene graph.
            If there is an entity represented by the given <paramref name="node"/> or one of its predecessors, returns true and sets <paramref name="entity"/> to reference that entity.
            If there is not an entity represented by the given <paramref name="node"/> or one of its predecessors, returns false and sets the <paramref name="entity"/> to null.
            </summary>
            <param name="node">The node possibly representing the entity in the scene graph.</param>
            <param name="entity">The entity represented by the given <paramref name="node"/> or one of its predecessors, or null if no such entity exists.</param>
            <returns>True if an entity represented by the given <paramref name="node"/> or one of its predecessors exists, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.GetRangeTarget(System.Int32)">
            <summary>
            Gets the range target with an ID equal to <paramref name="ID"/>.
            If no such range target exists, throws an exception.
            </summary>
            <param name="ID">The ID of the wanted target.</param>
            <returns>The target with the given <paramref name="ID"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when there does is no target with the given <paramref name="ID"/>.</exception>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.RegisterRangeTarget(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Registers <paramref name="rangeTarget"/> to rangeTargets, assigns it a new ID and returns this new ID
            </summary>
            <param name="rangeTarget">Range target to register.</param>
            <returns>The new ID of the registered target.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.UnRegisterRangeTarget(System.Int32)">
            <summary>
            Removes the target with <paramref name="ID"/> from the set of registered targets.
            Returns true if target was removed, false if there was no such target.
            </summary>
            <param name="ID">The ID of the target to remove.</param>
            <returns>True if the target was remove, false if there was no target with the given <paramref name="ID"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.CanSee(Urho.Vector3,MHUrho.Logic.IEntity,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Casts a ray between <paramref name="source"/> and the <paramref name="target"/>. This ray is blocked by
            graphical graphical models of the map, buildings and/or units if the respective <paramref name="mapBlocks"/>, <paramref name="buildingsBlock"/>
            and <paramref name="unitsBlock"/> is true.
            </summary>
            <param name="source">The position of the observer.</param>
            <param name="target">The thing the observer is trying to see.</param>
            <param name="mapBlocks">If the map graphical representation blocks the observer.</param>
            <param name="buildingsBlock">If graphical representation of buildings blocks the observer.</param>
            <param name="unitsBlock">If graphical representation of units blocks the observer.</param>
            <returns>If observer positioned at <paramref name="source"/> can see the <paramref name="target"/> while being blocked by
            <paramref name="mapBlocks"/>, <paramref name="buildingsBlock"/> and <paramref name="unitsBlock"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.Pause">
            <summary>
            Stops the scene updates in the scene graph. This stops logic and drawing alike.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.UnPause">
            <summary>
             Starts the scene updates in the scene graph again. This starts logic and drawing updates.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.End">
            <summary>
            Stops the level and releases all resources held by the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILevelManager.ChangeRep(MHUrho.Packaging.LevelRep)">
            <summary>
            Changes the instance representing this level to the user to <paramref name="newLevelRep"/>.
            </summary>
            <param name="newLevelRep">The new instance representing this level to the user.</param>
        </member>
        <member name="T:MHUrho.Logic.IPlayer">
            <summary>
            Player in the current level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.ID">
            <summary>
            Unique identifier of the player inside the level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.TeamID">
            <summary>
            Unique identifier of the players team.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.Insignia">
            <summary>
            The graphical representation of the player added to units.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.Level">
            <summary>
            The level this player is part of.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.Plugin">
            <summary>
            Plugin of the player.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.PlayerType">
            <summary>
            Type of the player as loaded from the package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.IsRemovedFromLevel">
            <summary>
            If the player has been removed from level
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayer.Resources">
            <summary>
            All resources owned by the player and their amounts.
            </summary>
        </member>
        <member name="E:MHUrho.Logic.IPlayer.OnRemoval">
            <summary>
            Invoked on player removal from level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.Save">
            <summary>
            Serializes current state of the player into an instance of <see cref="T:MHUrho.Storage.StPlayer"/>.
            </summary>
            <returns>Serialized current state.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.RemoveFromLevel">
            <summary>
            Removes the player and all that he owns from the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetAllUnits">
            <summary>
            Gets all units that belong to this player.
            </summary>
            <returns>All units that belong to this player.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetUnitsOfType(MHUrho.Logic.UnitType)">
            <summary>
            Gets all units of type <paramref name="unitType"/> that belong to this player.
            </summary>
            <param name="unitType">The type of the units to retrieve.</param>
            <returns>All units of type <paramref name="unitType"/> that belong to this player</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetAllBuildings">
            <summary>
            Gets all building that belong to this player.
            </summary>
            <returns>All buildings that belong to this player.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetBuildingsOfType(MHUrho.Logic.BuildingType)">
            <summary>
            Gets all buildings of type <paramref name="buildingType"/> that belong to this player.
            </summary>
            <param name="buildingType">The type of the buildings to retrieve.</param>
            <returns>All buildings of type <paramref name="buildingType"/> that belong to this player</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetAllResources">
            <summary>
            Gets all resources and their amounts owned by this player.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetResourceAmount(MHUrho.Logic.ResourceType)">
            <summary>
            Returns the amount of resource of type <paramref name="resourceType"/> owned by this player.
            </summary>
            <param name="resourceType">The type of resource we want to know the amount of.</param>
            <returns>The amount of resource of type <paramref name="resourceType"/> owned by this player.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.GetEnemyPlayers">
            <summary>
            Returns all enemy players.
            </summary>
            <returns>All enemy players.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.IsFriend(MHUrho.Logic.IPlayer)">
            <summary>
            Checks if the provided <paramref name="player"/> is in the same team.
            </summary>
            <param name="player">The player to check.</param>
            <returns>True if the <paramref name="player"/> is in the same team, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.IsEnemy(MHUrho.Logic.IPlayer)">
            <summary>
            Checks if the provided <paramref name="player"/> is in the same team.
            </summary>
            <param name="player">The player to check.</param>
            <returns>False if the <paramref name="player"/> is in the same team, true otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.AddUnit(MHUrho.Logic.IUnit)">
            <summary>
            Adds unit to players ownership.
            </summary>
            <param name="unit">The unit to add to the player.</param>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.AddBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Adds building to players ownership.
            </summary>
            <param name="building">The building to add to the player.</param>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.RemoveUnit(MHUrho.Logic.IUnit)">
            <summary>
            Removes <paramref name="unit"/> from players ownership.
            </summary>
            <param name="unit">The unit to remove from the player.</param>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Removes <paramref name="building"/> from players ownership.
            </summary>
            <param name="building">The building to remove from the player.</param>
        </member>
        <member name="M:MHUrho.Logic.IPlayer.ChangeResourceAmount(MHUrho.Logic.ResourceType,System.Double)">
            <summary>
            Tries to change the amount of resource of the type <paramref name="resourceType"/> owned by the player by <paramref name="change"/>.
            Checks with the <see cref="P:MHUrho.Logic.IPlayer.Plugin"/> if it is possible, if not, may change by different amount or not at all.
            </summary>
            <param name="resourceType">The type of the resource to change.</param>
            <param name="change">The size of the change.</param>
        </member>
        <member name="T:MHUrho.Logic.IProjectile">
            <summary>
            Projectile in the current level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IProjectile.FaceInTheDirectionOfMovement">
            <summary>
            If the projectile should orient itself on every movement along the movement direction.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IProjectile.ProjectilePlugin">
            <summary>
            The instance plugin of this projectile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IProjectile.ProjectileType">
            <summary>
            The type of the projectile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IProjectile.TriggerCollisions">
            <summary>
            If the projectile should trigger collisions.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IProjectile.Shoot(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Shoot the projectile at the <paramref name="target"/>.
            </summary>
            <param name="target">Target to shoot the projectile at.</param>
            <returns>True if the projectile was shot at the target, false if the projectile cannot hit the target (out of range etc.).</returns>
        </member>
        <member name="M:MHUrho.Logic.IProjectile.Shoot(Urho.Vector3)">
            <summary>
            Shoot the target with the given initial <paramref name="movement"/> vector..
            </summary>
            <param name="movement">Initial movement vector of the projectile.</param>
            <returns>If the projectile can be shot with this movement vector, false if it cannot be shot.</returns>
        </member>
        <member name="M:MHUrho.Logic.IProjectile.Move(Urho.Vector3)">
            <summary>
            Move the projectile by the value of <paramref name="movement"/>.
            </summary>
            <param name="movement">The change of position of the projectile.</param>
            <returns>True oif the projectile could be moved and did not hit anything, false if it hit something and cannot be moved further.</returns>
        </member>
        <member name="M:MHUrho.Logic.IProjectile.ReInitialize(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3)">
            <summary>
            Resets the projectile into it's default state so that it can be shot again.
            Implements pooling of the projectiles to lower the number of allocations and deallocations.
            </summary>
            <param name="newID">New ID of the projectile.</param>
            <param name="level">Level in which the projectile is being reinitialized.</param>
            <param name="player">The owner of the projectile.</param>
            <param name="position">Position at which the projectile will be respawned.</param>
        </member>
        <member name="M:MHUrho.Logic.IProjectile.Save">
            <summary>
            Stores the projectile in an instance of <see cref="T:MHUrho.Storage.StProjectile"/> ready to be serialized.
            </summary>
            <returns>Stored projectile in an instance of <see cref="T:MHUrho.Storage.StProjectile"/>.</returns>
        </member>
        <member name="T:MHUrho.Logic.ITile">
            <summary>
            Tile of the map.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Units">
            <summary>
            Units inside the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Building">
            <summary>
            Building that owns this tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Type">
            <summary>
            Tile type of this tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.MapArea">
            <summary>
            The area in the map this tile represents.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.MapLocation">
            <summary>
            Index into map matrix.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopLeft">
            <summary>
            Corner of this tile with the minimum X, minimum Z coords.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopRight">
            <summary>
            Corner of this tile with the maximum X, minimum Z coords.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomLeft">
            <summary>
            Corner of this tile with the minimum X, maximum Z coords.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomRight">
            <summary>
            Corner of this tile with the maximum X, maximum Z coords.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Center">
            <summary>
            Coords of the center of the tile
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Center3">
            <summary>
            3D coords of the center of the tile
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopLeft3">
            <summary>
            Complete world position of the top left (minimum X, minimum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopRight3">
            <summary>
            Complete world position of the top right (maximum X, minimum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomLeft3">
            <summary>
            Complete world position of the top right (minimum X, maximum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomRight3">
            <summary>
            Complete world position of the top right (maximum X, maximum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopLeftHeight">
            <summary>
            Height of the top left (minimum X, minimum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.TopRightHeight">
            <summary>
            Height of the top right (maximum X, minimum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomLeftHeight">
            <summary>
            Height of the top right (minimum X, maximum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.BottomRightHeight">
            <summary>
            Height of the top right (maximum X, maximum Z) corner of the tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITile.Map">
            <summary>
            The map this tile is part of.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ITile.AddUnit(MHUrho.Logic.IUnit)">
            <summary>
            Adds unit to the list of units present on this tile.
            </summary>
            <param name="unit">The unit to add to this tile.</param>
        </member>
        <member name="M:MHUrho.Logic.ITile.RemoveUnit(MHUrho.Logic.IUnit)">
            <summary>
            Removes the <paramref name="unit"/> from this tile.
            </summary>
            <param name="unit">The unit to remove.</param>
            <returns>True if the unit was successfully removed, false if it was not present on this tile.</returns>
        </member>
        <member name="M:MHUrho.Logic.ITile.SetBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Sets the new building on this tile. If there is already <see cref="P:MHUrho.Logic.ITile.Building"/> present, throws an exception. 
            </summary>
            <param name="building">New building to set to this tile.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when there already is building present on this tile.</exception>
        </member>
        <member name="M:MHUrho.Logic.ITile.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Removes building from this tile, if the provided building is not the <see cref="P:MHUrho.Logic.ITile.Building"/> on this tile,
            throws an exception.
            </summary>
            <param name="building">The building to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided <paramref name="building"/> is not the <see cref="P:MHUrho.Logic.ITile.Building"/> on this tile.</exception>
        </member>
        <member name="M:MHUrho.Logic.ITile.Save">
            <summary>
            Serializes the tile into <see cref="T:MHUrho.Storage.StTile"/>.
            </summary>
            <returns>Serialized tile stored in <see cref="T:MHUrho.Storage.StTile"/></returns>
        </member>
        <member name="M:MHUrho.Logic.ITile.ChangeType(MHUrho.Logic.TileType)">
            <summary>
            Changes the type of the tile.
            
            Should only be called by Map class (how i wish C# had friend functions)
            </summary>
            <param name="newType">New type of the tile.</param>
        </member>
        <member name="M:MHUrho.Logic.ITile.ChangeTopLeftHeight(System.Single)">
            <summary>
            Called by the Map to change height
            
            If you want to change height, go through <see cref="M:MHUrho.WorldMap.Map.ChangeTileHeight(MHUrho.Logic.ITile,System.Single)"/>
            </summary>
            <param name="heightDelta">Amount of change of the height.</param>
        </member>
        <member name="M:MHUrho.Logic.ITile.SetTopLeftHeight(System.Single)">
            <summary>
            Sets the height of the top left corner of the tile to <paramref name="newHeight"/>.
            </summary>
            <param name="newHeight">The new height.</param>
        </member>
        <member name="M:MHUrho.Logic.ITile.CornerHeightChange">
            <summary>
            Is called every time any of the 4 corners of the tile change height
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ITile.GetHeightAt(System.Single,System.Single)">
            <summary>
            Returns height at the position [<paramref name="x"/>, <paramref name="y"/>] in the XZ plane of the map.
            </summary>
            <param name="x">Position on the X axis.</param>
            <param name="y">Position on the Z axis.</param>
            <returns>The height at the position [<paramref name="x"/>, <paramref name="y"/>] in the XZ plane in the map.</returns>
        </member>
        <member name="M:MHUrho.Logic.ITile.GetHeightAt(Urho.Vector2)">
            <summary>
            Returns height at the <paramref name="position"/> in the XZ plane of the map.
            </summary>
            <param name="position">Position in the XZ plane of the map.</param>
            <returns>The height at the <paramref name="position"/> in the XZ plane in the map.</returns>
        </member>
        <member name="M:MHUrho.Logic.ITile.GetNeighbours">
            <summary>
            Enumerates all neighboring tiles.
            </summary>
            <returns>Enumerable of all neighboring tiles.</returns>
        </member>
        <member name="M:MHUrho.Logic.ITile.CanChangeCornerHeight(System.Int32,System.Int32)">
            <summary>
            Checks if it is possible to change the height of the corner at [<paramref name="x"/>,<paramref name="y"/>].
            </summary>
            <param name="x">The x coord of the corner.</param>
            <param name="y">The y coord of the corner.</param>
            <returns>If it is possible to change the height of the corner.</returns>
        </member>
        <member name="T:MHUrho.Logic.IUnit">
            <summary>
            Unit in the level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IUnit.AlwaysVertical">
            <summary>
            Get or Set value indicating if units Up vector will always be the same as World up vector (Vector3.UnitY) if true
            	or if unit can be freely rotated
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IUnit.UnitPlugin">
            <summary>
            Instance plugin of this unit.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IUnit.Tile">
            <summary>
            Get tile currently containinng the units Node, value is equal to IMap.GetContainingTile(unit.Position)
            <see cref="M:MHUrho.WorldMap.IMap.GetContainingTile(Urho.Vector3)"/>
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IUnit.UnitType">
            <summary>
            Get unitType instance representing current type of the unit
            <see cref="T:MHUrho.Logic.UnitType"/>
            </summary>
        </member>
        <member name="M:MHUrho.Logic.IUnit.FaceTowards(Urho.Vector3,System.Boolean)">
            <summary>
            Rotates the unit to face towards the <paramref name="lookPosition"/> point in the game world.
            Can rotate straight towards the <paramref name="lookPosition"/> or can only rotate around Y
            axis to preserve the current tilt of the unit.
            </summary>
            <param name="lookPosition">The world position the unit will be looking towards.</param>
            <param name="rotateAroundY">If the rotation should be done only around Y axis or it should be full rotation.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.MoveBy(Urho.Vector2)">
            <summary>
            Moves the unit by <paramref name="moveBy"/> in the XZ plane.
            </summary>
            <param name="moveBy">The change of position in the XZ plane.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.MoveBy(Urho.Vector3)">
            <summary>
            Moves the unit by <paramref name="moveBy"/> relative to the current position.
            </summary>
            <param name="moveBy">The change in position.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.MoveTo(Urho.Vector2)">
            <summary>
            Moves the unit to the <paramref name="newLocation"/> on the map surface.
            </summary>
            <param name="newLocation">The new location of the unit.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.MoveTo(Urho.Vector3)">
            <summary>
            Moves the unit to the <paramref name="newPosition"/>
            </summary>
            <param name="newPosition">The new position of the unit.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.Save">
            <summary>
            Serializes the units current state into an instance of <see cref="T:MHUrho.Storage.StUnit"/>.
            </summary>
            <returns>Serialized representation of the units current state.</returns>
        </member>
        <member name="M:MHUrho.Logic.IUnit.SetHeight(System.Single)">
            <summary>
            Sets height of the unit.
            </summary>
            <param name="newHeight">New height of the unit.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.TileHeightChanged(MHUrho.Logic.ITile)">
            <summary>
            Notifies the unit that the height of the tile it is standing on has changed.
            </summary>
            <param name="tile">The tile the unit is standing on.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.BuildingDestroyed(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <summary>
            Notifies the unit that a building on the tile it was standing on was destroyed.
            </summary>
            <param name="building">The destroyed building.</param>
            <param name="tile">The tile this unit is standing on.</param>
        </member>
        <member name="M:MHUrho.Logic.IUnit.BuildingBuilt(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <summary>
            Notifies the unit that a building was built on the tile it was standing on.
            </summary>
            <param name="building">The new building.</param>
            <param name="tile">The tile this unit is standing on.</param>
        </member>
        <member name="T:MHUrho.Logic.LevelManager">
            <summary>
            Main class representing the current level
            </summary>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.BaseLoader">
            <summary>
            Predecessor of all level loaders
            </summary>
        </member>
        <member name="E:MHUrho.Logic.LevelManager.BaseLoader.TextUpdate">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Logic.LevelManager.BaseLoader.PercentageUpdate">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Logic.LevelManager.BaseLoader.Finished">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Logic.LevelManager.BaseLoader.Failed">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.LevelManager.BaseLoader.Text">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.LevelManager.BaseLoader.Percentage">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.LevelManager.BaseLoader.MHUrho#Logic#ILevelLoader#Level">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.LevelManager.BaseLoader.Game">
            <summary>
            Instance representing the application.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.BaseLoader.EditorMode">
            <summary>
            If we are loading into editor mode, or play mode.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.BaseLoader.LevelRep">
            <summary>
            Rep of the loading level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.BaseLoader.Progress">
            <summary>
            Progress of the loading.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.BaseLoader.Level">
            <summary>
            Loading level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.BaseLoader.TaskFactory">
            <summary>
            Task factory to post tasks onto the main thread.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.PostToMainThread(System.Action)">
            <summary>
            Posts the action <paramref name="func"/> onto the main thread.
            </summary>
            <param name="func">The function to invoke on the main thread.</param>
            <returns>The task representing the posted function.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.PostToMainThread``1(System.Func{``0})">
            <summary>
            Posts the action <paramref name="func"/> onto the main thread.
            </summary>
            <param name="func">The function to invoke on the main thread.</param>
            <returns>The task representing the posted function.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.#ctor(MHUrho.Packaging.LevelRep,System.Boolean,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates loader to load the level represented by <paramref name="levelRep"/> into the mode specified by <paramref name="editorMode"/>.
            Can be added as part of bigger process with <paramref name="parentProgress"/> and <paramref name="loadingSubsectionSize"/>.
            </summary>
            <param name="levelRep">The rep of the level to load.</param>
            <param name="editorMode">If the level should be loaded into editor mode or playing mode.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.StartLoading">
            <summary>
            Starts the loading.
            </summary>
            <returns>Task representing the loading process.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.InitializeLevel">
            <summary>
            Initializes the basic level structure.
            </summary>
            <returns>LevelManager with initialized based level structure.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.GetPlugin(MHUrho.Logic.LevelManager)">
            <summary>
            Gets instance plugin of the level logic for the <paramref name="level"/>.
            </summary>
            <param name="level">The level to get the instance plugin for.</param>
            <returns>Instance plugin to control the <paramref name="level"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.LoadSceneParts(Urho.Scene)">
            <summary>
            Loads parts common to scene of every level
            </summary>
            <param name="scene">The scene of the level</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.LoadCamera(MHUrho.Logic.LevelManager,Urho.Vector2)">
            <summary>
            Creates a camera and an associated viewport to display the camera output into.
            </summary>
            <param name="level">Level into which the camera is loaded.</param>
            <param name="cameraPosition">Initial position of the camera</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.CreatePlaceholderPlayer(MHUrho.EntityInfo.PlayerInsignia)">
             <summary>
             Creates a player to serve as a placeholder for future player with AI.
             Placeholder serves only as a container of units, buildings and projectiles, with no behavior.
            
             Player is added to the level.
             </summary>
             <param name="insignia">Icons and healthbars for the players units.</param>
             <returns>The new placeholder player, initialized and placed into the level.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.RegisterPlayersToUI">
             <summary>
             Registers all players from <see cref="!:Level.Players"/> to <see cref="P:MHUrho.Logic.LevelManager.UIManager"/>
             by calling <see cref="!:UIManager.AddPlayer"/>
            
             Selects the player who currently has the input (<see cref="T:MHUrho.Logic.Player"/>)
             </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.LoadingFinished(MHUrho.Packaging.IProgressNotifier)">
            <summary>
            Method for forwarding <see cref="F:MHUrho.Logic.LevelManager.BaseLoader.Progress"/> <see cref="E:MHUrho.Packaging.ProgressWatcher.Finished"/> events to our <see cref="E:MHUrho.Logic.LevelManager.BaseLoader.Finished"/> event.
            </summary>
            <param name="progress">Should always be our <see cref="F:MHUrho.Logic.LevelManager.BaseLoader.Progress"/>.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BaseLoader.LoadingFailed(MHUrho.Packaging.IProgressNotifier,System.String)">
            <summary>
            Method for forwarding <see cref="F:MHUrho.Logic.LevelManager.BaseLoader.Progress"/> <see cref="E:MHUrho.Packaging.ProgressWatcher.Failed"/> events to our <see cref="E:MHUrho.Logic.LevelManager.BaseLoader.Failed"/> event.
            </summary>
            <param name="progress">Should always be our <see cref="F:MHUrho.Logic.LevelManager.BaseLoader.Progress"/>.</param>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.DefaultLevelLoader">
            <summary>
            Loads level in a default state for player to edit.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.#ctor(MHUrho.Packaging.LevelRep,Urho.IntVector2,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates loader to generate the level represented by <paramref name="levelRep"/>.
            </summary>
            <param name="levelRep">Presentation part of the level.</param>
            <param name="mapSize">Size of the map to generate the level with.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.DefaultLevelLoader.mapSize">
            <summary>
            Size of the map to generate.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.StartLoading">
            <summary>
            Starts the loading process.
            </summary>
            <returns>Task representing the loading process.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.GetPlugin(MHUrho.Logic.LevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.CreateCamera">
            <summary>
            Creates a camera in the generated level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.CreatePlayers">
            <summary>
            Creates placeholder players in the generated level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.CreateDefaultMap">
            <summary>
            Generates the default map.
            </summary>
            <returns>The generated default map.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.CreateControl">
            <summary>
            Creates camera control and tools.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.DefaultLevelLoader.StartLevel">
            <summary>
            Starts the level
            </summary>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.SavedLevelLoader">
            <summary>
            Base class for loaders that load the level from a saved game.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.#ctor(MHUrho.Packaging.LevelRep,MHUrho.Storage.StLevel,System.Boolean,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates a loader that loads the level saved in the <paramref name="storedLevel"/> to mode based on <paramref name="editorMode"/>.
            </summary>
            <param name="levelRep">Presentation part of the level.</param>
            <param name="storedLevel">Saved level.</param>
            <param name="editorMode">If the level should be loaded to editor mode or playing mode.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.SavedLevelLoader.StoredLevel">
            <summary>
            Saved level that we are loading.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.SavedLevelLoader.Loaders">
            <summary>
            Loaders of the parts of the loading level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.StartLoading">
            <summary>
            Starts the loading process of the level.
            </summary>
            <returns>Task representing the loading process of the level.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadUnits">
            <summary>
            Loads units saved in the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadBuildings">
            <summary>
            Loads buildings that were saved in the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadProjectiles">
            <summary>
            Loads projectiles that were saved in the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadPlayers">
            <summary>
            Loads players that were saved in the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadToolsAndControllers">
            <summary>
            Creates camera controller and loads the tools for user control of the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadLevelPlugin">
            <summary>
            Loads instance plugin for the level logic.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.ConnectReferences">
            <summary>
            Connects stored references of the all the loaded parts of the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.FinishLoading">
            <summary>
            Finishes loading and cleans up.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.StartLevel">
            <summary>
            Starts the level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.LoadPlayer(MHUrho.Logic.IPlayerLoader)">
            <summary>
            Loads a player.
            </summary>
            <param name="playerLoader">The player loader for loading of the player.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.CreateCamera">
            <summary>
            Creates a camera in the loaded level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelLoader.StartMapLoader">
            <summary>
            Creates map loader and does the first step of loading.
            We are nod doing concurrency, just splitting it up into more steps.
            </summary>
            <returns>Map loader after the fist step.</returns>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader">
            <summary>
            Loads a saved level for playing.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.players">
            <summary>
            Data for player initialization.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.customSettings">
            <summary>
            Data for level logic plugin initialization.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.#ctor(MHUrho.Packaging.LevelRep,MHUrho.Storage.StLevel,MHUrho.Logic.PlayerSpecification,MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates a loader that loads saved level into a playing mode.
            </summary>
            <param name="levelRep">Presentation part of the level.</param>
            <param name="storedLevel">Saved level.</param>
            <param name="players">Data for player initialization.</param>
            <param name="customSettings">Data for level logic initialization.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.GetPlugin(MHUrho.Logic.LevelManager)">
            <inheritdoc/>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.LoadPlayers">
            <summary>
            Loads players and initializes them with the <see cref="F:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.players"/> data.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelPlayingLoader.FinishLoading">
            <inheritdoc/>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.SavedLevelEditorLoader">
            <summary>
            Loads the saved level for editing.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelEditorLoader.#ctor(MHUrho.Packaging.LevelRep,MHUrho.Storage.StLevel,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates a loader that loads the saved level for editing.
            </summary>
            <param name="levelRep">Presentation part of the level.</param>
            <param name="storedLevel">Saved level.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelEditorLoader.GetPlugin(MHUrho.Logic.LevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SavedLevelEditorLoader.LoadPlayers">
            <summary>
            Loads players, replacing them with placeholder players for editing.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.LevelManager.TypeCheckVisitor`1">
            <summary>
            Implementation of visitor that checks if the given entity is of the correct type.
            </summary>
            <typeparam name="T">The type that we are checking against.</typeparam>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.CurrentLevel">
            <summary>
            Currently running level, CANNOT BE USED DURING LOADING
            </summary>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.LevelRep">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.App">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.LevelNode">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Map">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Minimap">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.DefaultComponentFactory">
            <summary>
            Factory that provides default component loading.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.PackageManager">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Package">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.EditorMode">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Units">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Players">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Buildings">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Input">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.UIManager">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Camera">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.ToolManager">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.NeutralPlayer">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.HumanPlayer">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.Plugin">
            <inheritdoc/>
        </member>
        <member name="E:MHUrho.Logic.LevelManager.Update">
            <inheritdoc/>
        </member>
        <member name="E:MHUrho.Logic.LevelManager.Ending">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelManager.IsEnding">
            <inheritdoc/>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.cameraController">
            <summary>
            Controller that translates user input to camera movement.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.octree">
            <summary>
            Engine component for raycasting.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.units">
            <summary>
            All units present in the level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.players">
            <summary>
            All players present in the level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.buildings">
            <summary>
            All buildings present in the level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.projectiles">
            <summary>
            All projectiles active in the level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.entities">
            <summary>
            All entities (units, buildings, projectiles) in the game.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.rangeTargets">
            <summary>
            All range targets in the game.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.nodeToEntity">
            <summary>
            Mapping of game engine nodes to entities.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.rng">
            <summary>
            Random number generator to be used for generating IDs.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.map">
            <summary>
            The map of this level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.#ctor(Urho.Node,MHUrho.Packaging.LevelRep,MHUrho.MHUrhoApp,Urho.Octree,System.Boolean)">
            <summary>
            Creates level manager that controls a level presented by <paramref name="levelRep"/> to the user,
            represented by <paramref name="levelNode"/> in the game engine.
            </summary>
            <param name="levelNode">The <see cref="T:Urho.Node"/> representing the level in the game engine.</param>
            <param name="levelRep">Presentation of the level for the user.</param>
            <param name="app">Current running application.</param>
            <param name="octree">Engine component used for raycasting.</param>
            <param name="editorMode">If the level is in editor mode or playig mode.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetLoaderForPlaying(MHUrho.Packaging.LevelRep,MHUrho.Storage.StLevel,MHUrho.Logic.PlayerSpecification,MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Returns loader that can load the level into playing mode.
            </summary>
            <param name="levelRep">Presentation of the level for the user.</param>
            <param name="storedLevel">Stored serialized state of the level.</param>
            <param name="players">Data to initialize the players.</param>
            <param name="customSettings">Data to initialize the level logic instance plugin.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
            <returns>Loader that can load the level into playing mode.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetLoaderForEditing(MHUrho.Packaging.LevelRep,MHUrho.Storage.StLevel,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Returns loader that can load the level into editing mode, where players are just placeholders.
            </summary>
            <param name="levelRep">Presentation of the level for the user.</param>
            <param name="storedLevel">Stored serialized state of the level.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
            <returns>Loader that can load the level into editing mode.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetLoaderForDefaultLevel(MHUrho.Packaging.LevelRep,Urho.IntVector2,MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Returns loader that can generate new level based on provided data.
            </summary>
            <param name="levelRep">Presentation of the level for the user.</param>
            <param name="mapSize">Size of the map to generate.</param>
            <param name="parentProgress">Progress watcher for the parent process.</param>
            <param name="loadingSubsectionSize">Size of this loading process as a part of the parent process.</param>
            <returns>Loader that can generate new level.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.Save">
            <summary>
            Saves the level into an instance of <see cref="T:MHUrho.Storage.StLevel"/> for serialization.
            </summary>
            <returns>Level state stored in instance of <see cref="T:MHUrho.Storage.StLevel"/> for serialization.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SaveTo(System.IO.Stream,System.Boolean)">
            <summary>
            Serializes the state of the level to the given <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream to serialize the level into.</param>
            <param name="leaveOpen">If the stream should be left open after the serialization.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.Dispose">
            <summary>
            Ends the level and releases all resources held by the level and all it's parts.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.End">
            <summary>
            Ends the level and releases all resources held by the level and all it's parts.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SpawnUnit(MHUrho.Logic.UnitType,MHUrho.Logic.ITile,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.BuildBuilding(MHUrho.Logic.BuildingType,Urho.IntVector2,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SpawnProjectile(MHUrho.Logic.ProjectileType,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.IPlayer,MHUrho.DefaultComponents.IRangeTarget)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.SpawnProjectile(MHUrho.Logic.ProjectileType,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.IPlayer,Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RemoveUnit(MHUrho.Logic.IUnit)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RemoveProjectile(MHUrho.Logic.IProjectile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RemovePlayer(MHUrho.Logic.IPlayer)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetUnit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetUnit(Urho.Node)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetUnit(System.Int32,MHUrho.Logic.IUnit@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetUnit(Urho.Node,MHUrho.Logic.IUnit@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetBuilding(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetBuilding(Urho.Node)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetBuilding(System.Int32,MHUrho.Logic.IBuilding@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetBuilding(Urho.Node,MHUrho.Logic.IBuilding@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetPlayer(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetPlayer(System.Int32,MHUrho.Logic.IPlayer@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetProjectile(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetProjectile(Urho.Node)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetProjectile(System.Int32,MHUrho.Logic.IProjectile@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetProjectile(Urho.Node,MHUrho.Logic.IProjectile@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetEntity(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetEntity(Urho.Node)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetEntity(System.Int32,MHUrho.Logic.IEntity@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.TryGetEntity(Urho.Node,MHUrho.Logic.IEntity@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetRangeTarget(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RegisterRangeTarget(MHUrho.DefaultComponents.IRangeTarget)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.LoadRangeTarget(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Loads range target that was stored and already has an ID.
            </summary>
            <param name="rangeTarget">The range target with ID.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.UnRegisterRangeTarget(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.CanSee(Urho.Vector3,MHUrho.Logic.IEntity,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.Pause">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.UnPause">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.ChangeRep(MHUrho.Packaging.LevelRep)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.LevelManager.OnUpdate(System.Single)">
            <summary>
            Handles scene updates.
            </summary>
            <param name="timeStep">Time elapsed since the last scene update.</param>
        </member>
        <member name="F:MHUrho.Logic.LevelManager.MaxTries">
            <summary>
            Maximum tries of generating random ID, after which we presume we exhausted the supply of IDs.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.GetNewID``1(System.Collections.Generic.IDictionary{System.Int32,``0})">
            <summary>
            Generates a new random ID that is not already present in the <paramref name="dictionary"/>.
            </summary>
            <typeparam name="T">The value type of the dictionary.</typeparam>
            <param name="dictionary">The dictionary of used IDs.</param>
            <returns>New random ID that is not already in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RegisterEntity(MHUrho.Logic.IEntity)">
            <summary>
            Registers entity to the entity registry and to the node to entity mapping.
            </summary>
            <param name="entity">The entity to register.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelManager.RemoveEntity(MHUrho.Logic.IEntity)">
            <summary>
            Removes entity from the level.
            </summary>
            <param name="entity">The entity to remove.</param>
            <returns>True if the entity was removed, false if the entity was not registered in the level.</returns>
        </member>
        <member name="T:MHUrho.Logic.LevelLogicType">
            <summary>
            Type of level logic loaded from package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.ID">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.Name">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.MaxNumberOfPlayers">
            <summary>
            Maximum number of players this level supports. 
            </summary>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.MinNumberOfPlayers">
            <summary>
            Minimum number of players this level can be played with.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.Package">
            <inheritdoc/>
        </member>
        <member name="P:MHUrho.Logic.LevelLogicType.Plugin">
            <summary>
            The type plugin of this level logic type.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads the level logic type from the package Xml.
            </summary>
            <param name="xml">Xml element holding the data for this level logic type.</param>
            <param name="package">The source package of the Xml.</param>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.Equals(System.Object)">
            <summary>
            Compares level logic types for equality.
            </summary>
            <param name="obj">The compared object.</param>
            <returns>True if the <paramref name="obj"/> is the same level logic type.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.GetHashCode">
            <summary>
            Returns hashcode to enable the use of this class as keys in dictionaries.
            </summary>
            <returns>Hashcode of this instance.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.ClearCache">
            <summary>
            Clears any level specific data.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.GetCustomSettings(Urho.Gui.Window,MHUrho.MHUrhoApp)">
            <summary>
            Returns plugin custom settings, encapsulating the GUI given to the plugin to place it's own elements in.
            </summary>
            <param name="customSettingsWindow">The part of the GUI given to the plugin.</param>
            <param name="game">Th instance representing the app.</param>
            <returns>Instance encapsulating the access to the GUI for the plugin.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.CreateInstancePluginForBrandNewLevel(MHUrho.Logic.ILevelManager)">
            <summary>
            Creates level logic instance plugin for a level that is newly generated.
            </summary>
            <param name="level">The newly generated level.</param>
            <returns>Instance plugin for a newly generated level.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.CreateInstancePluginForNewPlaying(MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Logic.ILevelManager)">
            <summary>
            Gets level logic instance plugin for level that is loaded for playing from a level prototype,
            so it has never been loaded for playing before.
            </summary>
            <param name="levelSettings">The GUI encapsulation given to the plugin so it can get input from user.</param>
            <param name="level">The loaded level.</param>
            <returns>Instance plugin for level loaded for playing for the first time.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.CreateInstancePluginForEditorLoading(MHUrho.Logic.ILevelManager)">
            <summary>
            Gets level logic instance plugin for existing level that is loaded for editing.
            </summary>
            <param name="level">The level that will be controlled by the plugin.</param>
            <returns>Instance plugin for the level loaded for editing.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.CreateInstancePluginForLoadingToPlaying(MHUrho.Logic.ILevelManager)">
            <summary>
            Gets level logic instance plugin for existing level that was saved during playing and so can only be loaded for playing.
            Already has stored state.
            </summary>
            <param name="level">The level that will be controlled by the plugin.</param>
            <returns>Instance plugin for the level loaded for playing.</returns>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.Dispose">
            <summary>
            Releases the plugin.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.LevelLogicType.LoadError(System.String,System.Exception)">
            <summary>
            Logs message and throws a <see cref="T:MHUrho.Packaging.PackageLoadingException"/>
            </summary>
            <param name="message">Message to log and propagate via exception</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Always throws this exception</exception>
        </member>
        <member name="T:MHUrho.Logic.OnUpdateDelegate">
            <summary>
            Encapsulates methods that are invoked on each scene update.
            </summary>
            <param name="timeStep"></param>
        </member>
        <member name="T:MHUrho.Logic.OnEndDelegate">
            <summary>
            Encapsulates methods that are invoked on level ending.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.BuildingComponentSetup">
            <summary>
            Sets up components on the node hierarchy making up a building
            to proper values for building components.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.BuildingComponentSetup.SetupRigidBody(Urho.Physics.RigidBody,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.BuildingComponentSetup.SetupStaticModel(Urho.StaticModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.BuildingComponentSetup.SetupAnimatedModel(Urho.AnimatedModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.BuildingComponentSetup.SetupAnimationController(Urho.AnimationController,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="T:MHUrho.Logic.ComponentSetup">
            <summary>
            Base class for component setup classes that traverse the node hierarchy
            making up entities and set the properties of components on these nodes to
            needed values.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.ComponentSetup.ComponentSetupDelegate">
            <summary>
            Encapsulates methods for setting a component properties.
            </summary>
            <param name="component">The component to set properties on.</param>
            <param name="level">The level manager.</param>
        </member>
        <member name="F:MHUrho.Logic.ComponentSetup.setupDispatch">
            <summary>
            Mapping of component types to the methods that set them up.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.#ctor">
            <summary>
            Sets upa the dispatching.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupComponentsOnNode(Urho.Node,MHUrho.Logic.ILevelManager)">
            <summary>
            Traverses the node hierarchy by DFS search starting from <paramref name="node"/>.
            </summary>
            <param name="node">The node to start the search on.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupRigidBody(Urho.Physics.RigidBody,MHUrho.Logic.ILevelManager)">
            <summary>
            Setup the <see cref="T:Urho.Physics.RigidBody"/> component.
            </summary>
            <param name="rigidBody">The rigid body component to setup.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupStaticModel(Urho.StaticModel,MHUrho.Logic.ILevelManager)">
            <summary>
            Setup the <see cref="T:Urho.StaticModel"/> component.
            </summary>
            <param name="staticModel">The static model component to setup.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupAnimatedModel(Urho.AnimatedModel,MHUrho.Logic.ILevelManager)">
            <summary>
            Setup the <see cref="T:Urho.AnimatedModel"/> component.
            </summary>
            <param name="animatedModel">The animated model component to setup.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupAnimationController(Urho.AnimationController,MHUrho.Logic.ILevelManager)">
            <summary>
            Setup the <see cref="T:Urho.AnimationController"/> component.
            </summary>
            <param name="animationController">The animation controller component to setup.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupRigidBodyWeak(Urho.Component,MHUrho.Logic.ILevelManager)">
            <summary>
            Transforms the weakly typed dispatch to strongly typed method call for rigid body.
            </summary>
            <param name="rigidBodyComponent">The rigid body component.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupStaticModelWeak(Urho.Component,MHUrho.Logic.ILevelManager)">
            <summary>
            Transforms the weakly typed dispatch to strongly typed method call for static model.
            </summary>
            <param name="staticModelComponent">The static model component.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupAnimatedModelWeak(Urho.Component,MHUrho.Logic.ILevelManager)">
            <summary>
            Transforms the weakly typed dispatch to strongly typed method call for animated model.
            </summary>
            <param name="animatedModelComponent">The animated model component.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupAnimationControllerWeak(Urho.Component,MHUrho.Logic.ILevelManager)">
            <summary>
            Transforms the weakly typed dispatch to strongly typed method call for animation controller.
            </summary>
            <param name="animationControllerComponent">The animation controller component.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="M:MHUrho.Logic.ComponentSetup.SetupNodeComponents(Urho.Node,MHUrho.Logic.ILevelManager)">
            <summary>
            Sets up the components on the given <paramref name="node"/>.
            </summary>
            <param name="node">The node to setup the components on.</param>
            <param name="level">Level manager.</param>
        </member>
        <member name="T:MHUrho.Logic.IBuildingLoader">
            <summary>
            Loader that loads buildings.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IBuildingLoader.Building">
            <summary>
            The loaded building.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.ILevelLoader">
            <summary>
            Coordinates the loading of the level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ILevelLoader.Level">
            <summary>
            The loaded level
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILevelLoader.StartLoading">
            <summary>
            Starts the loading task.
            </summary>
            <returns>The task representing the loading process.</returns>
        </member>
        <member name="T:MHUrho.Logic.ILoader">
            <summary>
            Is capable of three step loading.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILoader.StartLoading">
            <summary>
            Starts loading.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILoader.ConnectReferences">
            <summary>
            Connects the stored references of the loaded object to other loaded objects.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ILoader.FinishLoading">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IMapLoader">
            <summary>
            Loader that loads maps.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IMapLoader.Map">
            <summary>
            The loaded map.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IPlayerLoader">
            <summary>
            Loader that loads players.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IPlayerLoader.Player">
            <summary>
            The loaded player.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IProjectileLoader">
            <summary>
            Loader that loads projectiles.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IProjectileLoader.Projectile">
            <summary>
            The loaded projectile.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.ITileLoader">
            <summary>
            Loader that loads tiles.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ITileLoader.Tile">
            <summary>
            Loaded tile.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.IUnitLoader">
            <summary>
            Loader that loads units.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.IUnitLoader.Unit">
            <summary>
            The loaded unit.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.PlayerInfo">
            <summary>
            Data for player loading.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerInfo.IsNeutral">
            <summary>
            If the player will be neutral player.
            Mutually exclusive with <see cref="P:MHUrho.Logic.PlayerInfo.IsHuman"/>.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerInfo.IsHuman">
            <summary>
            If the player will be human player.
            Mutually exclusive with <see cref="P:MHUrho.Logic.PlayerInfo.IsNeutral"/>.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerInfo.PlayerType">
            <summary>
            Type of the player.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerInfo.TeamID">
            <summary>
            The players team.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerInfo.Insignia">
            <summary>
            Graphical identifications of the player.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.PlayerInfo.CreateNeutralPlayerInfo(MHUrho.Logic.PlayerType)">
            <summary>
            Creates player info for neutral player that will be of the given <paramref name="playerType"/>.
            Checks that the given player type has category <see cref="F:MHUrho.Logic.PlayerTypeCategory.Neutral"/>
            </summary>
            <param name="playerType">The type of the player.</param>
            <returns>Info to initialize the player with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the given <paramref name="playerType"/> is not neutral category.</exception>
        </member>
        <member name="M:MHUrho.Logic.PlayerInfo.CreateHumanPlayer(MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            Creates player info for human player that will be of the given <paramref name="playerType"/>.
            Checks that the given player type has category <see cref="F:MHUrho.Logic.PlayerTypeCategory.Human"/>
            </summary>
            <param name="playerType">The type of the player.</param>
            <param name="teamID">ID of the team the human player will be part of.</param>
            <param name="insignia">The graphical identifications of the player.</param>
            <returns>Info to initialize the player with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the given <paramref name="playerType"/> is not human category.</exception>
        </member>
        <member name="M:MHUrho.Logic.PlayerInfo.CreateAIPlayer(MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            Creates player info for ai player that will be of the given <paramref name="playerType"/>.
            Checks that the given player type has category <see cref="F:MHUrho.Logic.PlayerTypeCategory.AI"/>
            </summary>
            <param name="playerType">The type of the player.</param>
            <param name="teamID">ID of the team the ai player will be part of.</param>
            <param name="insignia">The graphical identifications of the player.</param>
            <returns>Info to initialize the player with.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the given <paramref name="playerType"/> is not ai category.</exception>
        </member>
        <member name="T:MHUrho.Logic.PlayerSpecification">
            <summary>
            Specification of all players for level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerSpecification.LoadFromSavedGame">
            <summary>
            Specification for levels that are loaded from saved game.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerSpecification.NeutralPlayer">
            <summary>
            Settings of the neutral player.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerSpecification.PlayerWithInput">
            <summary>
            Settings of the human player.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.PlayerSpecification.playerInfos">
            <summary>
            Settings of the ai players.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.PlayerSpecification.AddAIPlayer(MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            Adds AI player to the specification of players.
            </summary>
            <param name="type">The type of the player.</param>
            <param name="teamID">The team the player will be part of.</param>
            <param name="insignia">The graphical representation of the player.</param>
        </member>
        <member name="M:MHUrho.Logic.PlayerSpecification.SetNeutralPlayer(MHUrho.Logic.PlayerType)">
            <summary>
            Sets the settings of the neutral player.
            </summary>
            <param name="type">The neutral player type.</param>
        </member>
        <member name="M:MHUrho.Logic.PlayerSpecification.SetHumanPlayer(MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            Sets the human player settings.
            </summary>
            <param name="type">The type of the player.</param>
            <param name="teamID">The team the player will be part of.</param>
            <param name="insignia">The graphical representation of the player.</param>
        </member>
        <member name="M:MHUrho.Logic.PlayerSpecification.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates the AI players.
            First checks that neutral player and human player were both set.
            </summary>
            <returns>An enumerator that enumerates the settings of AI players.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when human or neutral player were not set at the time of the call of this method.</exception>
        </member>
        <member name="M:MHUrho.Logic.PlayerSpecification.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that enumerates the AI players.
            First checks that neutral player and human player were both set.
            </summary>
            <returns>An enumerator that enumerates the settings of AI players.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when human or neutral player were not set at the time of the call of this method.</exception>
        </member>
        <member name="T:MHUrho.Logic.ProjectileComponentSetup">
            <summary>
            Sets up components on the node hierarchy making up the projectile
            to correct values for projectile.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ProjectileComponentSetup.SetupRigidBody(Urho.Physics.RigidBody,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.ProjectileComponentSetup.SetupStaticModel(Urho.StaticModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.ProjectileComponentSetup.SetupAnimatedModel(Urho.AnimatedModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.ProjectileComponentSetup.SetupAnimationController(Urho.AnimationController,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="T:MHUrho.Logic.UnitComponentSetup">
            <summary>
            Sets up components on the node hierarchy making up the unit to the
            correct values for units.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.UnitComponentSetup.SetupRigidBody(Urho.Physics.RigidBody,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.UnitComponentSetup.SetupStaticModel(Urho.StaticModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.UnitComponentSetup.SetupAnimatedModel(Urho.AnimatedModel,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.UnitComponentSetup.SetupAnimationController(Urho.AnimationController,MHUrho.Logic.ILevelManager)">
            <inheritdoc />
        </member>
        <member name="T:MHUrho.Logic.Player">
            <summary>
            Represents a player in the level.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.Player.Loader">
            <summary>
            Loads player from a saved game.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Player.Loader.Player">
            <summary>
            Player that is currently being loaded.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.loadingPlayer">
            <summary>
            Player that is currently being loaded.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.level">
            <summary>
            The level the player is being loaded into.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.storedPlayer">
            <summary>
            Stored data of the player.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.insignia">
            <summary>
            Graphical identifications of the player.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.type">
            <summary>
            Type of the loaded player.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.Loader.teamID">
            <summary>
            The team of the loaded player.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.#ctor(MHUrho.Logic.LevelManager,System.Collections.Generic.IList{MHUrho.Storage.StPlayer},MHUrho.EntityInfo.InsigniaGetter,MHUrho.Logic.PlayerInfo)">
            <summary>
            Creates a loader that loads one of the <paramref name="storedPlayers"/> that corresponds to the data in
            <paramref name="newInfo"/>.
            </summary>
            <param name="level">The level to load the player into.</param>
            <param name="storedPlayers">The stored data of all players.</param>
            <param name="insigniaGetter">The source of graphical representations of the players.</param>
            <param name="newInfo">Info of the player to load.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.#ctor(MHUrho.Logic.LevelManager,MHUrho.Storage.StPlayer,MHUrho.EntityInfo.InsigniaGetter,System.Boolean)">
            <summary>
            Creates a loader that loads the given <paramref name="storedPlayer"/> into the <paramref name="level"/>.
            </summary>
            <param name="level">The level to load the player into.</param>
            <param name="storedPlayer">Stored data of the player.</param>
            <param name="insigniaGetter">The source of graphical representations of the players.</param>
            <param name="loadPlaceholder">If the player should be loaded as a placeholder player, or if it should be loaded with it's
            actual type and plugin.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.Save(MHUrho.Logic.Player)">
            <summary>
            Stores the players state in an instance of <see cref="T:MHUrho.Storage.StPlayer"/> for serialization.
            </summary>
            <param name="player">The player to store.</param>
            <returns>Player data stored in an instance of <see cref="T:MHUrho.Storage.StPlayer"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.StartLoading">
            <summary>
            Starts loading of the player.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.ConnectReferences">
            <summary>
            Connects references that were stored with the player.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.Loader.FinishLoading">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Player.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.Insignia">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.Plugin">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.TeamID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.Level">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.PlayerType">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.IsRemovedFromLevel">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Player.Resources">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Logic.Player.OnRemoval">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.Logic.Player.units">
            <summary>
            Units owned by the player, split up by types.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.buildings">
            <summary>
            Buildings owned by the player, split up by types.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Player.resources">
            <summary>
            Resources owned by the player.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.#ctor(System.Int32,System.Int32,MHUrho.Logic.ILevelManager,MHUrho.EntityInfo.PlayerInsignia,MHUrho.Logic.PlayerType,System.Boolean)">
            <summary>
            Creates new instance of a player.
            </summary>
            <param name="id">Unique identifier of the player.</param>
            <param name="teamID">Identifier of the team this player is on.</param>
            <param name="level">The level this player is spawning into.</param>
            <param name="insignia">The graphical identifications of the player.</param>
            <param name="type">The type of the player.</param>
            <param name="newPluginInstance">If new plugin instance should be created.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.CreatePlaceholderPlayer(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.EntityInfo.PlayerInsignia)">
            <summary>
            Creates a player for level editing, where player serves only as a container of his units, buildings and resources
            </summary>
            <param name="id">Unique identifier of the player.</param>
            <param name="level">The level this player is spawning into.</param>
            <param name="insignia">The graphical identifications of the player.</param>
            <returns>New instance of placeholder player.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.GetLoader(MHUrho.Logic.LevelManager,MHUrho.Storage.StPlayer,MHUrho.EntityInfo.InsigniaGetter)">
            <summary>
            Loads player as is stored in the <paramref name="storedPlayer"/>.
            </summary>
            <param name="level">Level into which the player is being loaded.</param>
            <param name="storedPlayer">Stored data of the player.</param>
            <param name="insigniaGetter">Provider of graphical identifications for players.</param>
            <returns>Loader that loads the player as is stored in the <paramref name="storedPlayer"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.GetLoaderToPlaceholder(MHUrho.Logic.LevelManager,MHUrho.Storage.StPlayer,MHUrho.EntityInfo.InsigniaGetter)">
            <summary>
            Loads placeholder player with ownership of units and buildings.
            </summary>
            <param name="level">The level the placeholder player is loading into.</param>
            <param name="storedPlayer">The stored data for this placeholder player.</param>
            <param name="insigniaGetter">Provider of graphical identifications for players.</param>
            <returns>Loader that loads the placeholder player from the data in the <paramref name="storedPlayer"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.GetLoaderFromInfo(MHUrho.Logic.LevelManager,System.Collections.Generic.IList{MHUrho.Storage.StPlayer},MHUrho.Logic.PlayerInfo,MHUrho.EntityInfo.InsigniaGetter)">
            <summary>
            Loads a player from <paramref name="storedPlayers"/> which matches the identifications given in <paramref name="playerInfo"/>
            , overriding any player type info the player may have been stored with.
            </summary>
            <param name="level">The level the player is loading into.</param>
            <param name="storedPlayers">Data of the all stored players.</param>
            <param name="playerInfo">The new info to match or override the stored info with.</param>
            <param name="insigniaGetter">Provider of graphical identifications for players.</param>
            <returns>Loader that loads a player from <paramref name="storedPlayers"/> which matches the identifications given in <paramref name="playerInfo"/></returns>
        </member>
        <member name="M:MHUrho.Logic.Player.Save">
            <summary>
            Serializes the current state of the player to an instance of <see cref="T:MHUrho.Storage.StPlayer"/>.
            </summary>
            <returns>Serialized current state of the player.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.RemoveFromLevel">
            <summary>
            Removes player from level, with all the buildings and units that belong to him.
            Player can be removed either by calling this or by calling the <see cref="M:MHUrho.Logic.ILevelManager.RemovePlayer(MHUrho.Logic.IPlayer)"/>.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.Dispose">
            <summary>
            Removes the player from the level with all that it owns.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Player.AddUnit(MHUrho.Logic.IUnit)">
            <summary>
            Adds unit to players units.
            </summary>
            <param name="unit">Unit to add.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.AddBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Adds building to players ownership.
            </summary>
            <param name="building">The added building.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.ChangeResourceAmount(MHUrho.Logic.ResourceType,System.Double)">
            <summary>
            Tries to change the amount of <paramref name="resourceType"/> owned by the player by <paramref name="change"/>.
            Checks with the <see cref="P:MHUrho.Logic.Player.Plugin"/> if it is possible, if not, may change by different amount or not at all.
            </summary>
            <param name="resourceType">The resourceType to change the amount of.</param>
            <param name="change">The size of the change.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.RemoveUnit(MHUrho.Logic.IUnit)">
            <summary>
            Removes unit from the player.
            </summary>
            <param name="unit">The unit to remove.</param>
            <returns>True if the unit was removed, false if the unit did not belong to this player.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <summary>
            Removes building from the player.
            </summary>
            <param name="building">The building to remove.</param>
            <returns>True if the building was removed, false if the building did not belong to this player.</returns>
        </member>
        <member name="M:MHUrho.Logic.Player.GetAllUnits">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetUnitsOfType(MHUrho.Logic.UnitType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetAllBuildings">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetBuildingsOfType(MHUrho.Logic.BuildingType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetAllResources">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetResourceAmount(MHUrho.Logic.ResourceType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetEnemyPlayers">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.IsFriend(MHUrho.Logic.IPlayer)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.IsEnemy(MHUrho.Logic.IPlayer)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.OnUpdate(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Player.AddUnitImpl(MHUrho.Logic.IUnit)">
            <summary>
            Adds unit owned by this player.
            Split from the public AddUnit to be used for loading.
            </summary>
            <param name="unit">The unit to add.</param>
        </member>
        <member name="M:MHUrho.Logic.Player.AddBuildingImpl(MHUrho.Logic.IBuilding)">
            <summary>
            Adds building owned by this player.
            Split from the public AddBuilding to be used for loading.
            </summary>
            <param name="unit">The building to add.</param>
        </member>
        <member name="T:MHUrho.Logic.PlayerTypeCategory">
            <summary>
            Category of the player type, if it controls the user's player, the neutral player or the enemy players.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.PlayerType">
            <summary>
            Type of a player AI loaded from package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerType.Placeholder">
            <summary>
            Placeholder player to be used during editing, so that AI does not mess with the edited level.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerType.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.PlayerType.Name">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.PlayerType.Package">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.PlayerType.IconRectangle">
            <summary>
            Part of the <see cref="P:MHUrho.Packaging.GamePack.PlayerIconTexture"/> representing this type of players.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerType.Category">
            <summary>
            Category of this type of player AI.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.PlayerType.Plugin">
            <summary>
            Type plugin of this player AI type.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads the PlayerType contents from the <paramref name="xml"/>.
            </summary>
            <param name="xml">The xml data to load.</param>
            <param name="package">Tha source package of the xml.</param>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.ClearCache">
            <summary>
            Clears any cache state dependent on the current level
            </summary>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.GetNewInstancePlugin(MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin to control the <paramref name="player"/>.
            </summary>
            <param name="player">The player that will be controlled by the instance plugin.</param>
            <param name="level">The level the player is in.</param>
            <returns>Instance plugin that will control the <paramref name="player"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.GetInstancePluginForLoading(MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin to control the <paramref name="player"/> that will load it's state
            from serialized data.
            </summary>
            <param name="player">The player that will be controlled by the instance plugin.</param>
            <param name="level">The level the player is in.</param>
            <returns>Instance plugin that will control the <paramref name="player"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.Dispose">
            <summary>
            Releases the plugin.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.StringToCategory(System.String)">
            <summary>
            Converts string representation of <see cref="T:MHUrho.Logic.PlayerTypeCategory"/> into the value of <see cref="T:MHUrho.Logic.PlayerTypeCategory"/>.
            </summary>
            <param name="categoryString">String representation of <see cref="T:MHUrho.Logic.PlayerTypeCategory"/></param>
            <returns>The <see cref="T:MHUrho.Logic.PlayerTypeCategory"/> coresponding to the given string.</returns>
        </member>
        <member name="M:MHUrho.Logic.PlayerType.LoadError(System.String,System.Exception)">
            <summary>
            Logs message and throws a <see cref="T:MHUrho.Packaging.PackageLoadingException"/>
            </summary>
            <param name="message">Message to log and propagate via exception</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Always throws this exception</exception>
        </member>
        <member name="P:MHUrho.Logic.Projectile.Loader.Projectile">
            <summary>
            Loading projectile
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Projectile.Loader.loadingProjectile">
            <summary>
            Loading projectile
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Projectile.Loader.componentLoaders">
            <summary>
            Loaders of the default components stored with the projectile.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Projectile.Loader.level">
            <summary>
            The level the projectile is being loaded into.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Projectile.Loader.storedProjectile">
            <summary>
            Stored data of the projectile.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Projectile.Loader.type">
            <summary>
            Type of the loading projectile.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.#ctor(MHUrho.Logic.LevelManager,MHUrho.Storage.StProjectile)">
            <summary>
            Creates a loader that loads the <paramref name="storedProjectile"/> into the <paramref name="level"/>.
            </summary>
            <param name="level">The level the projectile is being loaded into.</param>
            <param name="storedProjectile">The stored data of the projectile.</param>
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.CreateNew(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.ProjectileType)">
            <summary>
            Creates new projectile in the level.
            </summary>
            <param name="ID">The id of the new projectile.</param>
            <param name="level">Level the projectile is created in.</param>
            <param name="player">Owner of the new projectile.</param>
            <param name="position">Initial position of the projectile.</param>
            <param name="rotation">Initial rotation of the projectile.</param>
            <param name="type">Type of the projectile.</param>
            <returns>New projectile created in the level.</returns>
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.Save(MHUrho.Logic.Projectile)">
            <summary>
            Stores the projectile into an instance of <see cref="T:MHUrho.Storage.StProjectile"/> for serialization.
            </summary>
            <param name="projectile">The projectile to store.</param>
            <returns>Stored projectile in an instance of <see cref="T:MHUrho.Storage.StProjectile"/> for serialization</returns>
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.StartLoading">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.ConnectReferences">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Loader.FinishLoading">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.ProjectileType">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Type">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Position">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Forward">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Backward">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Right">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Left">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Up">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Down">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.Plugin">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.ProjectilePlugin">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.FaceInTheDirectionOfMovement">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Projectile.TriggerCollisions">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.Logic.Projectile.isPooled">
            <summary>
            If the projectile is currently stored in a pool, waiting for reinitialization
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Projectile.#ctor(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.ProjectileType,MHUrho.Logic.IPlayer)">
            <summary>
            Creates a projectile.
            </summary>
            <param name="ID">ID of the new projectile.</param>
            <param name="level">Level the projectile will be in.</param>
            <param name="type">The type of the projectile.</param>
            <param name="player">Owner of the projectile.</param>
        </member>
        <member name="M:MHUrho.Logic.Projectile.#ctor(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.ProjectileType)">
            <summary>
            Creates a projectile.
            </summary>
            <param name="ID">ID of the new projectile.</param>
            <param name="level">Level the projectile will be in.</param>
            <param name="type">The type of the projectile.</param>
        </member>
        <member name="M:MHUrho.Logic.Projectile.GetLoader(MHUrho.Logic.LevelManager,MHUrho.Storage.StProjectile)">
            <summary>
            Returns loader that will load the <paramref name="storedProjectile"/> into the <paramref name="level"/>.
            </summary>
            <param name="level">The level to load the projectile into.</param>
            <param name="storedProjectile">The stored projectile data.</param>
            <returns>Loader that will load the stored projectile.</returns>
        </member>
        <member name="M:MHUrho.Logic.Projectile.CreateNew(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3,Urho.Quaternion,MHUrho.Logic.ProjectileType)">
            <summary>
            Creates new projectile in the level.
            </summary>
            <param name="ID">The id of the new projectile.</param>
            <param name="level">Level the projectile is created in.</param>
            <param name="player">Owner of the new projectile.</param>
            <param name="position">Initial position of the projectile.</param>
            <param name="rotation">Initial rotation of the projectile.</param>
            <param name="type">Type of the projectile.</param>
            <returns>New projectile created in the level.</returns>
        </member>
        <member name="M:MHUrho.Logic.Projectile.ReInitialize(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Save">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.RemoveFromLevel">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Accept(MHUrho.Logic.IEntityVisitor)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Accept``1(MHUrho.Logic.IEntityVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.HardRemove">
            <summary>
            Removes the projectile from the level completely, doesn't just put it into a pool.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Projectile.Move(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Shoot(MHUrho.DefaultComponents.IRangeTarget)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.Shoot(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.HitBy(MHUrho.Logic.IEntity,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Projectile.OnUpdate(System.Single)">
            <summary>
            Handles scene update.
            </summary>
            <param name="timeStep">Time elapsed since the last scene update.</param>
        </member>
        <member name="M:MHUrho.Logic.Projectile.CollisionHandler(Urho.NodeCollisionStartEventArgs)">
            <summary>
            Handles collisions with other entities besides projectiles.
            </summary>
            <param name="args">Data of the collision event.</param>
        </member>
        <member name="T:MHUrho.Logic.ProjectileType">
            <summary>
            Represents a projectile type loaded from package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.Name">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.Package">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.Assets">
            <summary>
            Assets that will be loaded with every instance of projectile of this type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.Plugin">
            <summary>
            Type plugin of this projectile type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ProjectileType.MHUrho#Logic#IEntityType#Plugin">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.Logic.ProjectileType.projectilePool">
            <summary>
            Pool of the projectiles to be used instead of creating new projectiles.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.ProjectileType.enablePooling">
            <summary>
            If removed projectiles should be moved to pool instead of deleted.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.#ctor">
            <summary>
            Initializes the projectile type.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads projectile type from xml data of the package.
            </summary>
            <param name="xml">Xml element with the projectile type data.</param>
            <param name="package">Package that is the source of the xml.</param>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.ClearCache">
            <summary>
            Clears the level specific state from this type.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.ShootProjectile(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3,Urho.Quaternion,MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Creates projectile to shoot at the given target, or null if projectile of this type cannot be shot and hit the target.
            </summary>
            <param name="newID">The id to give the projectile.</param>
            <param name="level">Level in which to shoot the projectile.</param>
            <param name="player">Owner of the projectile.</param>
            <param name="position">Initial position of the projectile, from where the shooting is happening.</param>
            <param name="initRotation">Initial rotation of the projectile.</param>
            <param name="target">Target to shoot the projectile at.</param>
            <returns>Projectile that was shot at the target, or null if projectile cannot be shot and hit the target.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.ShootProjectile(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3,Urho.Quaternion,Urho.Vector3)">
            <summary>
            Creates projectile to shoot with the given initial movement, or null if projectile of this type cannot be shot with the given movement.
            </summary>
            <param name="newID">The id to give the projectile.</param>
            <param name="level">Level in which to shoot the projectile.</param>
            <param name="player">Owner of the projectile.</param>
            <param name="position">Initial position of the projectile, from where the shooting is happening.</param>
            <param name="initRotation">Initial rotation of the projectile.</param>
            <param name="movement">Initial movement vector of the projectile</param>
            <returns>Projectile that was shot with the given movement, or null if projectile cannot be shot with the given movement.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.GetNewInstancePlugin(MHUrho.Logic.IProjectile,MHUrho.Logic.ILevelManager)">
            <summary>
            Returns new instance plugin to control the <paramref name="projectile"/>.
            </summary>
            <param name="projectile">The projectile that will be controlled by the instance plugin.</param>
            <param name="level">The level in which the projectile is.</param>
            <returns>Instance plugin to control the given <paramref name="projectile"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.GetInstancePluginForLoading(MHUrho.Logic.IProjectile,MHUrho.Logic.ILevelManager)">
            <summary>
            Returns an instance plugin to control the <paramref name="projectile"/> in the <paramref name="level"/>.
            The plugin will load all it's state from stored data.
            </summary>
            <param name="projectile">Projectile to control.</param>
            <param name="level">Level in which the projectile is.</param>
            <returns>Instance plugin that will expect data for loading.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.IsInRange(Urho.Vector3,MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            If the <paramref name="target"/> can be hit when shooting from <paramref name="source"/>.
            </summary>
            <param name="source">The shooting position.</param>
            <param name="target">Target to hit.</param>
            <returns>True if the target can be hit, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.Dispose">
            <summary>
            Releases all assets.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.ProjectileDespawn(MHUrho.Logic.Projectile)">
            <summary>
            Try despawn the projectile.
            </summary>
            <param name="projectile">Projectile to despawn.</param>
            <returns>True if the projectile should be pooled, false if the projectile should be completely removed.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.GetProjectile(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer,Urho.Vector3,Urho.Quaternion)">
            <summary>
            Gets a projectile from the pool and reinitializes it, if there are no projectiles in the pool, creates new projectile.
            </summary>
            <param name="newID">The new id to give to the projectile.</param>
            <param name="level">The level into which to reintroduce the projectile.</param>
            <param name="player">The owner of the projectile.</param>
            <param name="position">Position at which to spawn the projectile.</param>
            <param name="initRotation">Initial rotation of the projectile after the respawn.</param>
            <returns>Projectile ready to shoot.</returns>
        </member>
        <member name="M:MHUrho.Logic.ProjectileType.LoadError(System.String,System.Exception)">
            <summary>
            Logs message and throws a <see cref="T:MHUrho.Packaging.PackageLoadingException"/>
            </summary>
            <param name="message">Message to log and propagate via exception</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Always throws this exception</exception>
        </member>
        <member name="T:MHUrho.Logic.ResourceType">
            <summary>
            Represents a resource type loaded from package.
            Used mainly to identify values that belong to this resource type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.ResourceType.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ResourceType.Name">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ResourceType.Package">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.ResourceType.IconRectangle">
            <summary>
            Part of the <see cref="P:MHUrho.Packaging.GamePack.ResourceIconTexture"/> representing this type of players.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.ResourceType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads data of this resource type from the xml element from the package.
            </summary>
            <param name="xml">The xml element of the resource type.</param>
            <param name="package">The source package of the xml.</param>
        </member>
        <member name="M:MHUrho.Logic.ResourceType.ClearCache">
            <summary>
            Clears any cache state dependent on the current level
            </summary>
        </member>
        <member name="T:MHUrho.Logic.SavingException">
            <summary>
            Exception used when there is a problem during saving and serialization of the level.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Tile.ImageWidth">
            <summary>
            Width of the texture defining the appearance of the tile.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Tile.ImageHeight">
            <summary>
            Height of the texture defining the appearance of the tile.
            </summary>
        </member>
        <member name="T:MHUrho.Logic.Tile.Loader">
            <summary>
            Loader that loads the stored tile.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Tile.Loader.MHUrho#Logic#ITileLoader#Tile">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.Loader.Tile">
            <summary>
            Loading tile.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Tile.Loader.level">
            <summary>
            The level the tile is loading into.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Tile.Loader.map">
            <summary>
            The map the tile is part of.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Tile.Loader.storedTile">
            <summary>
            Holds the data of the tile between the steps of loading
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Tile.Loader.#ctor(MHUrho.Logic.LevelManager,MHUrho.WorldMap.Map,MHUrho.Storage.StTile)">
            <summary>
            Creates a loader that loads a tile from data stored in <paramref name="storedTile"/>.
            </summary>
            <param name="level">The level the tile is part of.</param>
            <param name="map">The map the tile is part of.</param>
            <param name="storedTile">Stored data of the tile.</param>
        </member>
        <member name="M:MHUrho.Logic.Tile.Loader.Save(MHUrho.Logic.Tile)">
            <summary>
            Stores the <paramref name="tile"/> in an instance of <see cref="T:MHUrho.Storage.StTile"/> for serialization.
            </summary>
            <param name="tile">The tile to save.</param>
            <returns>Data of the tile stored in an instance of <see cref="T:MHUrho.Storage.StTile"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.Tile.Loader.StartLoading">
            <summary>
            Loads everything apart from thigs referenced by ID
            
            After everything had it StartLoading called, call ConnectReferences on everything
            </summary>
            <param name="storedTile">Image of the tile</param>
            <param name="map">Map this tile is in</param>
            <returns>Partially initialized tile</returns>
        </member>
        <member name="M:MHUrho.Logic.Tile.Loader.ConnectReferences">
            <summary>
            Continues loading by connecting references
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Tile.Loader.FinishLoading">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Tile.Units">
            <summary>
            Units inside the tile
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Tile.Type">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.MapArea">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.MapLocation">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopLeft">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopRight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomLeft">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomRight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.Center">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.Center3">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopLeft3">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopRight3">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomLeft3">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomRight3">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopLeftHeight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.TopRightHeight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomLeftHeight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.BottomRightHeight">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Tile.Map">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.Logic.Tile.units">
            <summary>
            List of units present on this tile, is NULL if there are no units on this tile
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Tile.#ctor(MHUrho.Storage.StTile,MHUrho.WorldMap.IMap)">
            <summary>
            Creates an instance of a tile based on the data stored in <paramref name="storedTile"/>.
            </summary>
            <param name="storedTile">The stored data of the tile.</param>
            <param name="map">The map the tile will be part of.</param>
        </member>
        <member name="M:MHUrho.Logic.Tile.#ctor(System.Int32,System.Int32,MHUrho.Logic.TileType,MHUrho.WorldMap.Map)">
            <summary>
            Creates new instance of tile.
            </summary>
            <param name="x">X coordinate of the tile position.</param>
            <param name="y">Z coordinate of the tile position.</param>
            <param name="tileType">Type of the tile.</param>
            <param name="map">The map this tile belongs to.</param>
        </member>
        <member name="M:MHUrho.Logic.Tile.GetLoader(MHUrho.Logic.LevelManager,MHUrho.WorldMap.Map,MHUrho.Storage.StTile)">
            <summary>
            Returns a loader that will load the tile from the <paramref name="storedTile"/>.
            </summary>
            <param name="level">The level the tile is part of.</param>
            <param name="map">The map the tile is part of.</param>
            <param name="storedTile">The stored data of the tile.</param>
            <returns>The loader that will load the tile from the stored data.</returns>
        </member>
        <member name="M:MHUrho.Logic.Tile.Save">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.AddUnit(MHUrho.Logic.IUnit)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.RemoveUnit(MHUrho.Logic.IUnit)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.SetBuilding(MHUrho.Logic.IBuilding)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.RemoveBuilding(MHUrho.Logic.IBuilding)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.ChangeType(MHUrho.Logic.TileType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.ChangeTopLeftHeight(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.SetTopLeftHeight(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.CornerHeightChange">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.GetHeightAt(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.GetHeightAt(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="F:MHUrho.Logic.Tile.NeighborDiff">
            <summary>
            List of differences of neighbor coordinates.
            For easier implementation of <see cref="M:MHUrho.Logic.Tile.GetNeighbours"/>.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Tile.GetNeighbours">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Tile.CanChangeCornerHeight(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MHUrho.Logic.TileType">
            <summary>
            Represents a tile type loaded from the package.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.TileType.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.TileType.Name">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.TileType.Package">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.TileType.TextureCoords">
            <summary>
            Part of the tile texture corresponding to this tile type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.TileType.MinimapColor">
            <summary>
            Color of this tile type when displayed on the minimap.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.TileType.IconRectangle">
            <summary>
            Part of the <see cref="P:MHUrho.Packaging.GamePack.TileIconTexture"/> corresponding to this tile type.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.TileType.imagePath">
            <summary>
            Path to the image containing the tile type appearance.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.TileType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads the tile type data from Xml element.
            </summary>
            <param name="xml">The xml element containing the data of this tile type</param>
            <param name="package">The source package of the Xml.</param>
        </member>
        <member name="M:MHUrho.Logic.TileType.ClearCache">
            <summary>
            Clears any cache state dependent on the current level
            </summary>
        </member>
        <member name="M:MHUrho.Logic.TileType.SetTextureCoords(Urho.Rect)">
            <summary>
            Called by map, after constructiong the one big texture out of all the tileType images
            </summary>
            <param name="coords">Coords of the image in the map texture</param>
        </member>
        <member name="M:MHUrho.Logic.TileType.GetImage">
            <summary>
            Gets the image containing the appearance of this tile type.
            </summary>
            <returns>The image containing the appearance of this tile type.</returns>
        </member>
        <member name="T:MHUrho.Logic.Unit">
            <summary>
            Class representing unit, every action you want to do with the unit should go through this class
            </summary>
        </member>
        <member name="T:MHUrho.Logic.Unit.Loader">
            <summary>
            Loads a stored unit.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Unit.Loader.Unit">
            <summary>
            Loading unit.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Unit.Loader.loadingUnit">
            <summary>
            Loading unit.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Unit.Loader.defComponentLoaders">
            <summary>
            The loaders of the default components that were stored with the units.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Unit.Loader.level">
            <summary>
            The level the unit is being loaded into.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Unit.Loader.type">
            <summary>
            The type of the loading unit.
            </summary>
        </member>
        <member name="F:MHUrho.Logic.Unit.Loader.storedUnit">
            <summary>
            Holds the image of this unit between the steps of loading
            After the last step, is set to null to free the resources
            In game is null
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.#ctor(MHUrho.Logic.LevelManager,MHUrho.Storage.StUnit)">
            <summary>
            Loads unit component from <paramref name="storedUnit"/> and all other needed components
            </summary>
            <param name="level"></param>
            <param name="storedUnit">stored unit</param>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.CreateNew(System.Int32,MHUrho.Logic.UnitType,MHUrho.Logic.ILevelManager,MHUrho.Logic.ITile,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance of the <see cref="F:MHUrho.Logic.Unit.Loader.loadingUnit"/> component and ads it to the <paramref name="unitNode"/>
            Also adds the unit as PassingUnit to <paramref name="tile"/>
            </summary>
            <param name="id">The unique identifier of the unit, must be unique among other units</param>
            <param name="level">LevelManager of the level into which the unit is spawning</param>
            <param name="type">type of the unit</param>
            <param name="tile">tile where the unit will spawn</param>
            <param name="rotation">Initial rotation of the unit</param>
            <param name="player">owner of the unit</param>
            <returns>the unit component, already added to the node, or null if the unit cannot be spawned on the <paramref name="tile"/></returns>
            <exception cref="T:MHUrho.Logic.CreationException">Throws an exception when unit creation fails</exception>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.Save(MHUrho.Logic.Unit)">
            <summary>
            Stores the unit state in an instance of <see cref="T:MHUrho.Storage.StUnit"/> for serialization.
            </summary>
            <param name="unit">The unit to save.</param>
            <returns>Stored state of the unit.</returns>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.StartLoading">
            <summary>
            Loads ONLY the unit component of <paramref name="type"/> from <paramref name="storedUnit"/> and adds it to the <paramref name="legNode"/> 
            If you use this, you still need to add Model, Materials and other behavior to the unit
            </summary>
            <returns>Loaded unit component, already added to the node</returns>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.ConnectReferences">
            <summary>
            Continues loading by connecting references and loading components
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Unit.Loader.FinishLoading">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.Unit.UnitType">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Type">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Position">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Plugin">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Tile">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.UnitPlugin">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.AlwaysVertical">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Forward">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Backward">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Right">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Left">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Up">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.Unit.Down">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.#ctor(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.UnitType)">
            <summary>
            Initializes everything apart from the things referenced by their ID or position
            </summary>
            <param name="type">type of the loading unit</param>
        </member>
        <member name="M:MHUrho.Logic.Unit.#ctor(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.UnitType,MHUrho.Logic.ITile,MHUrho.Logic.IPlayer)">
            <summary>
            If you want to spawn new unit, call <see cref="!:LevelManager.SpawnUnit(Logic.UnitType,ITile,IPlayer)"/>
            
            Constructs new instance of Unit control component
            </summary>
            <param name="id">identifier unique between units </param>
            <param name="type">the type of the unit</param>
            <param name="tile">Tile where the unit spawned</param>
            <param name="player">Owner of the unit</param>
        </member>
        <member name="M:MHUrho.Logic.Unit.Save">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.Accept(MHUrho.Logic.IEntityVisitor)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.Accept``1(MHUrho.Logic.IEntityVisitor{``0})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.SetHeight(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.TileHeightChanged(MHUrho.Logic.ITile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.BuildingBuilt(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.BuildingDestroyed(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.MoveBy(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.MoveBy(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.MoveTo(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.MoveTo(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.FaceTowards(Urho.Vector3,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.RemoveFromLevel">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.HitBy(MHUrho.Logic.IEntity,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.Unit.System#IDisposable#Dispose">
            <summary>
            Removes the unit from level.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.Unit.OnUpdate(System.Single)">
            <summary>
            Handles scene update.
            </summary>
            <param name="timeStep">Time elapsed since the last scene update.</param>
        </member>
        <member name="T:MHUrho.Logic.UnitType">
            <summary>
            Class representing a type of units
            </summary>
        </member>
        <member name="P:MHUrho.Logic.UnitType.ID">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.UnitType.Name">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.UnitType.Package">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Logic.UnitType.Assets">
            <summary>
            The assets that will be added to every instance of unit of this type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.UnitType.IconRectangle">
            <summary>
            Part of the texture <see cref="P:MHUrho.Packaging.GamePack.UnitIconTexture"/> that corresponds to this unit type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.UnitType.Plugin">
            <summary>
            Type plugin of this unit type.
            </summary>
        </member>
        <member name="P:MHUrho.Logic.UnitType.MHUrho#Logic#IEntityType#Plugin">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Logic.UnitType.#ctor">
            <summary>
            Data has to be loaded after constructor by <see cref="!:Load(XElement, int, GamePack)"/>
            It is done this way to allow cyclic references during the Load method, so anything 
            that references this unitType back can get the reference during the loading of this instance
            </summary>
        </member>
        <member name="M:MHUrho.Logic.UnitType.#ctor(System.Int32,System.String,MHUrho.Packaging.GamePack,MHUrho.Packaging.AssetContainer,Urho.IntRect,MHUrho.Plugins.UnitTypePlugin)">
            <summary>
            Provided for construction of mock types for auxiliary uses.
            </summary>
            <param name="id">Identifier.</param>
            <param name="name">Name.</param>
            <param name="package">Package.</param>
            <param name="assets">Asset container.</param>
            <param name="iconRectangle">Icon rectangle in the <see cref="P:MHUrho.Packaging.GamePack.UnitIconTexture"/></param>
            <param name="plugin">Plugin.</param>
        </member>
        <member name="M:MHUrho.Logic.UnitType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads the standard data of the unitType from the xml
            
            THE STANDARD DATA cannot reference any other types, it would cause infinite cycles
            
            After this loading, you should register this type so it can be referenced, and then call
            <see cref="!:UnitType.ParseExtensionData(XElement, GamePack)"/>
            </summary>
            <param name="xml">xml element describing the type, according to <see cref="F:MHUrho.Packaging.PackageManager.XMLNamespace"/> schema</param>
            <param name="package">Package this unitType belongs to</param>
            <returns>UnitType with filled standard members</returns>
        </member>
        <member name="M:MHUrho.Logic.UnitType.ClearCache">
            <summary>
            Clears any cache state dependent on the current level
            </summary>
        </member>
        <member name="M:MHUrho.Logic.UnitType.CreateNewUnit(System.Int32,MHUrho.Logic.ILevelManager,MHUrho.Logic.ITile,Urho.Quaternion,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance of this unit type positioned at <paramref name="tile"/>.
            </summary>
            <param name="unitID">identifier unique between units.</param>
            <param name="level">Level where the unit is being created.</param>
            <param name="tile">Tile where the unit will spawn.</param>
            <param name="initRotation">Initial rotation of the unit after it is created.</param>
            <param name="player">Owner of the unit.</param>
            <returns>New unit of this type.</returns>
        </member>
        <member name="M:MHUrho.Logic.UnitType.GetNewInstancePlugin(MHUrho.Logic.IUnit,MHUrho.Logic.ILevelManager)">
            <summary>
            Gets new instance plugin to control the <paramref name="unit"/> in the <paramref name="level"/>.
            </summary>
            <param name="unit">The unit that will be controlled by the plugin.</param>
            <param name="level">The level the unit is in.</param>
            <returns>Instance plugin that will control the <paramref name="unit"/>.</returns>
        </member>
        <member name="M:MHUrho.Logic.UnitType.GetInstancePluginForLoading(MHUrho.Logic.IUnit,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin to control the <paramref name="unit"/> that will load it's state from
            the stored data of the unit.
            </summary>
            <param name="unit">The unit to control.</param>
            <param name="level">The level the unit is in.</param>
            <returns>Instance plugin that expects it will be given the stored data to load.</returns>
        </member>
        <member name="M:MHUrho.Logic.UnitType.Dispose">
            <summary>
            Releases assets.
            </summary>
        </member>
        <member name="M:MHUrho.Logic.UnitType.LoadError(System.String,System.Exception)">
            <summary>
            Logs message and throws a <see cref="T:MHUrho.Packaging.PackageLoadingException"/>
            </summary>
            <param name="message">Message to log and propagate via exception</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Always throws this exception</exception>
        </member>
        <member name="P:MHUrho.MHUrhoApp.FileManager">
            <summary>
            File manager set by system specific startup code.
            Has to be static for Android startup.
            </summary>
        </member>
        <member name="P:MHUrho.MHUrhoApp.StartupArgs">
            <summary>
            Startup options (command line options) set by system specific startup code.
            Has to be static for Android startup.
            </summary>
        </member>
        <member name="M:MHUrho.MHUrhoApp.InvokeOnMainSafe(System.Action)">
            <summary>
            Invokes <paramref name="action"/> in main thread, does not deadlock even when called from the main thread
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MHUrho.Packaging.AssetContainer.FromXml(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Creates a container for assets based on the description in he <paramref name="assetsElement"/>.
            </summary>
            <param name="assetsElement">XML element describing the assets to load.</param>
            <param name="package">Package to load the assets from.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assetsElement"/> is null or there is some internal error</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assetsElement"/> does not conform to the xml schema or there is some internal error</exception>
            <exception cref="T:MHUrho.Packaging.ResourceLoadingException">Thrown when the resource described by the value of <paramref name="assetsElement"/> could not be loaded</exception>
        </member>
        <member name="M:MHUrho.Packaging.AssetContainer.Check(System.Xml.Linq.XElement)">
            <summary>
            
            </summary>
            <param name="assetsElement"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assetsElement"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assetsElement"/> xml element is not the <see cref="!:EntityXml.Inst.Assets"/> element</exception>
        </member>
        <member name="M:MHUrho.Packaging.AssetContainer.CheckWithType(System.Xml.Linq.XElement,System.String)">
            <summary>
            
            </summary>
            <param name="assetsElement"></param>
            <param name="wantedType"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assetsElement"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assetsElement"/> xml element is not the <see cref="!:EntityXml.Inst.Assets"/> element
            or the type attribute is not <paramref name="wantedType"/></exception>
        </member>
        <member name="M:MHUrho.Packaging.FilePrefabAssetContainer.GetPath(System.Xml.Linq.XElement)">
            <summary>
            
            </summary>
            <param name="assetsElement"></param>
            <exception cref="T:System.IO.IOException">When the file specified by the path in the <see cref="!:AssetsElementXml.Inst.Path"/> cannot be opened</exception>
        </member>
        <member name="M:MHUrho.Packaging.XmlPrefabAssetContainer.#ctor(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            
            </summary>
            <param name="assetsElement"></param>
            <exception cref="!:ResourceNotFoundException">Thrown when the xml prefab file could not be found</exception>
        </member>
        <member name="M:MHUrho.Packaging.BinaryPrefabAssetContainer.#ctor(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads a binary prefab based on the <paramref name="assetsElement"/>.
            </summary>
            <param name="assetsElement">XML containing the path to the binary prefab.</param>
            <param name="package">GamePack of the level.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assetsElement"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assetsElement"/> xml element is not valid, either is not the <see cref="!:EntityXml.Inst.Assets"/> element
            or has a wrong type specified</exception>
            <exception cref="T:System.IO.IOException">When the file specified by the path in the <see cref="!:AssetsElementXml.Inst.Path"/> cannot be opened</exception>
            <exception cref="T:MHUrho.Packaging.ResourceLoadingException"> Thrown when the file could not be found </exception>
        </member>
        <member name="M:MHUrho.Packaging.ItemsAssetContainer.StaticModelLoader.CreateStaticModel(Urho.Model,MHUrho.Packaging.MaterialWrapper)">
            <summary>
            Provides derived classes with the ability to construct an instance of StaticModelLoader
            </summary>
            <param name="model"></param>
            <param name="material"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Packaging.ItemsAssetContainer.AnimatedModelLoader.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads animated model based on the descriptio in the XML <paramref name="element"/>.
            </summary>
            <param name="element">XML describing the animated model.</param>
            <param name="package">GamePackage of the level.</param>
            <returns>Loader with the loaded model.</returns>
            <exception cref="T:System.ArgumentNullException">When the <paramref name="element"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="element"/> does not conform to the xml schema</exception>
            <exception cref="T:MHUrho.Packaging.ResourceLoadingException">Thrown when either the model or material resource could not be loaded</exception>
        </member>
        <member name="M:MHUrho.Packaging.ItemsAssetContainer.ScaleLoader.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads a scale from given XML.
            </summary>
            <param name="element">XML describing the scale.</param>
            <param name="package">Source package of the XML.</param>
            <returns>Loaded scale.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="element"/> is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="element"/> does not conform to the xml schema</exception>
        </member>
        <member name="M:MHUrho.Packaging.ItemsAssetContainer.CollisionShapeLoader.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads collision shape described by the XML <paramref name="element"/>.
            </summary>
            <param name="element">XML describing the collision shape.</param>
            <param name="package">Source of the XML.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="element"/> is null</exception>
            <exception cref="T:System.ArgumentException">Throw when the <paramref name="element"/> does not conform to the xml schema</exception>
        </member>
        <member name="M:MHUrho.Packaging.ItemsAssetContainer.#ctor(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Creates container for assets described item by item in the package XML.
            </summary>
            <param name="assetsElement">The description of the assets.</param>
            <param name="package">Source GamePack</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="assetsElement"/> is null or there is internal error</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assetsElement"/> does not conform t the xml schema</exception>
            <exception cref="T:MHUrho.Packaging.ResourceLoadingException">Thrown when one of the referenced resources could not be loaded</exception>
        </member>
        <member name="T:MHUrho.Packaging.GamePack">
            <summary>
            Class representing loaded game package.
            Contains all loaded types, textures etc.
            Implements the loading of package into the running game.
            Provides API to get references to types, either by ID or by name.
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.GamePack.DirectoryPath">
             <summary>
             Path to the base directory of this package
            
             This is the directory where the package xml file is.
             </summary>
        </member>
        <member name="P:MHUrho.Packaging.GamePack.RootedDirectoryPath">
            <summary>
            See <see cref="P:MHUrho.Packaging.GamePack.DirectoryPath"/>
            </summary>
        </member>
        <member name="F:MHUrho.Packaging.GamePack.data">
            <summary>
            Used during loading to enable Type plugins requesting yet unloaded types to load them on request
            Circular loading is prevented by spliting it between instance creation, which does not need any types,
            and plugin loading, which may request other types, but the instance is already loaded, so others can request the type
            </summary>
        </member>
        <member name="F:MHUrho.Packaging.GamePack.levelSavingDirPath">
             <summary>
             Directory path to save level prototypes in
            
             Relative to the <see cref="P:MHUrho.Packaging.GamePack.DirectoryPath"/> directory
             </summary>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.Load(System.String,MHUrho.Packaging.GamePackRep,System.Xml.Schema.XmlSchemaSet,MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            Starts a task loading new game pack from XML file at <paramref name="pathToXml"/>,
            represented by <paramref name="gamePackRep"/>.
            You can watch the progress of loading by providing <paramref name="loadingProgress"/>, which will be updated from 0 to 100%.
            </summary>
            <param name="pathToXml">Path to the XML file describing the Game pack</param>
            <param name="gamePackRep">Representant of the GamePack</param>
            <param name="schemas">Schemas to validate the loaded XML file with.</param>
            <param name="loadingProgress">Optional loading progress watcher, which will be updated from 0 to 100%.</param>
            <returns>A task representing the loading of the gamePack</returns>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the package loading failed</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetTileType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.TileType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.TileType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.TileType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when argument is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetTileType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.TileType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.TileType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.TileType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetUnitType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.UnitType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.UnitType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.UnitType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetUnitType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.UnitType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.UnitType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.UnitType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetBuildingType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.BuildingType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.BuildingType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.BuildingType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetBuildingType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.BuildingType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.BuildingType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.BuildingType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetProjectileType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.ProjectileType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.ProjectileType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.ProjectileType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetProjectileType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.ProjectileType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.ProjectileType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.ProjectileType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetResourceType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.ResourceType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.ResourceType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.ResourceType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetResourceType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.ResourceType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.ResourceType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.ResourceType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetPlayerType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.PlayerType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.PlayerType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.PlayerType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetPlayerType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.PlayerType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.PlayerType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.PlayerType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetPlayersWithTypeCategory(MHUrho.Logic.PlayerTypeCategory)">
             <summary>
             Returns every <see cref="T:MHUrho.Logic.PlayerType"/> with the <paramref name="category"/>.
            
             Mainly used to get all the AI player types, Human player types or Neutral player types.
             </summary>
             <param name="category">Category of the wanted playerTypes</param>
             <returns>Returns every <see cref="T:MHUrho.Logic.PlayerType"/> with the <paramref name="category"/>.</returns>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetLevelLogicType(System.String)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.LevelLogicType"/> with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the wanted <see cref="T:MHUrho.Logic.LevelLogicType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.LevelLogicType"/> with the given <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type of that name is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetLevelLogicType(System.Int32)">
            <summary>
            Returns the <see cref="T:MHUrho.Logic.LevelLogicType"/> with the given <paramref name="ID"/>.
            </summary>
            <param name="ID">ID of the wanted <see cref="T:MHUrho.Logic.LevelLogicType"/></param>
            <returns>Returns the <see cref="T:MHUrho.Logic.LevelLogicType"/> with the given <paramref name="ID"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when type with the given <paramref name="ID"/> is not present in this package</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetLevel(System.String)">
             <summary>
             Returns an instance of <see cref="T:MHUrho.Packaging.LevelRep"/> representing the level with the given <paramref name="name"/>.
            
             This instance can be used to manipulate the level.
             Throws an exception if a level with the given <paramref name="name"/> cannot be found.
             Alternatively you can use <see cref="M:MHUrho.Packaging.GamePack.TryGetLevel(System.String,MHUrho.Packaging.LevelRep@)"/> to check the existence of the level.
             </summary>
             <param name="name">Name of the wanted level.</param>
             <returns>Returns an instance of <see cref="T:MHUrho.Packaging.LevelRep"/> representing the level with the given <paramref name="name"/>.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown when a level with the given <paramref name="name"/> cannot be found.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the given <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.TryGetLevel(System.String,MHUrho.Packaging.LevelRep@)">
             <summary>
             Gets an instance of <see cref="T:MHUrho.Packaging.LevelRep"/> representing the level with the given <paramref name="name"/> if
             such level exists.
            
             Alternatively, you can use <see cref="M:MHUrho.Packaging.GamePack.GetLevel(System.String)"/> to be informed by exception if the level is not present.
             </summary>
             <param name="name">Name of the wanted level.</param>
             <param name="value">If return value is true, contains the <see cref="T:MHUrho.Packaging.LevelRep"/> representing the level with the given <paramref name="name"/></param>
             <returns>True if level with the given <paramref name="name"/> was found,
             and sets the <paramref name="value"/> to the <see cref="T:MHUrho.Packaging.LevelRep"/> representing the level,
             or returns false if no level with this <paramref name="name"/> exists.</returns>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.SaveLevelPrototype(MHUrho.Packaging.LevelRep,System.Boolean)">
            <summary>
            Saves the <paramref name="level"/> and adds it to the choice of levels for this gamePack
            If there is another level with the same name, and the <paramref name="overrideLevel"/> is not set, throws InvalidOperationException
            
            Before saving level without the <paramref name="overrideLevel"/> flag, you should check that there is no level with the same name
            Use <see cref="M:MHUrho.Packaging.GamePack.TryGetLevel(System.String,MHUrho.Packaging.LevelRep@)"/>
            </summary>
            <param name="level"></param>
            <param name="overrideLevel"></param>
            <exception cref="T:System.InvalidOperationException">Thrown when a level with the same name as <paramref name="level"/> already exists and the <paramref name="overrideLevel"/> is not set</exception>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when we could not open or write to the package file.</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.RemoveLevel(MHUrho.Packaging.LevelRep)">
             <summary>
             Removes the <paramref name="level"/> from this package.
            
             Also removes the data of the level.
             </summary>
             <param name="level">Representant of the level to remove.</param>
             <exception cref="T:System.ArgumentException">Thrown when the <paramref name="level"/> is not part of this package.</exception>
             <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the package file could not be opened, read or written.</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.GetLevelProtoSavePath(System.String)">
             <summary>
             Generates a path to the file to which the level should be saved.
             This path is derived from the given <paramref name="levelName"/>,
              but is made unique if any levels with the same or similar name already exist.
            
             The path is relative to the <see cref="P:MHUrho.Packaging.GamePack.DirectoryPath"/>
             </summary>
             <param name="levelName">Name of the level the path is for.</param>
             <returns>Returns the path to the file to which the level should be saved.</returns>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.UnLoad">
            <summary>
            Alias of <see cref="M:MHUrho.Packaging.GamePack.Dispose"/>
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.ClearCaches">
            <summary>
            Clears caches of all type in this package.
            Caches are used in types to enable reuse of instances of the type.
            Should be called on level end.
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.LoadXml(System.String,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Loads XML data from file at <paramref name="pathToXml"/> and
            validates this data against  <paramref name="schemas"/>.
            </summary>
            <param name="pathToXml">Path to the XML to load.</param>
            <param name="schemas">XSD schema to validate against.</param>
            <returns>Loaded XML document.</returns>
        </member>
        <member name="M:MHUrho.Packaging.GamePack.RemoveUnused``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Removes all keys whose value has ID 0, returns true if it deleted something, false if not
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary">removes items with Value.ID 0 from this dictionary</param>
            <returns>true if deleted something, false if didnt delete anything</returns>
        </member>
        <member name="T:MHUrho.Packaging.GamePackRep">
            <summary>
            Represents a game package that can be loaded into the currently running instance of the platform.
            Can start the loading of the package.
            This class is used to enable quick validation of the package integrity and partial load, to preserve memory.
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.GamePackRep.#ctor(System.String,MHUrho.Packaging.PackageManager,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            
            </summary>
            <param name="pathToXml"></param>
            <param name="packageManager"></param>
            <param name="schemas"></param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the package loading failed for any reason</exception>
        </member>
        <member name="M:MHUrho.Packaging.GamePackRep.LoadPack(System.Xml.Schema.XmlSchemaSet,MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            
            </summary>
            <param name="schemas"></param>
            <param name="loadingProgress"></param>
            <returns></returns>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the package loading failed</exception>
        </member>
        <member name="T:MHUrho.Packaging.IIdentifiable">
            <summary>
            Can be uniquely identified
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.IIdentifiable.ID">
            <summary>
            Unique identifier local to the <see cref="T:MHUrho.Packaging.GamePack"/> <see cref="P:MHUrho.Packaging.IIdentifiable.Package"/>
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.IIdentifiable.Name">
            <summary>
            Unique name local to the <see cref="T:MHUrho.Packaging.GamePack"/> <see cref="P:MHUrho.Packaging.IIdentifiable.Package"/>
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.IIdentifiable.Package">
            <summary>
            Source <see cref="T:MHUrho.Packaging.GamePack"/> in which the <see cref="P:MHUrho.Packaging.IIdentifiable.ID"/> and <see cref="P:MHUrho.Packaging.IIdentifiable.Name"/> are unique
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.ILoadableType">
            <summary>
            Type that can be loaded from a package XML file
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.ILoadableType.Load(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Loads the type from the XML element <paramref name="xml"/>, which is taken from <paramref name="package"/> XML specification.
            </summary>
            <param name="xml">The XML element of the type.</param>
            <param name="package">Source package of the XML element</param>
        </member>
        <member name="M:MHUrho.Packaging.ILoadableType.ClearCache">
            <summary>
            Clears any cache of instances the type might have held.
            Provided to enable resource pooling.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelLoadingException">
            <summary>
            Exception representing a failure during loading.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep">
            <summary>
            This class represents a level that is available in a package.
            This level may be loaded for playing or for editing.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.State">
            <summary>
            Represents possible states the level can be in.
            Every state represents a source of the data, either generated, loaded from prototype or loaded from saved game
            and the current state the level is in.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.NewlyCreated">
            <summary>
            Represents level that was created but not yet loaded and generated for editing.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.Prototype">
            <summary>
            Level that was stored from editor and can be played from scratch.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.Editing">
            <summary>
            Level that is currently loaded for editing.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.Playing">
            <summary>
            Level that is currently being played.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.ClonedPrototype">
            <summary>
            Created when level prototype is loaded for editing
            If the prototype was loaded without changing the name, the old level will be overwritten on the first save
            If the prototype was loaded with new name, new level will be created
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.ClonedEditing">
            <summary>
            State of LevelRep after cloning editing level
            Both the original and this copy point to the same running level
            Acts only as a temporary clone, until it is saved or discarded
            After saving, changes to LevelPrototype
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.LevelRep.LoadedSaved">
            <summary>
            Level that was loaded from a saved game in the middle of playing the level.
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.#ctor(MHUrho.Packaging.LevelRep,System.String,System.String,System.String)">
            <summary>
            Creates clone with new name, description and thumbnail for the SaveAs call
            </summary>
            <param name="other"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="thumbnailPath"></param>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.#ctor(MHUrho.Packaging.GamePack,System.String,MHUrho.Storage.StLevel)">
            <summary>
            Representation for temporary level, where the proper LevelRep was deleted from the package,
            but a save from that level still exists
            </summary>
            <param name="gamePack"></param>
            <param name="storedLevelPath"></param>
            <param name="storedLevel"></param>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.GetFromSavedGame(MHUrho.Packaging.PackageManager,System.String,MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            
            </summary>
            <param name="storedLevelPath"></param>
            <param name="progressWatcher">Watcher that will be watching progress of this method, from 0 to 100%</param>
            <returns></returns>
            <exception cref="T:MHUrho.Packaging.LevelLoadingException">Thrown when the loading of the saved level failed</exception>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.SaveToGamePack(System.Boolean)">
            <summary>
            Saves the current level to the <see cref="P:MHUrho.Packaging.LevelRep.GamePack"/>
            </summary>
            <param name="overrideLevel">Override existing level with the same name.</param>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the level could not be saved to the package</exception>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.GetSaveFromPackagePath(System.String,MHUrho.Packaging.GamePack)">
            <summary>
            Loads serialized level in the form of <see cref="T:MHUrho.Storage.StLevel"/> from <paramref name="path"/>
            </summary>
            <param name="path">Relative path based in <see cref="P:MHUrho.Packaging.GamePack.DirectoryPath"/> of the owning gamePack</param>
            <param name="package">Package from which the path is based</param>
            <returns></returns>
            <exception cref="T:System.Exception">May throw exceptions on failure, will be caught higher</exception>
        </member>
        <member name="M:MHUrho.Packaging.LevelRep.GetSaveFromDynamicPath(System.String,MHUrho.FileManager)">
            <summary>
            Loads serialized level in the form of <see cref="T:MHUrho.Storage.StLevel"/> from <paramref name="path"/>
            as a relative path inside the dynamic directory.
            </summary>
            <param name="path">Path to load the level from.</param>
            <param name="files">File management system.</param>
            <returns>Stored level.</returns>
            <exception cref="T:System.Exception">May throw exceptions on failure, will be caught higher</exception>
        </member>
        <member name="T:MHUrho.Packaging.IProgressNotifier">
            <summary>
            Consumer end of the progress watching.
            </summary>
        </member>
        <member name="E:MHUrho.Packaging.IProgressNotifier.TextUpdate">
            <summary>
            Invoked when a text update is sent.
            </summary>
        </member>
        <member name="E:MHUrho.Packaging.IProgressNotifier.PercentageUpdate">
            <summary>
            Invoked when a percentage update is sent.
            </summary>
        </member>
        <member name="E:MHUrho.Packaging.IProgressNotifier.Finished">
            <summary>
            Invoked when the process is finished.
            </summary>
        </member>
        <member name="E:MHUrho.Packaging.IProgressNotifier.Failed">
            <summary>
            Invoked when the process failed, provides an error message.
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.IProgressNotifier.Text">
            <summary>
            The last text update.
            </summary>
        </member>
        <member name="P:MHUrho.Packaging.IProgressNotifier.Percentage">
            <summary>
            The last percetnage update value.
            </summary>
        </member>
        <member name="T:MHUrho.Packaging.IProgressEventWatcher">
            <summary>
            Producer end of progress watching.
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendTextUpdate(System.String)">
            <summary>
            Sends text updates with the <paramref name="newText"/> as the value.
            </summary>
            <param name="newText">The text update value.</param>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendPercentageUpdate(System.Double)">
            <summary>
            Sends a percentage update with the value changed by <paramref name="change"/> from the previous update.
            </summary>
            <param name="change">The change of the progress of the process.</param>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendUpdate(System.Double,System.String)">
            <summary>
            Sends combined text and percentage update.
            </summary>
            <param name="percentageChange">The change of percentage progress.</param>
            <param name="newText">The text value of the update.</param>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendFinished">
            <summary>
            Sends update that the process finished.
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendSubsectionFinished(MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            Sends update that part of the process finished.
            </summary>
            <param name="subsection">The watcher for the part that finished.</param>
        </member>
        <member name="M:MHUrho.Packaging.IProgressEventWatcher.SendFailed(System.String)">
            <summary>
            Sends update that the process failed.
            </summary>
            <param name="message">Message describing the failure.</param>
        </member>
        <member name="T:MHUrho.Packaging.ProgressWatcher">
            <summary>
            Implementation of the process progress watching.
            </summary>
        </member>
        <member name="F:MHUrho.Packaging.ProgressWatcher.parent">
            <summary>
            Parent process that this process is part of.
            </summary>
        </member>
        <member name="F:MHUrho.Packaging.ProgressWatcher.subsectionSize">
            <summary>
            Size of this process in the parent process.
            </summary>
        </member>
        <member name="E:MHUrho.Packaging.ProgressWatcher.TextUpdate">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Packaging.ProgressWatcher.PercentageUpdate">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Packaging.ProgressWatcher.Finished">
            <inheritdoc />
        </member>
        <member name="E:MHUrho.Packaging.ProgressWatcher.Failed">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Packaging.ProgressWatcher.Text">
            <inheritdoc />
        </member>
        <member name="P:MHUrho.Packaging.ProgressWatcher.Percentage">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.#ctor(MHUrho.Packaging.IProgressEventWatcher,System.Double)">
            <summary>
            Creates a progress watcher.
            Can be used to watch a subsection from 0 to 100%, in which case it will send updates to a <paramref name="parent"/> scaled by <paramref name="size"/>
            </summary>
            <param name="parent">Parent loading event watcher</param>
            <param name="subsectionSize">Size of the subsection in relation to the total progress, range 0-100</param>
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendPercentageUpdate(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendTextUpdate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendUpdate(System.Double,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendFinished">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendFailed(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.ProgressWatcher.SendSubsectionFinished(MHUrho.Packaging.IProgressEventWatcher)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.Packaging.SimpleMaterial.#ctor(System.String,MHUrho.Packaging.GamePack)">
            <summary>
            Loads simple material from the given path.
            </summary>
            <param name="materialPath">Path to the simple material.</param>
            <param name="package">Source package.</param>
            <exception cref="!:IOException"/>
        </member>
        <member name="T:MHUrho.Packaging.PackageManager">
            <summary>
            ResourceCache wrapper providing loading, unloading and downloading of GamePacks
            </summary>
        </member>
        <member name="F:MHUrho.Packaging.PackageManager.GamePackageSchemaPath">
            <summary>
            Path to the schema for Resource Pack Directory xml files
            </summary>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.ParseGamePackDir">
            <summary>
            Pulls data about the resource packs contained in this directory from XML file
            </summary>
            <returns>Array of package paths that could not be loaded</returns>
            <exception cref="T:MHUrho.Packaging.FatalPackagingException">Thrown when package directory loading completely failed, and the game can terminate</exception>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.LoadPackage(System.String,MHUrho.Packaging.IProgressEventWatcher)">
             <summary>
            	<para>Unloads the <see cref="P:MHUrho.Packaging.PackageManager.ActivePackage"/> if there is any
             and then loads the <see cref="T:MHUrho.Packaging.GamePack"/> represented by <paramref name="packageName"/></para>
            	
            
             <para>Optionally can signal loading progress if provided with <paramref name="loadingProgress"/></para>
             </summary>
             <param name="packageName">Name of the package to be loaded</param>
             <param name="loadingProgress">Optional watcher of the loading progress</param>
             <returns>A task that represents the asynchronous loading of the package</returns>
             <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the loading of the package failed</exception>
             <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="packageName"/> is null</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="packageName"/> is not present in the <see cref="P:MHUrho.Packaging.PackageManager.AvailablePacks"/></exception>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.LoadPackage(MHUrho.Packaging.GamePackRep,MHUrho.Packaging.IProgressEventWatcher)">
             <summary>
             <para>Unloads the <see cref="P:MHUrho.Packaging.PackageManager.ActivePackage"/> if there is any and then loads
             the package represented by <paramref name="package"/></para>
            
             <para>Optionally can signal loading progress if provided with <paramref name="loadingProgress"/></para>
             </summary>
             <param name="package">Representation of the package to be loaded</param>
             <param name="loadingProgress">Optional watcher of the loading progress</param>
             <returns>A task that represents the asynchronous loading of the package</returns>
             <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when the loading of the new package failed</exception>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.AddGamePack(System.String)">
            <summary>
            
            </summary>
            <param name="xmlRelativePath">Path of the xml file relative to the <see cref="P:MHUrho.Packaging.PackageManager.PackageDirectoryAbsolutePath"/></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:MHUrho.Packaging.FatalPackagingException"/>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException"/>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.RemoveGamePack(MHUrho.Packaging.GamePackRep)">
            <summary>
            
            </summary>
            <param name="gamePack"></param>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.LoadGamePackDirXml(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns>Validated xml file of game pack directory</returns>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:MHUrho.Packaging.PackageManager.WriteGamePackDir(System.Xml.Linq.XDocument,System.String)">
             <summary>
             Validates the <paramref name="document"/> and writes it to the file at <paramref name="path"/>
            
             If the <paramref name="document"/> is invalid, throws <see cref="T:System.Xml.Schema.XmlSchemaValidationException"/>
             If the file IO cannot be processed, throws some child of <see cref="T:System.IO.IOException"/>
             </summary>
             <param name="document"></param>
             <param name="path"></param>
             <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:MHUrho.PathFinding.AStar.AStarAlg.Cutoff">
             <summary>
             Cuts off any nodes that are more than <see cref="P:MHUrho.PathFinding.AStar.AStarAlg.Cutoff"/>
             farther away in the game world than the closest we have got.
            
             50 is size of a chunk, which is enough.
             Can be tweeked later.
             </summary>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.AStarAlg.FindPath(Urho.Vector3,MHUrho.PathFinding.INode,MHUrho.PathFinding.INodeDistCalculator)">
            <summary>
            Finds the fastest path through the map from units current possition to target
            </summary>
            <param name="target">Target coordinates</param>
            <returns>List of IntVector2s the unit should pass through</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.AStarAlg.MakePath(Urho.Vector3,MHUrho.PathFinding.AStar.Node)">
            <summary>
            Reconstructs the path when given the last Node
            </summary>
            <param name="target">Last Node of the path</param>
            <returns>Path in correct order, from first point to the last point</returns>
        </member>
        <member name="P:MHUrho.PathFinding.AStar.Node.Time">
            <summary>
            Time from start to the middle of the tile
            </summary>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.Node.GetWaypoints(MHUrho.PathFinding.AStar.NodeDistCalculator)">
            <summary>
            Returns waypoints to get from <see cref="!:previousNode"/> to this node
            </summary>
            <returns>Returns waypoints to get from <see cref="!:previousNode"/> to this node</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.Node.CreateEdge(MHUrho.PathFinding.INode,MHUrho.PathFinding.MovementType)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="movementType"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.Node.RemoveEdge(MHUrho.PathFinding.INode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetMinimalAproxTime(Urho.Vector3,Urho.Vector3)">
             <summary>
             Used as a heuristic for the A* algorithm
            
             It has to be admissible, which means it must not overestimate the time
             GetMinimalAproxTime has to always be lower than the optimal path time
            
             But the closer you get it to the optimal time, the faster the A* will run
            
             If it is not admissible, the returned path may not be optimal and the runtime of A* may be longer
            
             If the <paramref name="source"/> and <paramref name="target"/> are in the same Tile, it should return the optimal time
             as that will be used for the movement
             </summary>
             <param name="source"></param>
             <param name="target"></param>
             <returns></returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TILE node to <paramref name="target"/> TILE node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="movementType">Movement type from <paramref name="source"/> to <paramref name="target"/>.</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TEMP node to <paramref name="target"/> BUILDING node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TILE node to <paramref name="target"/> TEMP node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> BUILDING node to <paramref name="target"/> TILE node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> BUILDING node to <paramref name="target"/> BUILDING node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> BUILDING node to <paramref name="target"/> TEMP node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.ITileNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TEMP node to <paramref name="target"/> TILE node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.IBuildingNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TEMP node to <paramref name="target"/> BUILDING node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="M:MHUrho.PathFinding.AStar.NodeDistCalculator.GetTime(MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.ITempNode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets if it is possible to get from <paramref name="source"/> TEMP node to <paramref name="target"/> TEMP node,
             if true, then returns the time needed in <paramref name="time"/>
            </summary>
            <param name="source">Source node</param>
            <param name="target">Target node</param>
            <param name="time">Result time it will take to get from <paramref name="source"/> to <paramref name="target"/></param>
            <returns>If it is possible to get to the</returns>
        </member>
        <member name="T:MHUrho.PathFinding.ExceptionLoggingProxy">
            <summary>
            Logs and ignores any exceptions thrown by the IPathFindAlg
            </summary>
        </member>
        <member name="M:MHUrho.PathFinding.INode.CreateEdge(MHUrho.PathFinding.INode,MHUrho.PathFinding.MovementType)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="movementType"></param>
            <returns>Returns this INode for call chaining</returns>
        </member>
        <member name="M:MHUrho.PathFinding.INode.RemoveEdge(MHUrho.PathFinding.INode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns>Returns this INode for call chaining</returns>
        </member>
        <member name="M:MHUrho.PathFinding.INodeDistCalculator.GetTime(MHUrho.PathFinding.INode,MHUrho.PathFinding.INode,MHUrho.PathFinding.MovementType,System.Single@)">
            <summary>
            Gets time it will take to get from the <paramref name="source"/> node to <paramref name="target"/> node,
            returns false if target cannot be reached, returns true and the time in <paramref name="time"/> if the target can be reached
            </summary>
            <param name="source">Starting node</param>
            <param name="target">Target node</param>
            <param name="movementType">Type of movement between the two nodes.</param>
            <param name="time">Time it will get to reach the <paramref name="target"/> node from <paramref name="source"/> node in seconds</param>
            <returns>True if the <paramref name="target"/> node can be reached from the <paramref name="source"/> node</returns>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.FindPath(Urho.Vector3,MHUrho.PathFinding.INode,MHUrho.PathFinding.INodeDistCalculator)">
            <summary>
            Find a path between the <paramref name="source"/> position and the <paramref name="target"/> node.
            From <paramref name="source"/> position, the path will lead to the closest <see cref="T:MHUrho.PathFinding.INode"/> and then
            by a path to the <paramref name="target"/>.
            Distances will be calculated by the <paramref name="nodeDistCalculator"/>.
            </summary>
            <param name="source">Source position, from which the path should start.</param>
            <param name="target">Target node, to which the path should lead.</param>
            <param name="nodeDistCalculator">Calculator for distances between nodes.</param>
            <returns>A path from <paramref name="source"/> position to the <paramref name="target"/> node, or null if path is not possible.</returns>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.GetTileList(Urho.Vector3,MHUrho.PathFinding.INode,MHUrho.PathFinding.INodeDistCalculator)">
            <summary>
            Gets list of tiles the path crosses when going from <paramref name="source"/> to the <paramref name="target"/> node.
            From <paramref name="source"/> position, the path will lead to the closest <see cref="T:MHUrho.PathFinding.INode"/> and then
            by a path to the <paramref name="target"/>.
            Distances will be calculated by the <paramref name="nodeDistCalculator"/>
            </summary>
            <param name="source">Source position, from which the path should start.</param>
            <param name="target">Target node, to which the path should lead.</param>
            <param name="nodeDistCalculator">Calculator for distances between nodes.</param>
            <returns>A list of tiles the path from <paramref name="source"/> to <paramref name="target"/> crosses, or null if a path is not possible.</returns>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.GetClosestNode(Urho.Vector3)">
            <summary>
            Gets closest node to the world <paramref name="position"/>. Is used in <see cref="M:MHUrho.PathFinding.IPathFindAlg.FindPath(Urho.Vector3,MHUrho.PathFinding.INode,MHUrho.PathFinding.INodeDistCalculator)"/>
            and <see cref="M:MHUrho.PathFinding.IPathFindAlg.GetTileList(Urho.Vector3,MHUrho.PathFinding.INode,MHUrho.PathFinding.INodeDistCalculator)"/> to get the closest node to the source position.
            </summary>
            <param name="position">Position in the game world.</param>
            <returns>A closest node to the <paramref name="position"/>.</returns>
            <exception cref="T:System.Exception">May throw exception on failure.</exception>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.GetTileNode(MHUrho.Logic.ITile)">
            <summary>
            Gets the <see cref="T:MHUrho.PathFinding.ITileNode"/> corresponding to the given <paramref name="tile"/>.
            </summary>
            <param name="tile">Tile, of which we want the <see cref="T:MHUrho.PathFinding.ITileNode"/>.</param>
            <returns>The <see cref="T:MHUrho.PathFinding.ITileNode"/> corresponding to the given <paramref name="tile"/>.</returns>
            <exception cref="T:System.Exception">May throw exception on failure.</exception>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.CreateBuildingNode(MHUrho.Logic.IBuilding,Urho.Vector3,System.Object)">
            <summary>
            Creates a building node in the pathfinding graph associated with the given <paramref name="building"/>
            at the given <paramref name="position"/>. Can be tagged by given <paramref name="tag"/> to better differentiate
            between nodes of the same <paramref name="building"/>.
            </summary>
            <param name="building">Building with which the new node should be associated.</param>
            <param name="position">Position of the new node in the game world.</param>
            <param name="tag">User defined tag that will be stored in the node.</param>
            <returns>The newly created node.</returns>
            <exception cref="T:System.Exception">May throw exception on failure.</exception>
        </member>
        <member name="M:MHUrho.PathFinding.IPathFindAlg.CreateTempNode(Urho.Vector3)">
            <summary>
            Creates a temporary node, which is not associated with any building or tile.
            </summary>
            <param name="position">Position of the new node in the game world.</param>
            <returns>The newly created node.</returns>
            <exception cref="T:System.Exception">May throw exception on failure.</exception>
        </member>
        <member name="M:MHUrho.PathFinding.ITileNode.GetEdgePosition(MHUrho.PathFinding.ITileNode)">
            <summary>
            Gets the position of the edge between this tile and the <paramref name="other"/> tile
            </summary>
            <param name="other">The other tile to which we want the edge</param>
            <returns>The position of the edge connecting the two tiles</returns>
        </member>
        <member name="F:MHUrho.PathFinding.Path.originalTime">
            <summary>
            Original time to TargetWaypoint on the call of <see cref="M:MHUrho.PathFinding.Path.WaypointReached(MHUrho.PathFinding.INodeDistCalculator)"/>
            </summary>
        </member>
        <member name="M:MHUrho.PathFinding.Path.CreateFrom(System.Collections.Generic.List{MHUrho.PathFinding.Waypoint},MHUrho.WorldMap.IMap)">
            <summary>
            
            </summary>
            <param name="waypoints">List of waypoints, where waypoints[0] is the current Position with time 0 and MovementType.None and there is at least one more waypoint as a target</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.Update(Urho.Vector3,System.Single,MHUrho.PathFinding.INodeDistCalculator)">
            <summary>
            Updates the current position of the entity on the path.
            </summary>
            <param name="newPosition">New position on the path.</param>
            <param name="secondsFromLastUpdate">Time since the last update in seconds.</param>
            <param name="nodeDistCalculator">Calculator to recalculate the time to next node.</param>
            <returns>True if the path is still viable, false if the path cannot be followed.</returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.WaypointReached(MHUrho.PathFinding.INodeDistCalculator)">
            <summary>
            
            </summary>
            <returns>If there was next waypoint to target, or this was the end</returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.GetEnumerator">
            <summary>
            Enumerates current position and the waypoints that were not yet reached
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.GetRestOfThePath">
            <summary>
            Gets the rest of the path, beginning with the current position and
            continuing with the remaining waypoints in the path
            </summary>
            <returns>The rest of the path beginning with the current position</returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.GetRestOfThePath(Urho.Vector3)">
            <summary>
            Gets the rest of the path, beginning with the current position,
            all positions offseted by <paramref name="offset"/>
            </summary>
            <param name="offset">Offset of every position along the path</param>
            <returns>The remaining part of the path, begining with the current position, all offseted by <paramref name="offset"/></returns>
        </member>
        <member name="M:MHUrho.PathFinding.Path.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerates the waypoints that were not yet reached
            </summary>
            <returns></returns>
        </member>
        <member name="P:MHUrho.PathFinding.Waypoint.MovementType">
             <summary>
             Type of movement to this waypoint
            
             The value is not checked, so it can store other values than only those defined by names
             </summary>
        </member>
        <member name="T:MHUrho.Plugins.BuildingInstancePlugin">
            <summary>
            Serves as a predecessor to every instance plugin for buildings.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.BuildingInstancePlugin.Building">
            <summary>
            The building this plugin is controlling.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.#ctor(MHUrho.Logic.ILevelManager,MHUrho.Logic.IBuilding)">
            <summary>
            Creates a new plugin in the given <paramref name="level"/> to control the given <paramref name="building"/>.
            </summary>
            <param name="level">The level the plugin is created into.</param>
            <param name="building">The building the plugin will control.</param>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.CanChangeTileHeight(System.Int32,System.Int32)">
            <summary>
            Asks the plugin if the tile height at [<paramref name="x"/>, <paramref name="y"/>] can be change.
            </summary>
            <param name="x">The x coord of the position to be changed.</param>
            <param name="y">The z coord of the position to be changed.</param>
            <returns>True if the height of the given position can be changed, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.TileHeightChanged(MHUrho.Logic.ITile)">
            <summary>
            Informs the plugin that the height of the <paramref name="tile"/> has changed.
            </summary>
            <param name="tile">The tile with the changed height.</param>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.GetHeightAt(System.Single,System.Single)">
            <summary>
            Gets the height of the building overriding the height of the terrain at this point.
            </summary>
            <param name="x">The X coordinate in th XZ plane.</param>
            <param name="y">The Y coordinate in the XZ plane.</param>
            <returns>Height of the building if we want to override the height of the terrain, null otherwise.</returns>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.GetFormationController(Urho.Vector3)">
            <summary>
            Gets a formation controller that can be used to position groups of units around the
            <paramref name="centerPosition"/> on the building.
            </summary>
            <param name="centerPosition">The center position to order the units around.</param>
            <returns>Formation controller if units can be ordered onto the building, null otherwise.</returns>
        </member>
        <member name="M:MHUrho.Plugins.BuildingInstancePlugin.OnHit(MHUrho.Logic.IEntity,System.Object)">
            <summary>
            Informs the plugin that the building was hit by the <paramref name="byEntity"/>,
             which added the data <paramref name="userData"/> to the message.
            </summary>
            <param name="byEntity">The entity that hit the building.</param>
            <param name="userData">The user data associated with the hit.</param>
        </member>
        <member name="T:MHUrho.Plugins.BuildingTypePlugin">
            <summary>
            Base class for building type plugins of packages.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.BuildingTypePlugin.CreateNewInstance(MHUrho.Logic.ILevelManager,MHUrho.Logic.IBuilding)">
            <summary>
            Creates new instance from scratch
            </summary>
            <param name="level">level in which the building is created</param>
            <param name="building">building Plugin class</param>
            <returns>New instance in default state</returns>
        </member>
        <member name="M:MHUrho.Plugins.BuildingTypePlugin.GetInstanceForLoading(MHUrho.Logic.ILevelManager,MHUrho.Logic.IBuilding)">
            <summary>
            Creates instance of <see cref="T:MHUrho.Plugins.BuildingInstancePlugin"/> that will be loaded by <see cref="!:BuildingInstancePlugin.LoadState(LevelManager, PluginDataWrapper)"/>
            </summary>
            <returns>New instance, that will be loaded in the next step</returns>
        </member>
        <member name="M:MHUrho.Plugins.BuildingTypePlugin.CanBuild(Urho.IntVector2,MHUrho.Logic.IPlayer,MHUrho.Logic.ILevelManager)">
            <summary>
            If a building of the type of this plugin can be built at the <paramref name="topLeftTileIndex"/> by the <paramref name="owner"/>.
            </summary>
            <param name="topLeftTileIndex">The position of the top left corner of the building.</param>
            <param name="owner">The owner of the building.</param>
            <param name="level">The level to build in.</param>
            <returns>True if the building can be built, false otherwise.</returns>
        </member>
        <member name="T:MHUrho.Plugins.EntityInstancePlugin">
            <summary>
            Base class for all entity instance plugins.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.EntityInstancePlugin.Entity">
            <summary>
            The controlled entity.
            </summary>
        </member>
        <member name="T:MHUrho.Plugins.InstancePlugin">
            <summary>
            Base class for all instance plugins.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.InstancePlugin.Level">
            <summary>
            Level this instance belongs to.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.InstancePlugin.OnUpdate(System.Single)">
            <summary>
            Called on each scene update.
            </summary>
            <param name="timeStep">Time elapsed since the last call of this method.</param>
        </member>
        <member name="M:MHUrho.Plugins.InstancePlugin.SaveState(MHUrho.Storage.PluginDataWrapper)">
             <summary>
             Saves the state of the plugin into <paramref name="pluginData"/>.
            
             This same <paramref name="pluginData"/> will then be provided on loading of the level to
             <see cref="M:MHUrho.Plugins.InstancePlugin.LoadState(MHUrho.Storage.PluginDataWrapper)"/> method.
             </summary>
             <param name="pluginData">Data storage for the plugin data.</param>
        </member>
        <member name="M:MHUrho.Plugins.InstancePlugin.LoadState(MHUrho.Storage.PluginDataWrapper)">
            <summary>
            Loads instance into the state saved in <paramref name="pluginData"/>.
            
            DO NOT LOAD the default components, that is done independently by
            the Entity class and the components themselfs, just load your own data
            
            The default components will be loaded and present on the <see cref="P:MHUrho.Logic.IEntity.Node"/>, so you 
            can get them by calling <see cref="M:MHUrho.Logic.IEntity.GetComponent``1"/>
            </summary>
            <param name="pluginData">stored state of the instance plugin</param>
            <returns>Instance loaded into saved state</returns>
        </member>
        <member name="T:MHUrho.Plugins.LevelLogicInstancePlugin">
            <summary>
            Base class for all level logic instance plugins.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicInstancePlugin.OnStart">
            <summary>
            Invoked just before the level stared, after everything is loaded and initialized.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicInstancePlugin.Initialize">
            <summary>
            Called after all platform instances of game objects are loaded.
            Equivalent to LoadState call, but on a level creation instead of loading.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicInstancePlugin.GetPathFindAlgFactory">
            <summary>
            Gets the factory for creating the pathFinding algorithm for the level.
            </summary>
            <returns>The factory for creating the pathFinding algorithm.</returns>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicInstancePlugin.GetToolManager(MHUrho.Logic.ILevelManager,MHUrho.Input.InputType)">
            <summary>
            Gets the tool manager which is responsible for managing tools.
            This tool manager decides which tools will be accessible to the user.
            </summary>
            <param name="levelManager">The level.</param>
            <param name="inputType">Input schema.</param>
            <returns>Tool manager for the current level.</returns>
        </member>
        <member name="T:MHUrho.Plugins.LevelLogicCustomSettings">
            <summary>
            This class encapsulates the access of the level plugin to the CustomSettings window on the LeveLSettingsScreen.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.LevelLogicCustomSettings.LoadFromSavedGame">
            <summary>
            This instance is given to the level when it is loaded from a game saved in play mode.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.LevelLogicTypePlugin.MaxNumberOfPlayers">
            <summary>
            Maximum number of players in the level controlled by this plugin.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.LevelLogicTypePlugin.MinNumberOfPlayers">
            <summary>
            Minimum number of players in the level controlled by this plugin.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicTypePlugin.GetCustomSettings(Urho.Gui.Window,MHUrho.MHUrhoApp)">
            <summary>
            Is called when user switches to setting up the level for playing, choosing players, teams, etc.
            Provides a window on the screen to put custom UIElements in, to enable getting input from user when setting up the level.
            The instance of <see cref="T:MHUrho.Plugins.LevelLogicCustomSettings"/> is then passed to the <see cref="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForNewPlaying(MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Logic.ILevelManager)"/> method.
            </summary>
            <param name="customSettingsWindow">The window for placing creator specified UI elements to get input from user.</param>
            <param name="app">Instance representing the current app.</param>
            <returns><see cref="T:MHUrho.Plugins.LevelLogicCustomSettings"/> or it's creator provided subtype, collecting the data from user events interactions with the <paramref name="customSettingsWindow"/>.
            Is subsequently passed to the <see cref="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForNewPlaying(MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Logic.ILevelManager)"/> method.</returns>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForNewPlaying(MHUrho.Plugins.LevelLogicCustomSettings,MHUrho.Logic.ILevelManager)">
            <summary>
            Creates instance plugin for the newly loaded level for playing.
            </summary>
            <param name="levelSettings">The instance returned from <see cref="M:MHUrho.Plugins.LevelLogicTypePlugin.GetCustomSettings(Urho.Gui.Window,MHUrho.MHUrhoApp)"/>.</param>
            <param name="level">The level that is currently being loaded.</param>
            <returns>New instance plugin for the given <paramref name="level"/>.</returns>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForEditorLoading(MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin for the <paramref name="level"/> being loaded for editing.
            </summary>
            <param name="level">The level currently loading for editing the plugin will be added to.</param>
            <returns>New instance plugin for the given <paramref name="level"/>.</returns>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForNewLevel(MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin for the <paramref name="level"/> that was newly generated into the default state.
            </summary>
            <param name="level">The newly generated level.</param>
            <returns>New instance plugin for the given <paramref name="level"/>.</returns>
        </member>
        <member name="M:MHUrho.Plugins.LevelLogicTypePlugin.CreateInstanceForLoadingToPlaying(MHUrho.Logic.ILevelManager)">
            <summary>
            Creates new instance plugin for the <paramref name="level"/> being loaded for playing from saved game.
            </summary>
            <param name="level">The level currently loading for playing from a saved game the plugin will be added to.</param>
            <returns>New instance plugin for the given <paramref name="level"/>.</returns>
        </member>
        <member name="T:MHUrho.Plugins.PlaceholderPlayerPluginType">
             <summary>
             Player plugin type used as a substitute for real player plugins during editing
            
             Used so that we can assume that plugin will never be null in player implementation.
             </summary>
        </member>
        <member name="P:MHUrho.Plugins.PlaceholderPlayerPluginType.Name">
            <summary>
            Name of the placeholder player type plugin should never be used.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.PlaceholderPlayerPluginType.ID">
            <summary>
            Id of the placeholder player type plugin should never be used.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.PlaceholderPlayerPluginType.CreateNewInstance(MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance of placeholder instance plugin that does nothing.
            </summary>
            <param name="level">Level.</param>
            <param name="player">The controlled player.</param>
            <returns>Placeholder instance plugin.</returns>
        </member>
        <member name="M:MHUrho.Plugins.PlaceholderPlayerPluginType.GetInstanceForLoading(MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance of placeholder instance plugin that does nothing.
            </summary>
            <param name="level">Level.</param>
            <param name="player">The controlled player.</param>
            <returns>Placeholder instance plugin.</returns>
        </member>
        <member name="T:MHUrho.Plugins.PlaceholderPlayerPluginInstance">
             <summary>
             Instance of the placeholder player that holds the place of real player plugins during level editing
            
             Used so that we can assume that plugin will never be null in player implementation.
             </summary>
        </member>
        <member name="T:MHUrho.Plugins.PlayerAIInstancePlugin">
            <summary>
            Base class for player AI instance plugins.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.PlayerAIInstancePlugin.Player">
            <summary>
            The player this plugin is controlling.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.Init(MHUrho.Logic.ILevelManager)">
             <summary>
             Initializes the player AI plugin on it's first loading into the level.
             During this call, all units, buildings and projectiles of this player should already be loaded and connected to this player.
             State of other players cannot is undefined.
            
             If there is a saved state of the player with the same plugin type, <see cref="M:MHUrho.Plugins.InstancePlugin.LoadState(MHUrho.Storage.PluginDataWrapper)"/>
             will be called instead.
             </summary>
             <param name="level">Current level into which this player is being loaded.</param>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.BuildingDestroyed(MHUrho.Logic.IBuilding)">
            <summary>
            Invoked when building owned by the <see cref="P:MHUrho.Plugins.PlayerAIInstancePlugin.Player"/> is destroyed.
            </summary>
            <param name="building">The destroyed building.</param>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.UnitKilled(MHUrho.Logic.IUnit)">
            <summary>
            Invoked when unit owned by the <see cref="P:MHUrho.Plugins.PlayerAIInstancePlugin.Player"/> is killed.
            </summary>
            <param name="unit">The killed unit.</param>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.UnitAdded(MHUrho.Logic.IUnit)">
            <summary>
            Invoked when new unit is added to the ownership of the <see cref="P:MHUrho.Plugins.PlayerAIInstancePlugin.Player"/>.
            </summary>
            <param name="unit">The newly added unit.</param>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.BuildingAdded(MHUrho.Logic.IBuilding)">
            <summary>
            Invoked when new building is added to the ownership of the <see cref="P:MHUrho.Plugins.PlayerAIInstancePlugin.Player"/>.
            </summary>
            <param name="building">The newly added building.</param>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAIInstancePlugin.ResourceAmountChanged(MHUrho.Logic.ResourceType,System.Double,System.Double)">
            <summary>
            Message sent when an amount of resource that player owns changes. This method should check if this
            change is possible and return the wanted new value.
            </summary>
            <param name="resourceType">Type of the resource the amount changed for.</param>
            <param name="currentAmount">Current amount of the resource.</param>
            <param name="requestedNewAmount">The requested new amount of the resource.</param>
            <returns>New amount of the resource.</returns>
        </member>
        <member name="T:MHUrho.Plugins.PlayerAITypePlugin">
            <summary>
            Base class for player AI type plugins.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAITypePlugin.CreateNewInstance(MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance plugin for freshly created player.
            </summary>
            <param name="level">The new level.</param>
            <param name="player">The platform representation of the player the new plugin will be controlling.</param>
            <returns>The new instance plugin.</returns>
        </member>
        <member name="M:MHUrho.Plugins.PlayerAITypePlugin.GetInstanceForLoading(MHUrho.Logic.ILevelManager,MHUrho.Logic.IPlayer)">
            <summary>
            Creates new instance plugin for player with saved state for this type of plugin.
            </summary>
            <param name="level">The loaded level.</param>
            <param name="player">The platform representation of the player the new plugin will be controlling.</param>
            <returns>The new instance plugin.</returns>
        </member>
        <member name="T:MHUrho.Plugins.ProjectileInstancePlugin">
            <summary>
            Base class for projectile instance plugins.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.ProjectileInstancePlugin.Projectile">
            <summary>
            The projectile controlled by this plugin.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileInstancePlugin.ReInitialize(MHUrho.Logic.ILevelManager)">
            <summary>
            Reinitializes this instance into default state, to allow for projectile pooling
            </summary>
            <param name="level">LevelManager to connect to other things</param>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileInstancePlugin.ShootProjectile(MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Starts the projectiles movement from it's current position towards the <paramref name="target"/>.
            </summary>
            <param name="target">The target to move to.</param>
            <returns>True if projectile can reach the target, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileInstancePlugin.ShootProjectile(Urho.Vector3)">
            <summary>
            Starts the projectiles movement from it's current position, with <paramref name="movement"/> as change in position per second.
            </summary>
            <param name="movement">Change of the position of the projectile per second..</param>
            <returns>True if projectile can be shot this way, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileInstancePlugin.OnEntityHit(MHUrho.Logic.IEntity)">
            <summary>
            Invoked when the <see cref="P:MHUrho.Plugins.ProjectileInstancePlugin.Projectile"/> hit's an entity.
            </summary>
            <param name="hitEntity">The entity that was hit.</param>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileInstancePlugin.OnTerrainHit">
            <summary>
            Invoked when projectile hits the terrain.
            </summary>
        </member>
        <member name="T:MHUrho.Plugins.ProjectileTypePlugin">
            <summary>
            Base class for projectile type plugins.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileTypePlugin.CreateNewInstance(MHUrho.Logic.ILevelManager,MHUrho.Logic.IProjectile)">
            <summary>
            Creates new instance from scratch
            </summary>
            <param name="level">level in which the building is created</param>
            <param name="projectile">projectile Plugin class</param>
            <returns>New instance in default state</returns>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileTypePlugin.GetInstanceForLoading(MHUrho.Logic.ILevelManager,MHUrho.Logic.IProjectile)">
            <summary>
            Creates instance of <see cref="T:MHUrho.Plugins.ProjectileInstancePlugin"/> that will be loaded by <see cref="!:ProjectileInstancePlugin.LoadState(ILevelManager, Projectile, PluginDataWrapper)"/>
            </summary>
            <returns>New instance, that will be loaded in the next step</returns>
        </member>
        <member name="M:MHUrho.Plugins.ProjectileTypePlugin.IsInRange(Urho.Vector3,MHUrho.DefaultComponents.IRangeTarget)">
            <summary>
            Decides if the <paramref name="target"/> is in range of this projectile when shot from the position <paramref name="source"/>.
            </summary>
            <param name="source">The source position of the projectile.</param>
            <param name="target">The target of the projectile.</param>
            <returns>True if projectile of this type can reach the target from the <paramref name="source"/> position, false otherwise.</returns>
        </member>
        <member name="T:MHUrho.Plugins.TypePlugin">
            <summary>
            Base class for all type plugins.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.TypePlugin.Name">
            <summary>
            The name of the type, should be identical to the one listed in the XML description.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.TypePlugin.ID">
            <summary>
            ID of the type, should be identical to the one listed in the XML description.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.TypePlugin.LoadTypePlugin``1(System.String,MHUrho.Packaging.GamePack,System.String,System.Int32,System.Xml.Linq.XElement)">
            <summary>
            Loads plugin from assembly at the <paramref name="relativeAssemblyPath"/> inheriting from type <typeparamref name="T"/>, with name <paramref name="typeName"/> and ID <paramref name="ID"/>,
            and initializes this type using <paramref name="extensionElement"/>.
            </summary>
            <typeparam name="T">Type the plugin should inherit from.</typeparam>
            <param name="relativeAssemblyPath">Path to the assembly relative to the package.</param>
            <param name="package">Package from which we are loading the type.</param>
            <param name="typeName">Name of the type this plugin is for.</param>
            <param name="ID">ID of the type this plugin is for.</param>
            <param name="extensionElement">Extension element containing user data to initialize the plugin.</param>
            <returns>Loaded and initialized plugin.</returns>
            <exception cref="T:MHUrho.Packaging.PackageLoadingException">Thrown when we were unable to load or initialize the plugin.</exception>
        </member>
        <member name="M:MHUrho.Plugins.TypePlugin.Initialize(System.Xml.Linq.XElement,MHUrho.Packaging.GamePack)">
            <summary>
            Called to initialize the instance
            </summary>
            <param name="extensionElement">extension element of the unitType xml description or null if there is none</param>
            <param name="package"></param>
        </member>
        <member name="T:MHUrho.Plugins.UnitInstancePlugin">
            <summary>
            Base class for unit instance plugins in packages.
            </summary>
        </member>
        <member name="P:MHUrho.Plugins.UnitInstancePlugin.Unit">
            <summary>
            The unit controlled by this plugin.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.UnitInstancePlugin.#ctor(MHUrho.Logic.ILevelManager,MHUrho.Logic.IUnit)">
            <summary>
            Creates a unit instance plugin, stores the controlled unit and the level.
            </summary>
            <param name="level">The level.</param>
            <param name="unit">The controlled unit.</param>
        </member>
        <member name="M:MHUrho.Plugins.UnitInstancePlugin.TileHeightChanged(MHUrho.Logic.ITile)">
             <summary>
             Notifies unit plugin that the tile the unit is on has changed its height.
            
             Before this call, the platform ensures that the unit is not below the terrain,
             and moves it above the terrain if it is.
             </summary>
             <param name="tile">The tile with changed height.</param>
        </member>
        <member name="M:MHUrho.Plugins.UnitInstancePlugin.BuildingBuilt(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <summary>
            Notifies the unit plugin that a building was built on the tile the unit is standing on.
            </summary>
            <param name="building">The new building.</param>
            <param name="tile">The tile the unit is standing on.</param>
        </member>
        <member name="M:MHUrho.Plugins.UnitInstancePlugin.BuildingDestroyed(MHUrho.Logic.IBuilding,MHUrho.Logic.ITile)">
            <summary>
            Notifies the unit plugin that a building was destroyed on the tile the unit is standing on.
            </summary>
            <param name="building">The destroyed building.</param>
            <param name="tile">The tile the unit is standing on.</param>
        </member>
        <member name="M:MHUrho.Plugins.UnitInstancePlugin.OnHit(MHUrho.Logic.IEntity,System.Object)">
            <summary>
            Notifies the unit plugin that the unit has been hit by <paramref name="other"/> entity.
            </summary>
            <param name="other">The entity that hit this unit.</param>
            <param name="userData">User defined data provided by the other entity.</param>
        </member>
        <member name="T:MHUrho.Plugins.UnitTypePlugin">
            <summary>
            Base class of all unit type plugins in packages.
            </summary>
        </member>
        <member name="M:MHUrho.Plugins.UnitTypePlugin.CreateNewInstance(MHUrho.Logic.ILevelManager,MHUrho.Logic.IUnit)">
            <summary>
            Create new instance of the unit in with default contents
            
            Add components from <see cref="N:MHUrho.DefaultComponents"/> to <see name="unit.Node"/> and/or
            create your own Plugin in <see cref="!:UnitInstancePlugin.OnUpdate(float)"/>
            </summary>
            <param name="level"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Plugins.UnitTypePlugin.GetInstanceForLoading(MHUrho.Logic.ILevelManager,MHUrho.Logic.IUnit)">
            <summary>
            Creates instance of <see cref="T:MHUrho.Plugins.UnitInstancePlugin"/> that will be loaded by <see cref="!:UnitInstancePlugin.LoadState(LevelManager, PluginDataWrapper)"/>
            The <paramref name="unit"/> is NOT LOADED, there are no components or data loaded, load data in <see cref="!:UnitInstancePlugin.LoadState(ILevelManager, IUnit, PluginDataWrapper)"/>
            The <paramref name="unit"/> is provided just to store the reference
            </summary>
            <param name="level"></param>
            <param name="unit">Unit belonging to the instance plugin</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Plugins.UnitTypePlugin.CanSpawnAt(MHUrho.Logic.ITile)">
            <summary>
            Checks if the UnitType can be spawned at <paramref name="tile"/>
            </summary>
            <param name="tile">Tile to spawn the unit at, the center of the unit will be at the center of the tile</param>
            <returns>true if can, false if cannot</returns>
        </member>
        <member name="T:MHUrho.StartupManagement.StartupOptions">
            <summary>
            Simple command line parsing for debugging
            </summary>
        </member>
        <member name="M:MHUrho.StartupManagement.ActionManager.#ctor(System.Xml.Linq.XDocument,MHUrho.FileManager)">
            <summary>
            Creates new action manager from the given <paramref name="xmlFile"/>.
            </summary>
            <param name="xmlFIle">XML file to parse the actions from.</param>
            <param name="files">File management system.</param>
            <exception cref="T:System.IO.IOException">Occurs when the <paramref name="xmlFilePath"/> is not valid path or the file could not be opened</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Occurs when <paramref name="xmlFilePath"/> does not conform to the schema at Schemas/MenuActions.xsd</exception>
        </member>
        <member name="M:MHUrho.StartupManagement.MenuScreenAction.Parse(System.Xml.Linq.XDocument)">
            <summary>
            Parses XML file into MenuScreenActions, that should go through UI screens without user input
            </summary>
            <param name="xml">Validated xml document representing the actions</param>
            <returns>The list of actions that should be executed in that order</returns>
        </member>
        <member name="M:MHUrho.StartupManagement.LevelSettingsScreenAction.GetPlayAction(System.String,System.Tuple{System.String,System.Int32},System.Collections.Generic.List{System.Tuple{System.String,System.Int32}})">
            <summary>
            Creates an action for <see cref="T:MHUrho.UserInterface.LevelSettingsScreen"/> that executes,
            replacing user input
            </summary>
            <param name="neutralPlayerLogicName">Logic name of the neutral player</param>
            <param name="humanPlayer">Logic name and TeamID of the human player</param>
            <param name="aiPlayers">Logic names and TeamIDs of the AI players</param>
            <returns></returns>
        </member>
        <member name="P:MHUrho.FileManager.PackageDirectoryPath">
            <summary>
            Absolute path of the PackageDirectory <see cref="P:MHUrho.FileManager.PackageDirectoryPath"/>
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.LogPath">
            <summary>
            Absolute path of the log file.
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.StaticDirPath">
            <summary>
            Absolute path of the directory containing static app data.
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.DynamicDirPath">
            <summary>
            Absolute path of the directory containing dynamic app data, created at runtime.
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.ConfigFilePath">
            <summary>
            Relative file path of the config file, which has the default instance inside the <see cref="P:MHUrho.FileManager.StaticDirPath"/> and the user specific in <see cref="P:MHUrho.FileManager.DynamicDirPath"/>
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.SaveGameDirPath">
            <summary>
            Relative path to the directory containing saved games.
            Relative to <see cref="P:MHUrho.FileManager.DynamicDirPath"/>
            </summary>
        </member>
        <member name="P:MHUrho.FileManager.SaveGameDirAbsolutePath">
            <summary>
            Absolute path of the directory containing saved games.
            </summary>
        </member>
        <member name="M:MHUrho.FileManager.ReplaceDirectorySeparators(System.String)">
            <summary>
            Replaces directory separators in the provided <paramref name="relativePath"/> from / as a directory separator to the platform specific <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            </summary>
            <param name="relativePath">The path to correct</param>
            <returns>Relative path separated by the correct <see cref="F:System.IO.Path.DirectorySeparatorChar"/></returns>
        </member>
        <member name="M:MHUrho.FileManager.OpenDynamicFileInPackage(System.String,System.IO.FileMode,System.IO.FileAccess,MHUrho.Packaging.GamePack)">
             <summary>
             Opens a file on the <paramref name="relativePath"/> in the <paramref name="package"/> directory
            
             If no package is specified, the <see cref="P:MHUrho.Packaging.PackageManager.ActivePackage"/> is used
             </summary>
             <param name="relativePath">Path of the file relative to the package directory</param>
             <param name="fileMode"></param>
             <param name="fileAccess"></param>
             <param name="package"></param>
             <returns></returns>
        </member>
        <member name="M:MHUrho.FileManager.OpenStaticFileRO(System.String)">
            <summary>
            Gets stream allowing reading from static file, either directly from static file
            or if there exists changed copy in dynamic files, from this changed copy
            </summary>
            <param name="relativePath"></param>
            <returns>Read only stream allowing reading from static file</returns>
        </member>
        <member name="M:MHUrho.FileManager.OpenStaticFileRW(System.String)">
            <summary>
            Checks if there is changed copy in dynamic files, if there is, 
            opens it, otherwise creates new copy and opens this new copy
            </summary>
            <param name="relativePath"></param>
            <returns>ReadWrite stream</returns>
        </member>
        <member name="M:MHUrho.FileManager.OpenDynamicFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Gets stream allowing reading and writing from file,
            if the file does not exist at dynamic path, 
            tries to make a copy of the file from static data
            </summary>
            <param name="relativePath"></param>
            <param name="fileMode"></param>
            <param name="fileAccess"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.FileManager.CopyStaticToDynamic(System.String)">
            <summary>
            Copies static file or directory to dynamic data directory, 
            recreating the same directory structure as in static data
            </summary>
            <param name="srcRelativePath">Source relative path in static data</param>
        </member>
        <member name="M:MHUrho.FileManager.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Creates a copy of a file or a directory with the whole subtree copied
            If <paramref name="source"/> refers to the same file/directory as <paramref name="target"/>, behavior is undefined
            </summary>
            <param name="source">Rooted path from which to copy</param>
            <param name="target">Rooted path to which to copy</param>
            <param name="overrideFiles"></param>
        </member>
        <member name="M:MHUrho.FileManager.GetFSEntriesInDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dirPath"></param>
            <param name="files"></param>
            <param name="directories"></param>
            <param name="searchPattern">A string to match against the file names of the entries, can contain literals and wildCard characters * and ?.</param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.FileManager.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of file manager
            </summary>
            <param name="staticDataDirAbs">Absolute path of the directory containing static data, distributed with the app and read only.</param>
            <param name="dynamicDataDirAbs">Absolute path of the directory containing dynamic data, created during runtime.</param>
            <param name="packageDirAbs">Absolute path of the directory containing packages.</param>
            <param name="logFileAbs">Absolute path of where to create the log file.</param>
            <param name="configFileRel">Relative path of the config file in static and dynamic directories. (Static for default, dynamic for user specific)</param>
            <param name="savedGamesRel">Relative path inside the dynamic directory where to save the saved games, should be separate directory containing only the saved games.</param>
        </member>
        <member name="T:MHUrho.Storage.GameStateReflection">
            <summary>Holder for reflection information generated from GameState.proto</summary>
        </member>
        <member name="P:MHUrho.Storage.GameStateReflection.Descriptor">
            <summary>File descriptor for GameState.proto</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.MapFieldNumber">
            <summary>Field number for the "map" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.UnitsFieldNumber">
            <summary>Field number for the "units" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.BuildingsFieldNumber">
            <summary>Field number for the "buildings" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.ProjectilesFieldNumber">
            <summary>Field number for the "projectiles" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.PlayersFieldNumber">
            <summary>Field number for the "players" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.PackageNameFieldNumber">
            <summary>Field number for the "packageName" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.LevelNameFieldNumber">
            <summary>Field number for the "levelName" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevel.PluginFieldNumber">
            <summary>Field number for the "plugin" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StTile.TileTypeIDFieldNumber">
            <summary>Field number for the "tileTypeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StTile.TopLeftPositionFieldNumber">
            <summary>Field number for the "topLeftPosition" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StTile.HeightFieldNumber">
            <summary>Field number for the "height" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StTile.BuildingIDFieldNumber">
            <summary>Field number for the "buildingID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StTile.UnitIDsFieldNumber">
            <summary>Field number for the "unitIDs" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBorderTile.TopLeftPositionFieldNumber">
            <summary>Field number for the "topLeftPosition" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBorderTile.TopLeftHeightFieldNumber">
            <summary>Field number for the "topLeftHeight" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBorderTile.TopRightHeightFieldNumber">
            <summary>Field number for the "topRightHeight" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBorderTile.BotLeftHeightFieldNumber">
            <summary>Field number for the "botLeftHeight" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBorderTile.BotRightHeightFieldNumber">
            <summary>Field number for the "botRightHeight" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMapTarget.InstanceIDFieldNumber">
            <summary>Field number for the "instanceID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMapTarget.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StResource.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StResource.AmountFieldNumber">
            <summary>Field number for the "amount" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.TypeIDFieldNumber">
            <summary>Field number for the "typeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.RotationFieldNumber">
            <summary>Field number for the "rotation" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.PlayerIDFieldNumber">
            <summary>Field number for the "playerID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.UserPluginFieldNumber">
            <summary>Field number for the "userPlugin" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnit.DefaultComponentsFieldNumber">
            <summary>Field number for the "defaultComponents" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.TypeIDFieldNumber">
            <summary>Field number for the "typeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.RotationFieldNumber">
            <summary>Field number for the "rotation" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.PlayerIDFieldNumber">
            <summary>Field number for the "playerID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.UserPluginFieldNumber">
            <summary>Field number for the "userPlugin" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.DefaultComponentsFieldNumber">
            <summary>Field number for the "defaultComponents" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.FaceDirFieldNumber">
            <summary>Field number for the "faceDir" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StProjectile.TriggerFieldNumber">
            <summary>Field number for the "trigger" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.TypeIDFieldNumber">
            <summary>Field number for the "typeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.LocationFieldNumber">
            <summary>Field number for the "location" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.RotationFieldNumber">
            <summary>Field number for the "rotation" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.PlayerIDFieldNumber">
            <summary>Field number for the "playerID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.UserPluginFieldNumber">
            <summary>Field number for the "userPlugin" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBuilding.DefaultComponentsFieldNumber">
            <summary>Field number for the "defaultComponents" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayers.HumanPlayerIDFieldNumber">
            <summary>Field number for the "humanPlayerID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayers.NeutralPlayerIDFieldNumber">
            <summary>Field number for the "neutralPlayerID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayers.PlayersFieldNumber">
            <summary>Field number for the "players" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.IdFieldNumber">
            <summary>Field number for the "id" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.TeamIDFieldNumber">
            <summary>Field number for the "teamID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.TypeIDFieldNumber">
            <summary>Field number for the "typeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.InsigniaIDFieldNumber">
            <summary>Field number for the "insigniaID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.UnitIDsFieldNumber">
            <summary>Field number for the "unitIDs" field.</summary>
        </member>
        <member name="P:MHUrho.Storage.StPlayer.UnitIDs">
             <summary>
            NOTE: Redundant references both ways, could just store it in building/unit and connect it from there
             </summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.BuildingIDsFieldNumber">
            <summary>Field number for the "buildingIDs" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.ResourcesFieldNumber">
            <summary>Field number for the "resources" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPlayer.UserPluginFieldNumber">
            <summary>Field number for the "userPlugin" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMap.SizeFieldNumber">
            <summary>Field number for the "size" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMap.TilesFieldNumber">
            <summary>Field number for the "tiles" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMap.BorderTilesFieldNumber">
            <summary>Field number for the "borderTiles" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMap.MapRangeTargetsFieldNumber">
            <summary>Field number for the "mapRangeTargets" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevelPlugin.TypeIDFieldNumber">
            <summary>Field number for the "typeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StLevelPlugin.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="T:MHUrho.Storage.MHUrhoTypesReflection">
            <summary>Holder for reflection information generated from MHUrhoTypes.proto</summary>
        </member>
        <member name="P:MHUrho.Storage.MHUrhoTypesReflection.Descriptor">
            <summary>File descriptor for MHUrhoTypes.proto</summary>
        </member>
        <member name="F:MHUrho.Storage.StWaypoint.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWaypoint.OffsetFieldNumber">
            <summary>Field number for the "offset" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWaypoint.TimeFieldNumber">
            <summary>Field number for the "time" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWaypoint.MovementTypeFieldNumber">
            <summary>Field number for the "movementType" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWaypoint.TemporaryFieldNumber">
            <summary>Field number for the "temporary" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPathEnumerator.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPathEnumerator.IndexFieldNumber">
            <summary>Field number for the "index" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StPath.WaypointsFieldNumber">
            <summary>Field number for the "waypoints" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.WorldWalkerFieldNumber">
            <summary>Field number for the "worldWalker" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.BallisticProjectileFieldNumber">
            <summary>Field number for the "ballisticProjectile" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.MovingMeeleAttackerFieldNumber">
            <summary>Field number for the "movingMeeleAttacker" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.StaticMeeleAttackerFieldNumber">
            <summary>Field number for the "staticMeeleAttacker" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.MovingRangeTargetFieldNumber">
            <summary>Field number for the "movingRangeTarget" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.StaticRangeTargetFieldNumber">
            <summary>Field number for the "staticRangeTarget" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.ShooterFieldNumber">
            <summary>Field number for the "shooter" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.UnitSelectorFieldNumber">
            <summary>Field number for the "unitSelector" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StDefaultComponent.ClickerFieldNumber">
            <summary>Field number for the "clicker" field.</summary>
        </member>
        <member name="T:MHUrho.Storage.StDefaultComponent.ComponentOneofCase">
            <summary>Enum of possible cases for the "component" oneof.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWorldWalker.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StWorldWalker.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBallisticProjectile.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StBallisticProjectile.MovementFieldNumber">
            <summary>Field number for the "movement" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.SearchForTargetFieldNumber">
            <summary>Field number for the "searchForTarget" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.SearchRectangleSizeFieldNumber">
            <summary>Field number for the "searchRectangleSize" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeBetweenSearchesFieldNumber">
            <summary>Field number for the "timeBetweenSearches" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeBetweenPositionChecksFieldNumber">
            <summary>Field number for the "timeBetweenPositionChecks" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeBetweenAttacksFieldNumber">
            <summary>Field number for the "timeBetweenAttacks" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TargetIDFieldNumber">
            <summary>Field number for the "targetID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeToNextSearchFieldNumber">
            <summary>Field number for the "timeToNextSearch" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeToNextPositionCheckFieldNumber">
            <summary>Field number for the "timeToNextPositionCheck" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingMeeleAttacker.TimeToNextAttackFieldNumber">
            <summary>Field number for the "timeToNextAttack" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.SearchForTargetFieldNumber">
            <summary>Field number for the "searchForTarget" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.SearchRectangleSizeFieldNumber">
            <summary>Field number for the "searchRectangleSize" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.TimeBetweenSearchesFieldNumber">
            <summary>Field number for the "timeBetweenSearches" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.TimeBetweenAttacksFieldNumber">
            <summary>Field number for the "timeBetweenAttacks" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.TargetIDFieldNumber">
            <summary>Field number for the "targetID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.TimeToNextSearchFieldNumber">
            <summary>Field number for the "timeToNextSearch" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticMeeleAttacker.TimeToNextAttackFieldNumber">
            <summary>Field number for the "timeToNextAttack" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingRangeTarget.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingRangeTarget.InstanceIDFieldNumber">
            <summary>Field number for the "instanceID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StMovingRangeTarget.OffsetFieldNumber">
            <summary>Field number for the "offset" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticRangeTarget.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticRangeTarget.InstanceIDFieldNumber">
            <summary>Field number for the "instanceID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StStaticRangeTarget.PositionFieldNumber">
            <summary>Field number for the "position" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.ProjectileTypeIDFieldNumber">
            <summary>Field number for the "projectileTypeID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.SourceOffsetFieldNumber">
            <summary>Field number for the "sourceOffset" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.RateOfFireFieldNumber">
            <summary>Field number for the "rateOfFire" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.SearchForTargetFieldNumber">
            <summary>Field number for the "searchForTarget" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.TargetSearchDelayFieldNumber">
            <summary>Field number for the "targetSearchDelay" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.ShotDelayFieldNumber">
            <summary>Field number for the "shotDelay" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.SearchDelayFieldNumber">
            <summary>Field number for the "searchDelay" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StShooter.TargetIDFieldNumber">
            <summary>Field number for the "targetID" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StUnitSelector.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StClicker.EnabledFieldNumber">
            <summary>Field number for the "enabled" field.</summary>
        </member>
        <member name="P:MHUrho.Storage.PluginDataWrapper.PluginData">
            <summary>
            This field is internal because i dont want people writing plugins to go around
            the wrappers and change things inside the pluginData itself
            </summary>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetReaderForWrappedSequentialData">
            <summary>
            Creates a reader for wrapped data in Sequential format,
            written by <see cref="T:MHUrho.Storage.SequentialPluginDataWriter"/>
            </summary>
            <returns>Rreader for data in sequential format</returns>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetWriterForWrappedSequentialData">
            <summary>
            Creates a writer that stores data in sequential format,
            the written data then can be read by <see cref="T:MHUrho.Storage.SequentialPluginDataReader"/>
            </summary>
            <returns>Writer that writes data in sequential format</returns>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetReaderForWrappedIndexedData">
            <summary>
            Creates a reader for wrapped data in Indexed format
            written by <see cref="T:MHUrho.Storage.IndexedPluginDataWriter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetWriterForWrappedIndexedData">
            <summary>
            Creates a writer that writes data in Indexed format,
            the written data can then be read by <see cref="T:MHUrho.Storage.IndexedPluginDataReader"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetReaderForWrappedNamedData">
            <summary>
            Creates a reader for wrapped data in Named format
            written by <see cref="T:MHUrho.Storage.NamedPluginDataWriter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MHUrho.Storage.PluginDataWrapper.GetWriterForWrappedNamedData">
            <summary>
            Creates a writer that writes data in Named format,
            the written data can then be read by <see cref="T:MHUrho.Storage.NamedPluginDataReader"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MHUrho.Storage.PluginStorageReflection">
            <summary>Holder for reflection information generated from PluginStorage.proto</summary>
        </member>
        <member name="P:MHUrho.Storage.PluginStorageReflection.Descriptor">
            <summary>File descriptor for PluginStorage.proto</summary>
        </member>
        <member name="F:MHUrho.Storage.PluginData.NamedFieldNumber">
            <summary>Field number for the "named" field.</summary>
        </member>
        <member name="P:MHUrho.Storage.PluginData.Named">
             <summary>
            Data identified by user specified names, good if you dont belive yourself with consistent indexing
             </summary>
        </member>
        <member name="F:MHUrho.Storage.PluginData.IndexedFieldNumber">
            <summary>Field number for the "indexed" field.</summary>
        </member>
        <member name="P:MHUrho.Storage.PluginData.Indexed">
             <summary>
            Data identified by user specified index, good for changing implementations
             </summary>
        </member>
        <member name="F:MHUrho.Storage.PluginData.SequentialFieldNumber">
            <summary>Field number for the "sequential" field.</summary>
        </member>
        <member name="P:MHUrho.Storage.PluginData.Sequential">
             <summary>
            Data identified by their position in the list, good for stable implementations
             </summary>
        </member>
        <member name="T:MHUrho.Storage.PluginData.DataStorageTypesOneofCase">
            <summary>Enum of possible cases for the "dataStorageTypes" oneof.</summary>
        </member>
        <member name="F:MHUrho.Storage.NamedPluginData.DataMapFieldNumber">
            <summary>Field number for the "dataMap" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.IndexedPluginData.DataMapFieldNumber">
            <summary>Field number for the "dataMap" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.SequentialPluginData.DataFieldNumber">
            <summary>Field number for the "data" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.FloatFieldNumber">
            <summary>Field number for the "float" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.DoubleFieldNumber">
            <summary>Field number for the "double" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntFieldNumber">
            <summary>Field number for the "int" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.LongFieldNumber">
            <summary>Field number for the "long" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.UintFieldNumber">
            <summary>Field number for the "uint" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.UlongFieldNumber">
            <summary>Field number for the "ulong" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.BoolFieldNumber">
            <summary>Field number for the "bool" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.StringFieldNumber">
            <summary>Field number for the "string" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.ByteArrayFieldNumber">
            <summary>Field number for the "byteArray" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntVector2FieldNumber">
            <summary>Field number for the "intVector2" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntVector3FieldNumber">
            <summary>Field number for the "intVector3" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.Vector2FieldNumber">
            <summary>Field number for the "vector2" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.Vector3FieldNumber">
            <summary>Field number for the "vector3" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.FloatListFieldNumber">
            <summary>Field number for the "floatList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.DoubleListFieldNumber">
            <summary>Field number for the "doubleList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntListFieldNumber">
            <summary>Field number for the "intList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.LongListFieldNumber">
            <summary>Field number for the "longList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.BoolListFieldNumber">
            <summary>Field number for the "boolList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.StringListFieldNumber">
            <summary>Field number for the "stringList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.ByteArrayListFieldNumber">
            <summary>Field number for the "byteArrayList" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntVector2ListFieldNumber">
            <summary>Field number for the "intVector2List" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.IntVector3ListFieldNumber">
            <summary>Field number for the "intVector3List" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.Vector2ListFieldNumber">
            <summary>Field number for the "vector2List" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.Vector3ListFieldNumber">
            <summary>Field number for the "vector3List" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Data.PathFieldNumber">
            <summary>Field number for the "path" field.</summary>
        </member>
        <member name="T:MHUrho.Storage.Data.ContentsOneofCase">
            <summary>Enum of possible cases for the "contents" oneof.</summary>
        </member>
        <member name="F:MHUrho.Storage.FloatList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.DoubleList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.IntList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.LongList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.BoolList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StringList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.ByteArrayList.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.IntVector2List.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.IntVector3List.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Vector2List.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.Vector3List.ValueFieldNumber">
            <summary>Field number for the "value" field.</summary>
        </member>
        <member name="M:MHUrho.Storage.SequentialPluginDataReader.GetNext``1(``0@)">
            <summary>
            Moves the enumerator to next value and sets <paramref name="value"/> to it's value and returns true,
            if there is no next value, returns false and sets Finished to true
            </summary>
            <param name="value">The loaded value (true) or default(<typeparamref name="T"/>) (false).</param>
            <typeparam name="T">Type of the stored value.</typeparam>
            <returns>True if the <paramref name="value"/> is valid, false if there is nothing more to read.</returns>
        </member>
        <member name="T:MHUrho.Storage.UrhoTypesReflection">
            <summary>Holder for reflection information generated from UrhoTypes.proto</summary>
        </member>
        <member name="P:MHUrho.Storage.UrhoTypesReflection.Descriptor">
            <summary>File descriptor for UrhoTypes.proto</summary>
        </member>
        <member name="F:MHUrho.Storage.StIntVector2.XFieldNumber">
            <summary>Field number for the "X" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StIntVector2.YFieldNumber">
            <summary>Field number for the "Y" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StIntVector3.XFieldNumber">
            <summary>Field number for the "X" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StIntVector3.YFieldNumber">
            <summary>Field number for the "Y" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StIntVector3.ZFieldNumber">
            <summary>Field number for the "Z" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StVector2.XFieldNumber">
            <summary>Field number for the "X" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StVector2.YFieldNumber">
            <summary>Field number for the "Y" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StVector3.XFieldNumber">
            <summary>Field number for the "X" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StVector3.YFieldNumber">
            <summary>Field number for the "Y" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StVector3.ZFieldNumber">
            <summary>Field number for the "Z" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StColor.RFieldNumber">
            <summary>Field number for the "R" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StColor.GFieldNumber">
            <summary>Field number for the "G" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StColor.BFieldNumber">
            <summary>Field number for the "B" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StColor.AFieldNumber">
            <summary>Field number for the "A" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StQuaternion.XFieldNumber">
            <summary>Field number for the "X" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StQuaternion.YFieldNumber">
            <summary>Field number for the "Y" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StQuaternion.ZFieldNumber">
            <summary>Field number for the "Z" field.</summary>
        </member>
        <member name="F:MHUrho.Storage.StQuaternion.WFieldNumber">
            <summary>Field number for the "W" field.</summary>
        </member>
        <member name="T:MHUrho.Threading.MHUrhoSynchronizationContext">
             <summary>
             Synchronization context that sends and posts everything onto the main thread of the Urho3D library
            
             Useful for Continuations that work with UI or Scene
             </summary>
        </member>
        <member name="M:MHUrho.UserInterface.ConfirmationPopUp.RequestConfirmation(System.String,System.String,System.Nullable{System.TimeSpan},MHUrho.UserInterface.MenuScreen)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="description"></param>
            <param name="timeout">Time after which it is considered as pressing the cancel button</param>
            <param name="underlyingMenuScreen">Underlying menu screen that will have input disabled for the duration of the confirmation popup</param>
        </member>
        <member name="F:MHUrho.UserInterface.ErrorPopUp.Screen.taskSource">
            <summary>
            Task source with dummy type of bool, publicly the tasks are presented as plain Task without a return type
            </summary>
        </member>
        <member name="F:MHUrho.UserInterface.ExpandingListItem.OuterElement">
            <summary>
            Outer element containing the checkbox
            </summary>
        </member>
        <member name="F:MHUrho.UserInterface.ExpandingListItem.CheckBox">
            <summary>
            Checkbox containing the fixed element and the collapsing element
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.FilePickScreen.FilePickScreenBase.NameEditTextChanged(Urho.Gui.TextChangedEventArgs)">
             <summary>
             Checks the new filename provided by the user and if it is valid, sets it as the new <see cref="F:MHUrho.UserInterface.FilePickScreen.FilePickScreenBase.Filename"/>
            
             Also displays the files that match the current filename and if only one file matches, invokes the <see cref="M:MHUrho.UserInterface.FilePickScreen.FilePickScreenBase.TotalMatchSelected(System.String)"/>
             If previously <see cref="F:MHUrho.UserInterface.FilePickScreen.FilePickScreenBase.MatchSelected"/> was not null, and now there is not just one match, invokes <see cref="M:MHUrho.UserInterface.FilePickScreen.FilePickScreenBase.TotalMatchDeselected"/>
             </summary>
             <param name="args"></param>
        </member>
        <member name="F:MHUrho.UserInterface.FileSystemBrowsingPopUp.Screen.currentDirectory">
            <summary>
            Path of the current directory relative to the baseDir
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.FileSystemBrowsingPopUp.Screen.#ctor(MHUrho.UserInterface.FileSystemBrowsingPopUp,System.String,System.String,MHUrho.UserInterface.SelectOption,System.Threading.Tasks.TaskCompletionSource{MHUrho.UserInterface.IPathResult})">
            <summary>
            Loads the screen layout and contents
            </summary>
            <param name="proxy"></param>
            <param name="baseDir"></param>
            <param name="startingRelativePath"></param>
            <param name="selectOptions"></param>
            <param name="taskCompletition"></param>
            <exception cref="T:System.ArgumentException">baseDir or startingRelativePath were wrong</exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
        </member>
        <member name="M:MHUrho.UserInterface.FileSystemBrowsingPopUp.Request(System.String,MHUrho.UserInterface.SelectOption,System.String)">
            <summary>
            Shows the fileBrowsing screen, enabling user to search the baseDir and its subtree and select a file
            or a directory from it.
            </summary>
            <param name="baseDir"></param>
            <param name="selectOption"></param>
            <param name="startingRelativePath"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
        </member>
        <member name="M:MHUrho.UserInterface.LevelCreationScreen.EditLevel(MHUrho.Packaging.LevelRep)">
            <summary>
            Starts the loading process of the <paramref name="level"/> for editing.
            Cannot be implemented in <see cref="T:MHUrho.UserInterface.LevelCreationScreen.Screen"/> because it switches to different screens
            during execution, which releases our <see cref="F:MHUrho.UserInterface.LevelCreationScreen.screen"/>.
            </summary>
            <param name="level">The level to load for editing</param>
        </member>
        <member name="M:MHUrho.UserInterface.LevelSettingsScreen.Play(MHUrho.Logic.PlayerType,System.Tuple{MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia},System.Collections.Generic.IEnumerable{System.Tuple{MHUrho.Logic.PlayerType,System.Int32,MHUrho.EntityInfo.PlayerInsignia}},MHUrho.Plugins.LevelLogicCustomSettings)">
            <summary>
            Starts the loading of the <see cref="P:MHUrho.UserInterface.LevelSettingsScreen.Level"/> for playing.
            Loads the level with neutral player of type <paramref name="neutralPlayerType"/>,
            human player of type <paramref name="humanPlayer"/>,
            ai players of types <paramref name="aiPlayers"/> and
            gives the level plugin the <paramref name="pluginCustomSettings"/> it defined in the provided window.
            </summary>
            <param name="neutralPlayerType">The type of the neutral player in the loaded level.</param>
            <param name="humanPlayer">The type of the human player in the loaded level.</param>
            <param name="aiPlayers">The types of ai players in the loaded level.</param>
            <param name="pluginCustomSettings">Data the plugin requested from the user.</param>
        </member>
        <member name="M:MHUrho.UserInterface.LoadGameScreen.Load(System.String)">
            <summary>
            Starts loading of the saved level from <paramref name="newRelativePath"/>.
            Cannot be implemented in screen, because we switch to loading screen, which releases our <see cref="F:MHUrho.UserInterface.LoadGameScreen.screen"/>.
            </summary>
            <param name="newRelativePath">Relative path to the save game</param>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.ScreenBase.EnableInput">
            <summary>
            Stores the current state of input and then enables it
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.ScreenBase.DisableInput">
            <summary>
            Stores the current state of input and then disables it
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.ScreenBase.ResetInput">
            <summary>
            Sets the input state to the stored state
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.EnableInput">
            <summary>
            Stores the current state of input and then enables it
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.DisableInput">
            <summary>
            Stores the current state of input and then disables it
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.MenuScreen.ResetInput">
            <summary>
            Sets the input state to the stored state
            </summary>
        </member>
        <member name="M:MHUrho.UserInterface.PackagePickingScreen.ItemSelectionConfirmed(MHUrho.UserInterface.PackageListItem)">
            <summary>
            Starts loading the picked package and switches to loading screen.
            Due to the switch to other screen, cannot be implemented inside the <see cref="T:MHUrho.UserInterface.PackagePickingScreen.Screen"/>,
            because that will be released.
            </summary>
            <param name="item">The list item representing the picked package</param>
        </member>
        <member name="T:MHUrho.WorldMap.GetCornerHeightDelegate">
            <summary>
            Gets new height of the [x,y] tile corner from previous height and position of the corner
            Can and WILL BE CALLED MULTIPLE TIMES FOR THE SAME X,Y COORDINATES
            </summary>
            <param name="previousHeight">Previous height of the [x,y] corner</param>
            <param name="x">X coord of the tile corner</param>
            <param name="y">Y coord of the tile corner</param>
            <returns>New height of the [x,y] corner</returns>
        </member>
        <member name="T:MHUrho.WorldMap.IMap">
            <summary>
            Represents a level map, with XZ plane horizontal and Y plane vertical. <para/>
            The map contains tiles with topLeft corners from <see cref="P:MHUrho.WorldMap.IMap.Left"/> to <see cref="P:MHUrho.WorldMap.IMap.Right"/> in X and
            <see cref="P:MHUrho.WorldMap.IMap.Top"/> to <see cref="P:MHUrho.WorldMap.IMap.Bottom"/> in Y. <para/>
            Map is not bounded in vertical direction.
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.PathFinding">
            <summary>
            The pathFinding algorithm used in the current level.
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.TopLeft">
            <summary>
            Gets the coordinates of the top left corner tile of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.BottomRight">
            <summary>
            Gets the coordinates of the bottom right corner tile of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.TopRight">
            <summary>
            Gets the coordinates of the top right corner tile of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.BottomLeft">
            <summary>
            Gets the coordinates of the bottom left corner tile of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Width">
            <summary>
            Gets width of the map in tiles (and in World units as well, because tile is 1x1)
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Length">
            <summary>
            Gets length of the map in tiles (and in World units as well, because tile is 1x1)
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Left">
            <summary>
            Gets X coordinate of the left row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Right">
            <summary>
            Gets X coordinate of the right row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Top">
            <summary>
            Gets Z coordinate of the top row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.Bottom">
            <summary>
            Gets Z coordinate of the bottom row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.LevelManager">
            <summary>
            Gets the level manager responsible for this level
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.IMap.TileHeightChangeNotifier">
            <summary>
            An object that provides notifications when tile height changes
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsInside(System.Int32,System.Int32)">
            <summary>
            Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to [<paramref name="x"/>,<paramref name="z"/>]
            </summary>
            <param name="x">X coordinate</param>
            <param name="z">Z coordinate</param>
            <returns>Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to [<paramref name="x"/>,<paramref name="z"/>]</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsInside(System.Single,System.Single)">
            <summary>
            Returns whether there exists an XZ projection of a tile containing the point [<paramref name="x"/>,<paramref name="z"/>]
            </summary>
            <param name="x">X world coordinate</param>
            <param name="z">Z world coordinate</param>
            <returns>Returns whether there exists a tile containing the point [<paramref name="x"/>,<paramref name="z"/>] </returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsInside(Urho.IntVector2)">
            <summary>
            Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to <paramref name="point"/>
            </summary>
            <param name="point">point in the XZ plane</param>
            <returns>Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to <paramref name="point"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsInside(Urho.Vector2)">
            <summary>
            Returns whether there exists an XZ projection of a tile containing the point <paramref name="point"/>
            </summary>
            <param name="point">point in the XZ plane</param>
            <returns>Returns whether there exists a tile containing the point <paramref name="point"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsInside(Urho.Vector3)">
            <summary>
            Returns whether there exists a tile whose XZ projection contains the XZ projection of <paramref name="point"/>
            </summary>
            <param name="point">point, whose XZ projection you want to test</param>
            <returns>Returns whether there exists a tile containing the XZ projection of <paramref name="point"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsXInside(System.Int32)">
            <summary>
            Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="x"/>
            </summary>
            <param name="x">X coord to test</param>
            <returns>Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="x"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsXInside(Urho.IntVector2)">
            <summary>
            Returns whether there exist a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="point.X.X"/>
            </summary>
            <param name="point">point with X coord to test</param>
            <returns>Returns whether there exist a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="point.X.X"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsZInside(System.Int32)">
            <summary>
            Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="z"/>
            </summary>
            <param name="z">Z coord to test</param>
            <returns>Returns whether there exists a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with X coord equal <paramref name="z"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsZInside(Urho.IntVector2)">
            <summary>
            Returns whether there exist a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with Y coord equal <paramref name="point.Y.Y"/>
            </summary>
            <param name="point">point with Y coord to test</param>
            <returns>Returns whether there exist a tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> with Y coord equal <paramref name="point.Y.Y"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.WhereIsX(System.Int32)">
            <summary>
            Compares <paramref name="x"/> with the coords of <see cref="P:MHUrho.WorldMap.IMap.Left"/> and <see cref="P:MHUrho.WorldMap.IMap.Right"/>,
            returns -1 if <paramref name="x"/> is to the left of <see cref="P:MHUrho.WorldMap.IMap.Left"/>, 0 if inside, 1 if to the right of <see cref="P:MHUrho.WorldMap.IMap.Right"/>
            </summary>
            <param name="x">x coord to copare with the map boundaries</param>
            <returns>Returns -1 if X is to the left of <see cref="P:MHUrho.WorldMap.IMap.Left"/>, 0 if inside, 1 if to the right of <see cref="P:MHUrho.WorldMap.IMap.Right"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.WhereIsX(Urho.IntVector2)">
            <summary>
            Compares X coords of <paramref name="point"/> with the coords of <see cref="P:MHUrho.WorldMap.IMap.Left"/> and <see cref="P:MHUrho.WorldMap.IMap.Right"/>,
            returns -1 if X is to the left of <see cref="P:MHUrho.WorldMap.IMap.Left"/>, 0 if inside, 1 if to the right of <see cref="P:MHUrho.WorldMap.IMap.Right"/>
            </summary>
            <param name="point">point whose X coord to compare</param>
            <returns>returns -1 if X is to the left of <see cref="P:MHUrho.WorldMap.IMap.Left"/>, 0 if inside, 1 if to the right of <see cref="P:MHUrho.WorldMap.IMap.Right"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.WhereIsZ(System.Int32)">
            <summary>
            Compares <paramref name="z"/> with the coords of <see cref="P:MHUrho.WorldMap.IMap.Top"/> and <see cref="P:MHUrho.WorldMap.IMap.Bottom"/>,
            returns -1 if <paramref name="z"/> is above <see cref="P:MHUrho.WorldMap.IMap.Top"/>, 0 if inside, 1 if below <see cref="P:MHUrho.WorldMap.IMap.Bottom"/>
            </summary>
            <param name="z">y coord to copare with the map boundaries</param>
            <returns>Returns -1 if <paramref name="z"/> is above <see cref="P:MHUrho.WorldMap.IMap.Top"/>, 0 if inside, 1 if below <see cref="P:MHUrho.WorldMap.IMap.Bottom"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.WhereIsZ(Urho.IntVector2)">
            <summary>
            Compares <paramref name="point"/> Y coord with the coords of <see cref="P:MHUrho.WorldMap.IMap.Top"/> and <see cref="P:MHUrho.WorldMap.IMap.Bottom"/>,
            returns -1 if it is above <see cref="P:MHUrho.WorldMap.IMap.Top"/>, 0 if inside, 1 if below <see cref="P:MHUrho.WorldMap.IMap.Bottom"/>
            </summary>
            <param name="point">compares y of this point</param>
            <returns>Returns -1 if it is above <see cref="P:MHUrho.WorldMap.IMap.Top"/>, 0 if inside, 1 if below <see cref="P:MHUrho.WorldMap.IMap.Bottom"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByMapLocation(System.Int32,System.Int32)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to [<paramref name="x"/>, <paramref name="z"/>]
            </summary>
            <param name="x">X coord of the <see cref="P:MHUrho.Logic.ITile.MapLocation"/></param>
            <param name="z">y coord of the <see cref="P:MHUrho.Logic.ITile.MapLocation"/> </param>
            <returns>The tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/>  equal to [<paramref name="x"/>, <paramref name="z"/>], or null if none exists</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByMapLocation(Urho.IntVector2)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> equal to <paramref name="mapLocation"/>
            </summary>
            <param name="mapLocation">the mapLocation of the tile to get</param>
            <returns>The tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/>  equal to <paramref name="mapLocation"/>, or null if none exists</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByTopLeftCorner(System.Int32,System.Int32)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopLeft"/> equal to [<paramref name="x"/>,<paramref name="z"/>]
            </summary>
            <param name="x">x coord of the topLeft corner</param>
            <param name="z">y coord of the topLeft corner</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopLeft"/> equal to [<paramref name="x"/>,<paramref name="z"/>]
            or null if there is none ([<paramref name="x"/>, <paramref name="z"/>] is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByTopLeftCorner(Urho.IntVector2)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopLeft"/> equal to <paramref name="topLeftCorner"/>
            </summary>
            <param name="topLeftCorner">the coords of the top left corner</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopLeft"/> equal to <paramref name="topLeftCorner"/>
            or null if there is none (<paramref name="topLeftCorner"/> is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByTopRightCorner(System.Int32,System.Int32)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopRight"/> equal to [<paramref name="x"/>,<paramref name="z"/>]
            </summary>
            <param name="x">x coord of the top right corner of the wanted tile</param>
            <param name="z">z coord of the top right corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopRight"/> equal to [<paramref name="x"/>,<paramref name="z"/>]
            or null if there is none ([<paramref name="x"/>, <paramref name="z"/>] is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByTopRightCorner(Urho.IntVector2)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopRight"/> equal to <paramref name="topRightCorner"/>
            </summary>
            <param name="topRightCorner">the coords in the XZ plane of the topRight corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.TopRight"/> equal to <paramref name="topRightCorner"/>
            or null if there is none (<paramref name="topRightCorner"/> is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByBottomLeftCorner(System.Int32,System.Int32)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomLeft"/> equal to [<paramref name="x"/>, <paramref name="z"/>]
            </summary>
            <param name="x">x coord of the bottom left corner of the wanted tile</param>
            <param name="z">z coord of the bottom left corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomLeft"/> equal to [<paramref name="x"/>, <paramref name="z"/>
            or null if there is none ([<paramref name="x"/>, <paramref name="z"/>] is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByBottomLeftCorner(Urho.IntVector2)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomLeft"/> equal to <paramref name="bottomLeftCorner"/>
            </summary>
            <param name="bottomLeftCorner">the coords in the XZ plane of the bottomLeft corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomLeft"/> equal to <paramref name="bottomLeftCorner"/>
            or null if there is none (<paramref name="bottomLeftCorner"/> is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByBottomRightCorner(System.Int32,System.Int32)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomRight"/> equal to [<paramref name="x"/>, <paramref name="z"/>]
            </summary>
            <param name="x">x coord of the bottom right corner of the wanted tile</param>
            <param name="z">z coord of the bottom right corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomRight"/> equal to [<paramref name="x"/>, <paramref name="z"/>]
            or null if there is none ([<paramref name="x"/>, <paramref name="z"/>] is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTileByBottomRightCorner(Urho.IntVector2)">
            <summary>
            Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomRight"/> equal to <paramref name="bottomRightCorner"/>
            </summary>
            <param name="bottomRightCorner">the coords in the XZ plane of the bottomRight corner of the wanted tile</param>
            <returns>Returns the tile with <see cref="P:MHUrho.Logic.ITile.BottomRight"/> equal to <paramref name="bottomRightCorner"/>
            or null if there is none (<paramref name="bottomRightCorner"/> is outside of the map)</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetContainingTile(Urho.Vector3)">
            <summary>
            Returns the tile containing the projection of <paramref name="point"/> to XZ plane
            Ignores height, is equal to <see cref="M:MHUrho.WorldMap.IMap.GetContainingTile(Urho.Vector2)"/> with the X and Z members of <paramref name="point"/>
            </summary>
            <param name="point">point in the WorldSpace</param>
            <returns>Returns the tile containing the projection of <paramref name="point"/> to XZ plane, or null if <paramref name="point"/> is outside of the map</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetContainingTile(Urho.Vector2)">
            <summary>
            Gets tile containing <paramref name="point"/> in the XZ plane
            </summary>
            <param name="point">The point in the XZ plane</param>
            <returns>The tile containing <paramref name="point"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetContainingTile(System.Single,System.Single)">
            <summary>
            Gets tile containing [<paramref name="x"/>, <paramref name="z"/>] in the XZ plane
            </summary>
            <param name="x">x coord of the point</param>
            <param name="z">z coord of the point</param>
            <returns>The tile containing [<paramref name="x"/>, <paramref name="z"/>] or null if [<paramref name="x"/>, <paramref name="z"/>] is outside of the map</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.SnapToMap(Urho.IntVector2@,Urho.IntVector2@)">
            <summary>
            Moves the rectangle defined by <paramref name="topLeft"/> and <paramref name="bottomRight"/> corners so that
            the whole rectangle is inside the map
            </summary>
            <param name="topLeft">top left corner of the rectangle</param>
            <param name="bottomRight">bottom right corner of the rectangle</param>
            <returns>True if it is possible to snap to map, false if it is not possible</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.SquishToMap(Urho.IntVector2@,Urho.IntVector2@)">
            <summary>
            Changes the size of the rectangle in XZ plane defined by <paramref name="topLeft"/> and <paramref name="bottomRight"/> corners
            so that no part extends outside of the map. <para/>
            If any side of the rectangle is outside of the map, changes just that side to the map border value. <para/>
            For example if <paramref name="topLeft"/>.X is less than <see cref="P:MHUrho.WorldMap.IMap.Left"/>, then <paramref name="topLeft"/>.X = <see cref="P:MHUrho.WorldMap.IMap.Left"/>
            </summary>
            <param name="topLeft">top left corner of the rectangle to squish</param>
            <param name="bottomRight">bottom right corner of the rectangle to squish</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.FindClosestTile(MHUrho.Logic.ITile,System.Predicate{MHUrho.Logic.ITile})">
            <summary>
            Finds the closest tile to <paramref name="source"/> which matches the condition specified by the <paramref name="predicate"/>
            This version is unbounded, so it continues outwards until it finds a match or searches the whole map.
            For bounded version, see <see cref="M:MHUrho.WorldMap.IMap.FindClosestTile(MHUrho.Logic.ITile,System.Int32,System.Predicate{MHUrho.Logic.ITile})"/><para/>
            The search starts with the source tile and continues with growing "concentric" squares.
            The order inside the square is implementation dependent.
            </summary>
            <param name="source">center tile, from which the search starts in squares</param>
            <param name="predicate">the predicate defining the condition</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.FindClosestTile(MHUrho.Logic.ITile,System.Int32,System.Predicate{MHUrho.Logic.ITile})">
            <summary>
            Finds the closest tile to <paramref name="source"/> which matches the condition specified by the <paramref name="predicate"/>
            This version is bounded, so the search stops with a square of size <paramref name="squareSize"/>.
            For unbounded version, see <see cref="M:MHUrho.WorldMap.IMap.FindClosestTile(MHUrho.Logic.ITile,System.Predicate{MHUrho.Logic.ITile})"/><para/>
            The search starts with the source tile and continues with growing "concentric" squares.
            The order inside the square is implementation dependent.
            </summary>
            <param name="source">center tile, from which the search starts in squares</param>
            <param name="squareSize"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTilesInSpiral(MHUrho.Logic.ITile,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which enumerates tiles in a spiral, starting from <paramref name="center"/>
            </summary>
            <param name="center">Center tile of the spiral. Starting point of the spiral</param>
            <param name="cutoff">The size of the spiral to enumerate. -1 means infinite spiral.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> which enumerates the tiles in a spiral, starting from <paramref name="center"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetFormationController(MHUrho.Logic.ITile)">
            <summary>
            Returns an <see cref="T:MHUrho.Control.IFormationController"/> that orders provided units to tiles around the <paramref name="center"/>
            </summary>
            <param name="center">Center tile the units should be ordered around</param>
            <returns>Returns an <see cref="T:MHUrho.Control.IFormationController"/> that orders provided units to tiles around the <paramref name="center"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTilesInRectangle(Urho.IntVector2,Urho.IntVector2)">
            <summary>
            Returns an enumerable that iterates over all the tiles in the given rectangle,
            specified by the <paramref name="topLeft"/> and <paramref name="bottomRight"/> corners
            Skips the parts of the rectangle outside of the map borders
            </summary>
            <param name="topLeft">top left corner of the rectangle</param>
            <param name="bottomRight">bottom right corner of the rectangle</param>
            <returns>Returns an enumerable that iterates over the tiles inside the rectangle</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTilesInRectangle(Urho.IntRect)">
            <summary>
            Returns an enumerable that iterates over all the tiles in the given rectangle
            Skips the parts of the rectangle outside of the map borders
            </summary>
            <param name="rectangle">The rectangle which the enumerable should iterate over</param>
            <returns>Returns an enumerable that iterates over the tiles inside the rectangle</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTilesAroundCorner(System.Int32,System.Int32)">
            <summary>
            Returns all four tiles around the corner at [<paramref name="x"/>,<paramref name="y"/>]
            </summary>
            <param name="x">The x coord of the corner.</param>
            <param name="y">The z coord of the corner.</param>
            <returns>The four tiles around the given corner.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetTilesAroundCorner(Urho.IntVector2)">
            <summary>
            Returns all four tiles around the corner at <paramref name="cornerCoords"/>
            </summary>
            <param name="cornerCoords">The coords of the corner.</param>
            <returns>The four tiles around the given corner.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToMap(Urho.Ray,System.Single)">
            <summary>
            Returns all results where the ray intersects the map.
            </summary>
            <param name="ray">The ray to raycast.</param>
            <param name="maxDistance">Maximum distance of the raycast.</param>
            <returns>All results where the ray intersects the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.IsRaycastToMap(Urho.RayQueryResult)">
            <summary>
            Returns whether the <paramref name="rayQueryResult"/> is the Map (the ray hit the map), or if it the ray hit something else
            </summary>
            <param name="rayQueryResult">RayQueryResult to check</param>
            <returns>Returns whether the <paramref name="rayQueryResult"/> is the Map</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToTile(System.Collections.Generic.List{Urho.RayQueryResult})">
            <summary>
            Returns the first tile with corresponding intersection in the <paramref name="rayQueryResults"/>
            or null if none of the intersections are wit ha tile.
            </summary>
            <param name="rayQueryResults">The intersections created by raycast.</param>
            <returns>The first tile with corresponding intersection in the <paramref name="rayQueryResults"/>, or null if none of the
            intersections are with a tile.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToTile(Urho.RayQueryResult)">
            <summary>
            Returns the tile the <paramref name="rayQueryResult"/> intersection is with or null if the intersection is not with a tile.
            </summary>
            <param name="rayQueryResult">An intersection with an object.</param>
            <returns>The tile the <paramref name="rayQueryResult"/> intersection is with or null if the intersection is not with a tile.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToVertexPosition(System.Collections.Generic.List{Urho.RayQueryResult})">
            <summary>
            Gets the world position of the closest vertex (tile corner) to the first intersection with a tile or null if there is no
            intersection with the map.
            </summary>
            <param name="rayQueryResults">The intersections of the raycast.</param>
            <returns>The world position of the closest vertex (tile corner) to the first intersection with a tile or null if there
            is no intersection with the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToVertexPosition(Urho.RayQueryResult)">
            <summary>
            Gets the world position of the closest vertex (tile corner) to the intersection <paramref name="rayQueryResult"/>
            if the intersection is with a tile, or null if it is not with a tile.
            </summary>
            <param name="rayQueryResult">The intersection result of a raycast.</param>
            <returns>World position of the closest vertex (tile corner) to the intersection or null if the intersection is not with a tile.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToVertex(System.Collections.Generic.List{Urho.RayQueryResult})">
            <summary>
            Gets the XZ location of the closest vertex (tile corner) to the ray
            </summary>
            <param name="rayQueryResults"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToVertex(Urho.RayQueryResult)">
            <summary>
            Gets the XZ location of the closest vertex (tile corner) to the ray
            </summary>
            <param name="rayQueryResult"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToWorldPosition(System.Collections.Generic.List{Urho.RayQueryResult})">
            <summary>
            Gets the world position of the ray intersecting the map
            </summary>
            <param name="rayQueryResults"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.RaycastToWorldPosition(Urho.RayQueryResult)">
            <summary>
            Gets the world position of the ray intersecting the map
            </summary>
            <param name="rayQueryResult"></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.ChangeTileHeight(MHUrho.Logic.ITile,Urho.IntVector2,System.Single)">
            <summary>
            For fast relative height changing in response to every mouse movement
            </summary>
            <param name="centerTile">center tile of the rectangle</param>
            <param name="rectangleSize">Size of the rectangle in which the height changes</param>
            <param name="heightDelta">By how much should the hight change</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.HighlightRectangle(MHUrho.Logic.ITile,Urho.IntVector2,System.Func{MHUrho.Logic.ITile,Urho.Color})">
            <summary>
            Highlights rectangle of size <paramref name="size"/> with tile 
            <paramref name="center"/> at its center
            Squishes the rectangle to map if it does not fit
            </summary>
            <param name="center">Tile at the center of the rectangle</param>
            <param name="size">Size of the highlighted rectangle</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.DisableHighlight">
            <summary>
            Hides highlight displayed by HighlightArea <see cref="!:HighlightArea(IntVector2, IntVector2, HighlightMode, Color)"/> or <see cref="!:HighlightArea(ITile, IntVector2, HighlightMode, Color)"/>
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.ForEachInRectangle(Urho.IntVector2,Urho.IntVector2,System.Action{MHUrho.Logic.ITile})">
            <summary>
            Invokes <paramref name="action"/> for each tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> 
            X between <paramref name="topLeft"/> and <paramref name="bottomRight"/>, including both <paramref name="topLeft"/> and <paramref name="bottomRight"/>
            Y between <paramref name="topLeft"/> and <paramref name="bottomRight"/>, including both <paramref name="topLeft"/> and <paramref name="bottomRight"/>
            </summary>
            <param name="topLeft">top left corner of the rectangle to iterate over</param>
            <param name="bottomRight">bottom right corner of the rectangle to iterate over</param>
            <param name="action">Action to invoke on each tile</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.ForEachInRectangle(Urho.IntRect,System.Action{MHUrho.Logic.ITile})">
            <summary>
            Invokes <paramref name="action"/> for each tile with <see cref="P:MHUrho.Logic.ITile.MapLocation"/> 
            X between <see cref="F:Urho.IntRect.Left"/> and <see cref="F:Urho.IntRect.Right"/>, including both <see cref="F:Urho.IntRect.Left"/> and <see cref="F:Urho.IntRect.Right"/>
            Y between <see cref="F:Urho.IntRect.Top"/> and <see cref="F:Urho.IntRect.Bottom"/>, including both <see cref="F:Urho.IntRect.Top"/> and <see cref="F:Urho.IntRect.Bottom"/>
            </summary>
            <param name="rectangle">Rectangle to iterate over</param>
            <param name="action">Action to invoke on each tile</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.ForEachAroundCorner(Urho.IntVector2,System.Action{MHUrho.Logic.ITile})">
            <summary>
            Invokes <paramref name="action"/> for each tile with the corner <paramref name="cornerCoords"/>
            For most corners, it will be the 4 tiles containing this corner
            For corners around the border, it may be less
            </summary>
            <param name="cornerCoords">Corner around which to get the tiles</param>
            <param name="action">Action to call for every tile around the corner</param>
        </member>
        <member name="M:MHUrho.WorldMap.IMap.GetRangeTarget(Urho.Vector3)">
            <summary>
            Gets a range target providing the ability to aim at the <paramref name="position"/>
            </summary>
            <param name="position">Position of the new range target</param>
            <returns>Returns a range target at the <paramref name="position"/></returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.Loader.StartLoading">
            <summary>
            Loads map data from storedMap
            
            After everything in the level Started loading,
            Next step is to call ConnectReferences() to connect references
            
            Last step is to FinishLoading, after all references are connected
            </summary>
            <returns>Map with loaded data, but without connected references and without geometry</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.Loader.FinishLoading">
            <summary>
            Builds geometry and releases stored data
            </summary>
        </member>
        <member name="T:MHUrho.WorldMap.Map.BorderTile">
            <summary>
            Tile for representation of the borders of the map.
            Is not visible outside the implementation of the map,
             so user, plugins and the rest of the platform cannot see it.
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Map.BorderTile.Loader.StartLoading">
            <summary>
            Loads everything apart from thigs referenced by ID
            
            After everything had it StartLoading called, call ConnectReferences on everything
            </summary>
            <param name="storedTile">Image of the tile</param>
            <param name="map">Map this tile is in</param>
            <returns>Partially initialized tile</returns>
        </member>
        <member name="P:MHUrho.WorldMap.Map.BorderTile.TopLeft">
            <summary>
            Location in the Map matrix
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.TopLeft">
            <summary>
            Coordinates of the top left tile of the playing map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.BottomRight">
            <summary>
            Coordinates of the bottom right tile of the playing map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Width">
            <summary>
            Width of the whole playing field
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Length">
            <summary>
            Length of the whole playing field
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Left">
            <summary>
            X coordinate of the left row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Right">
            <summary>
            X coordinate of the right row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Top">
            <summary>
            Y coordinate of the top row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.Bottom">
            <summary>
            Y coordinate of the bottom row of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.WidthWithBorders">
            <summary>
            Width of the whole map with borders included
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.LengthWithBorders">
            <summary>
            Length of the whole map with the borders included
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Map.CreateDefaultMap(MHUrho.Logic.LevelManager,Urho.Node,Urho.Octree,MHUrho.PathFinding.IPathFindAlgFactory,Urho.IntVector2,MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            Creates default map at height 0 with all tiles with the default type
            </summary>
            <param name="mapNode">Node to connect the map to</param>
            <param name="size">Size of the playing field, excluding the borders</param>
            <returns>Fully created map</returns>
            <exception cref="T:System.Exception">Exception might be thrown by <paramref name="pathFindAlg"/> factory</exception>
        </member>
        <member name="M:MHUrho.WorldMap.Map.#ctor(Urho.Node,Urho.Octree,System.Int32,System.Int32)">
            <summary>
            Creates map connected to mapNode with the PLAYING FIELD of width <paramref name="width"/> and length <paramref name="length"/>
            </summary>
            <param name="mapNode">Scene node representing the map.</param>
            <param name="octree">Octree of this level used for raycasting.</param>
            <param name="width">Width of the playing field without borders</param>
            <param name="length">Length of the playing field without borders</param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsInside(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsInside(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsInside(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsInside(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsInside(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsXInside(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsXInside(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsZInside(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsZInside(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.WhereIsX(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.WhereIsX(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.WhereIsZ(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.WhereIsZ(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByMapLocation(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByMapLocation(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByTopLeftCorner(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByTopLeftCorner(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByTopRightCorner(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByTopRightCorner(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByBottomLeftCorner(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByBottomLeftCorner(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByBottomRightCorner(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileByBottomRightCorner(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.SnapToMap(Urho.IntVector2@,Urho.IntVector2@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.SquishToMap(Urho.IntVector2@,Urho.IntVector2@)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.FindClosestTile(MHUrho.Logic.ITile,System.Predicate{MHUrho.Logic.ITile})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.FindClosestTile(MHUrho.Logic.ITile,System.Int32,System.Predicate{MHUrho.Logic.ITile})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTilesInSpiral(MHUrho.Logic.ITile,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetFormationController(MHUrho.Logic.ITile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTilesInRectangle(Urho.IntVector2,Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTilesInRectangle(Urho.IntRect)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTilesAroundCorner(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTilesAroundCorner(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToMap(Urho.Ray,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsRaycastToMap(Urho.RayQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToTile(System.Collections.Generic.List{Urho.RayQueryResult})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToTile(Urho.RayQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToVertexPosition(System.Collections.Generic.List{Urho.RayQueryResult})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToVertexPosition(Urho.RayQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToVertex(System.Collections.Generic.List{Urho.RayQueryResult})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToVertex(Urho.RayQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToWorldPosition(System.Collections.Generic.List{Urho.RayQueryResult})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RaycastToWorldPosition(Urho.RayQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeTileType(MHUrho.Logic.ITile,MHUrho.Logic.TileType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeTileType(MHUrho.Logic.ITile,Urho.IntVector2,MHUrho.Logic.TileType)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeTileHeight(MHUrho.Logic.ITile,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeTileHeight(MHUrho.Logic.ITile,Urho.IntVector2,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeTileHeight(MHUrho.Logic.ITile,Urho.IntVector2,MHUrho.WorldMap.GetCornerHeightDelegate)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTerrainHeightAt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTerrainHeightAt(Urho.IntVector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTerrainHeightAt(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTerrainHeightAt(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetHeightAt(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetHeightAt(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetUpDirectionAt(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetUpDirectionAt(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightCornerList(System.Collections.Generic.IEnumerable{Urho.IntVector2},Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightCornerList(System.Collections.Generic.IEnumerable{Urho.IntVector2},System.Func{Urho.IntVector2,Urho.Color})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightTileList(System.Collections.Generic.IEnumerable{MHUrho.Logic.ITile},System.Func{MHUrho.Logic.ITile,Urho.Color})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightTileList(System.Collections.Generic.IEnumerable{MHUrho.Logic.ITile},Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(Urho.IntVector2,Urho.IntVector2,System.Func{MHUrho.Logic.ITile,Urho.Color})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(MHUrho.Logic.ITile,Urho.IntVector2,System.Func{MHUrho.Logic.ITile,Urho.Color})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(Urho.IntRect,System.Func{MHUrho.Logic.ITile,Urho.Color})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(Urho.IntVector2,Urho.IntVector2,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(MHUrho.Logic.ITile,Urho.IntVector2,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangle(Urho.IntRect,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangleBorder(Urho.IntVector2,Urho.IntVector2,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangleBorder(MHUrho.Logic.ITile,Urho.IntVector2,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.HighlightRectangleBorder(Urho.IntRect,Urho.Color)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.DisableHighlight">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeHeight(System.Collections.Generic.IEnumerable{Urho.IntVector2},System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeHeightTo(System.Collections.Generic.IEnumerable{Urho.IntVector2},System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetContainingTile(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetContainingTile(Urho.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetContainingTile(System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ForEachInRectangle(Urho.IntVector2,Urho.IntVector2,System.Action{MHUrho.Logic.ITile})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ForEachInRectangle(Urho.IntRect,System.Action{MHUrho.Logic.ITile})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.ForEachAroundCorner(Urho.IntVector2,System.Action{MHUrho.Logic.ITile})">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetRangeTarget(Urho.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetBorderBetweenTiles(MHUrho.Logic.ITile,MHUrho.Logic.ITile)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.RemoveRangeTarget(MHUrho.WorldMap.MapRangeTarget)">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MHUrho.WorldMap.Map.BuildGeometry(MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            Creates graphical representation of the map.
            </summary>
            <param name="loadingProgress">Progress watcher for the creation process.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileIndex(System.Int32,System.Int32)">
            <summary>
            Returns the index of the tile with top left corner at [<paramref name="x"/>, <paramref name="y"/>].
            </summary>
            <param name="x">The X coordinate of the top left corner of the tile.</param>
            <param name="y">The Z coordinate of the top left corner of the tile.</param>
            <returns>Index in the tile array.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileIndex(Urho.IntVector2)">
            <summary>
            Returns the index of the tile with top left corner at <paramref name="location"/>.
            </summary>
            <param name="location">Location of the top left corner of the tile in the XZ plane.</param>
            <returns>Index in the tile array.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileIndex(MHUrho.Logic.ITile)">
            <summary>
            Returns the index of the <paramref name="tile"/>.
            </summary>
            <param name="tile">The tile to get the index of.</param>
            <returns>Index in the tile array.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsOuterBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the [<paramref name="x"/>, <paramref name="y"/>] point in the XZ plane is on the outer edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Z coordinate of the point.</param>
            <returns>If the point is on the outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsOuterBorderPoint(Urho.IntVector2)">
            <summary>
            If the <paramref name="location"/> in the XZ plane is on the outer edge of the map.
            </summary>
            <param name="location">Location.</param>
            <returns>If the point is on the outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsBorderTileMapLocation(System.Int32,System.Int32)">
            <summary>
            If the given [<paramref name="x"/>, <paramref name="y"/>] point is top left corner of a <see cref="T:MHUrho.WorldMap.Map.BorderTile"/>.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Z coordinate of the point.</param>
            <returns>True if the point is a top left corner of a <see cref="T:MHUrho.WorldMap.Map.BorderTile"/>.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsBorderTileMapLocation(Urho.IntVector2)">
            <summary>
            If the given <paramref name="point"/> is top left corner of a <see cref="T:MHUrho.WorldMap.Map.BorderTile"/>.
            </summary>
            <param name="point">Point..</param>
            <returns>True if the point is a top left corner of a <see cref="T:MHUrho.WorldMap.Map.BorderTile"/>.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsBorderTile(MHUrho.Logic.ITile)">
            <summary>
            If the given tile is a borderTile.
            </summary>
            <param name="tile">The tile to check.</param>
            <returns>True if the tile is border tile, false otherwise.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetBorderTileType(System.Int32,System.Int32)">
            <summary>
            Gets which part of the border the border tile is at, top, bottom, left, right or the corners.
            </summary>
            <param name="tileMapLocationX">The X coordinate of the top left corner of the tile.</param>
            <param name="tileMapLocationY">The Y coordinate of the top left corner of the tile.</param>
            <returns>Which area of the border the border tile is in.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetBorderTileType(Urho.IntVector2)">
            <summary>
            Gets which part of the border the border tile is at, top, bottom, left, right or the corners.
            </summary>
            <param name="tileMapLocation">Top left corner of the tile.</param>
            <returns>Which area of the border the border tile is in.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsTopOuterBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the point is on the top outer edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
            <returns>True if the point is on the top outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsBottomOuterBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the point is on the bottom outer edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
            <returns>True if the point is on the bottom outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsLeftOuterBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the point is on the left outer edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
            <returns>True if the point is on the left outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsRightOuterBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the point is on the right outer edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
            <returns>True if the point is on the right outer edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.IsTopInnerBorderPoint(System.Int32,System.Int32)">
            <summary>
            If the point is on the top inner edge of the map.
            </summary>
            <param name="x">The X coordinate of the point.</param>
            <param name="y">The Y coordinate of the point.</param>
            <returns>True if the point is on the top inner edge of the map.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.GetTileWithBorders(System.Int32,System.Int32)">
            <summary>
            Gets tile by topLeft corner coordinates
            </summary>
            <param name="x">top left corner X coord</param>
            <param name="y">top left corner Y coord</param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.ChangeCornerHeight(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Changes heights in the logic tiles, does not change the height in the map model
            </summary>
            <param name="x">The x coord of the corner to change.</param>
            <param name="y">The y coord of the corner to change.</param>
            <param name="height">Either the height to set the corner to (<paramref name="absolute"/> == true),
            or the relative change of the height(<paramref name="absolute"/> == false).</param>
            <param name="absolute">If the <paramref name="height"/> is absolute or relative.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.MapChunk.TileInVB.CalculateLocalNormals">
            <summary>
            Creates normals just from this tile, disregarding the angle of surrounding tiles
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.MapChunk.TileInVB.AverageNormalNotNormalized(Urho.Vector3@,Urho.Vector3@,Urho.Vector3@,Urho.Vector3@)">
            <summary>
            Gets the average vector of the normals of the two adjacent triangles
            
            This normal vector is not normalized yet
            </summary>
            <param name="center">the point where the normal vector originates</param>
            <param name="first">first vector in counterclockwise direction</param>
            <param name="second">second vector in counterclockwise direction</param>
            <param name="third">third vector in counterclockwise direction</param>
            <returns>Not normalized normal vector</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.MapChunk.TileInIB.Rotate">
            <summary>
            Rotates the split in the quad
            </summary>
        </member>
        <member name="F:MHUrho.WorldMap.Map.MapGraphics.MapChunk.bottomRightTileTLCorner">
             <summary>
             Top left corner of the bottom right tile
            
             Tiles are referenced by their top left corner
             </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Map.MapGraphics.MapChunk.Size">
             <summary>
             Size in tiles
            
             In verticies, the size is +1 in both directions
             </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.MapChunk.CorrectTileHeight(System.Int32,System.Int32)">
            <summary>
            Changes tile height to the height of the logical tiles
            </summary>
            <param name="topLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.RectangleOperation.ChangeTileType(MHUrho.Logic.TileType)">
            <summary>
            Changes whole rectangle of tiles to <paramref name="newTileType"/>
            </summary>
            <param name="newTileType"></param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.Build(MHUrho.WorldMap.Map,Urho.IntVector2,MHUrho.Packaging.IProgressEventWatcher)">
            <summary>
            Creates a graphical representation of the <paramref name="map"/>.
            </summary>
            <param name="map"></param>
            <param name="chunkSize">Size of chunks the map will be divided into, <see cref="P:MHUrho.WorldMap.Map.Width"/> and <see cref="P:MHUrho.WorldMap.Map.Length"/>
            of <paramref name="map"/> has to be divisible by <paramref name="chunkSize"/></param>
            <returns></returns>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.ChangeTileType(Urho.IntVector2,Urho.IntVector2,MHUrho.Logic.TileType)">
            <summary>
            Changes whole rectangle of tiles to <paramref name="newTileType"/>
            </summary>
            <param name="topLeft"></param>
            <param name="newTileType"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.CorrectTileHeight(Urho.IntVector2,Urho.IntVector2)">
            <summary>
            Changes tile height to the height of the logical tiles
            </summary>
            <param name="topLeft"></param>
            <param name="bottomRight"></param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.HighlightCorner(Urho.IntVector2,Urho.Color)">
            <summary>
            Adds highlight of the <paramref name="corner"/>
            Works only with <see cref="F:Urho.PrimitiveType.TriangleList"/>
            </summary>
            <param name="corner">The corner that will be highlighted in <paramref name="color"/></param>
            <param name="color">Color of the highlighted rectangle</param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.DefineHighlightTriangle(Urho.Vector3,Urho.Vector3,Urho.Vector3,Urho.Color)">
            <summary>
            Defines a triangle with color <paramref name="color"/>
            <see cref="F:MHUrho.WorldMap.Map.MapGraphics.highlight"/> must be set to <see cref="F:Urho.PrimitiveType.TriangleList"/>
            Automatically adds <see cref="F:MHUrho.WorldMap.Map.MapGraphics.HighlightAboveTerrainOffset"/> offset to positions
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
            <param name="color"></param>
        </member>
        <member name="M:MHUrho.WorldMap.Map.MapGraphics.DefineHighlightTriangle(Urho.Vector3,Urho.Vector3,Urho.Vector3,Urho.Color,Urho.Color,Urho.Color)">
            <summary>
            Defines a triangle with vertex colors
            <see cref="F:MHUrho.WorldMap.Map.MapGraphics.highlight"/> must be set to <see cref="F:Urho.PrimitiveType.TriangleList"/>
            Automatically adds <see cref="F:MHUrho.WorldMap.Map.MapGraphics.HighlightAboveTerrainOffset"/> offset to positions
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="third"></param>
            <param name="firstColor"></param>
            <param name="secondColor"></param>
            <param name="thirdColor"></param>
        </member>
        <member name="M:MHUrho.WorldMap.MapFormationController.MoveToFormation(MHUrho.Control.UnitGroup)">
            <summary>
            Creates a spiral around the provided tile
            </summary>
            <param name="units"></param>
        </member>
        <member name="T:MHUrho.WorldMap.Minimap">
            <summary>
            Provides a 2D representation of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Minimap.Texture">
            <summary>
            The 2D representation of the map
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Minimap.RefreshRate">
            <summary>
            The frequency of updates of the state showed by minimap.
            </summary>
        </member>
        <member name="F:MHUrho.WorldMap.Minimap.level">
            <summary>
            The level this minimap is displaying the state of.
            </summary>
        </member>
        <member name="P:MHUrho.WorldMap.Minimap.Map">
            <summary>
            Map of the level
            </summary>
        </member>
        <member name="F:MHUrho.WorldMap.Minimap.pixelsPerTile">
            <summary>
            In both width and height, because tiles are square even in the minimap
            </summary>
        </member>
        <member name="F:MHUrho.WorldMap.Minimap.topLeftPosition">
             <summary>
             Position of the top left corner of the rectangle displayed by minimap
            
             Top left as in the map meaning, left as lowest x coord, top as lowest z coord.
             </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.#ctor(MHUrho.Logic.ILevelManager,System.Single)">
            <summary>
            Creates new instance of minimap to display the state of the <paramref name="level"/> updated
            <paramref name="refreshRate"/> times per second.
            </summary>
            <param name="level">The level to display by this minimap.</param>
            <param name="refreshRate">The number of updates per second.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.Refresh">
            <summary>
            Trigger the update of the minimap.
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.OnUpdate(System.Single)">
            <summary>
            Step the timer to automatic refresh.
            </summary>
            <param name="timeStep">The time to step the timer.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.MoveTo(Urho.IntVector2)">
            <summary>
            Move the displayed area to <paramref name="centerTileMapLocation"/> where <paramref name="centerTileMapLocation"/> will
             be displayed at the center of the minimap.
            </summary>
            <param name="centerTileMapLocation">The coordinates to display at the center of the minimap.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.MoveTo(MHUrho.Logic.ITile)">
            <summary>
            Move the displayed area to have <paramref name="centerTile"/> displayed at the center of the minimap.
            </summary>
            <param name="centerTile">The tile to display at the center of the minimap.</param>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.Zoom(System.Int32)">
            <summary>
            Changes the size of the displayed part of the map.
            </summary>
            <param name="times">How much zoom, + is zoom in, - is zoom out</param>
            <returns>true if it is possible to zoom further in the given direction, false if not</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.MinimapToWorld(Urho.IntVector2)">
            <summary>
            Converts position on the minimap to a position in the world map.
            </summary>
            <param name="minimapPosition">The position on the minimap.</param>
            <returns>The position in the world map corresponding to the <paramref name="minimapPosition"/>.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.WorldToMinimap(Urho.Vector2)">
            <summary>
            Converts coordinates from world position to a position on the minimap.
            </summary>
            <param name="worldPosition">The position in the world map to convert.</param>
            <returns>The position on the minimap corresponding to the <paramref name="worldPosition"/>.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.Dispose">
            <summary>
            Releases all resources held by this instance.
            </summary>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.GetTileColor(Urho.IntVector2)">
            <summary>
            Gets the color to display on the minimap for the tile at <paramref name="tileMapLocation"/>
            </summary>
            <param name="tileMapLocation">The location of tile to get the color of.</param>
            <returns>RGBA color to display for the tile at <paramref name="tileMapLocation"/>.</returns>
        </member>
        <member name="M:MHUrho.WorldMap.Minimap.GetTileColor(MHUrho.Logic.ITile)">
            <summary>
            Gets the color to display on the minimap for the <paramref name="tile"/>.
            </summary>
            <param name="tile">The tile to get the color of.</param>
            <returns>RGBA color to display for the <paramref name="tile"/>.</returns>
        </member>
        <member name="E:MHUrho.WorldMap.TileHeightChangeNotifier.TileHeightsChangedCol">
            <summary>
            Occurs when height of any tile in the map changes
            Gets called with the changed tile as arguments
            </summary>
        </member>
    </members>
</doc>
