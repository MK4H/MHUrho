// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MHUrho.Storage {

  /// <summary>Holder for reflection information generated from GameState.proto</summary>
  public static partial class GameStateReflection {

    #region Descriptor
    /// <summary>File descriptor for GameState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lU3RhdGUucHJvdG8SDk1IVXJoby5TdG9yYWdlGg9VcmhvVHlwZXMu",
            "cHJvdG8aE1BsdWdpblN0b3JhZ2UucHJvdG8aEU1IVXJob1R5cGVzLnByb3Rv",
            "IrkCCgdTdExldmVsEiIKA21hcBgBIAEoCzIVLk1IVXJoby5TdG9yYWdlLlN0",
            "TWFwEiUKBXVuaXRzGAIgAygLMhYuTUhVcmhvLlN0b3JhZ2UuU3RVbml0Ei0K",
            "CWJ1aWxkaW5ncxgDIAMoCzIaLk1IVXJoby5TdG9yYWdlLlN0QnVpbGRpbmcS",
            "MQoLcHJvamVjdGlsZXMYBCADKAsyHC5NSFVyaG8uU3RvcmFnZS5TdFByb2pl",
            "Y3RpbGUSKgoHcGxheWVycxgFIAEoCzIZLk1IVXJoby5TdG9yYWdlLlN0UGxh",
            "eWVycxITCgtwYWNrYWdlTmFtZRgGIAEoCRIRCglsZXZlbE5hbWUYByABKAkS",
            "LQoGcGx1Z2luGAggASgLMh0uTUhVcmhvLlN0b3JhZ2UuU3RMZXZlbFBsdWdp",
            "biJ0CgZTdFRpbGUSDwoHdW5pdElEcxgCIAMoBRISCgp0aWxlVHlwZUlEGAMg",
            "ASgFEjUKD3RvcExlZnRQb3NpdGlvbhgEIAEoCzIcLk1IVXJoby5TdG9yYWdl",
            "LlN0SW50VmVjdG9yMhIOCgZoZWlnaHQYBSABKAIiowEKDFN0Qm9yZGVyVGls",
            "ZRI1Cg90b3BMZWZ0UG9zaXRpb24YASABKAsyHC5NSFVyaG8uU3RvcmFnZS5T",
            "dEludFZlY3RvcjISFQoNdG9wTGVmdEhlaWdodBgCIAEoAhIWCg50b3BSaWdo",
            "dEhlaWdodBgDIAEoAhIVCg1ib3RMZWZ0SGVpZ2h0GAQgASgCEhYKDmJvdFJp",
            "Z2h0SGVpZ2h0GAUgASgCIk4KC1N0TWFwVGFyZ2V0EhIKCmluc3RhbmNlSUQY",
            "ASABKAUSKwoIcG9zaXRpb24YAiABKAsyGS5NSFVyaG8uU3RvcmFnZS5TdFZl",
            "Y3RvcjMi6AEKBlN0VW5pdBIKCgJpZBgBIAEoBRIOCgZ0eXBlSUQYAiABKAUS",
            "KwoIcG9zaXRpb24YAyABKAsyGS5NSFVyaG8uU3RvcmFnZS5TdFZlY3RvcjMS",
            "EAoIcGxheWVySUQYBCABKAUSFAoMdGFyZ2V0VW5pdElEGAUgASgFEi4KCnVz",
            "ZXJQbHVnaW4YBiABKAsyGi5NSFVyaG8uU3RvcmFnZS5QbHVnaW5EYXRhEj0K",
            "EWRlZmF1bHRDb21wb25lbnRzGAcgAygLMiIuTUhVcmhvLlN0b3JhZ2UuU3RE",
            "ZWZhdWx0Q29tcG9uZW50ItgBCgxTdFByb2plY3RpbGUSCgoCaWQYASABKAUS",
            "DgoGdHlwZUlEGAIgASgFEisKCHBvc2l0aW9uGAMgASgLMhkuTUhVcmhvLlN0",
            "b3JhZ2UuU3RWZWN0b3IzEhAKCHBsYXllcklEGAQgASgFEi4KCnVzZXJQbHVn",
            "aW4YBSABKAsyGi5NSFVyaG8uU3RvcmFnZS5QbHVnaW5EYXRhEj0KEWRlZmF1",
            "bHRDb21wb25lbnRzGAYgAygLMiIuTUhVcmhvLlN0b3JhZ2UuU3REZWZhdWx0",
            "Q29tcG9uZW50ItkBCgpTdEJ1aWxkaW5nEgoKAmlkGAEgASgFEg4KBnR5cGVJ",
            "RBgCIAEoBRIuCghsb2NhdGlvbhgDIAEoCzIcLk1IVXJoby5TdG9yYWdlLlN0",
            "SW50VmVjdG9yMhIQCghwbGF5ZXJJRBgEIAEoBRIuCgp1c2VyUGx1Z2luGAYg",
            "ASgLMhouTUhVcmhvLlN0b3JhZ2UuUGx1Z2luRGF0YRI9ChFkZWZhdWx0Q29t",
            "cG9uZW50cxgHIAMoCzIiLk1IVXJoby5TdG9yYWdlLlN0RGVmYXVsdENvbXBv",
            "bmVudCJqCglTdFBsYXllcnMSGQoRcGxheWVyV2l0aElucHV0SUQYASABKAUS",
            "FwoPbmV1dHJhbFBsYXllcklEGAIgASgFEikKB3BsYXllcnMYAyADKAsyGC5N",
            "SFVyaG8uU3RvcmFnZS5TdFBsYXllciKgAQoIU3RQbGF5ZXISCgoCaWQYASAB",
            "KAUSDgoGdGVhbUlEGAIgASgFEg4KBnR5cGVJRBgDIAEoBRISCgppbnNpZ25p",
            "YUlEGAQgASgFEg8KB3VuaXRJRHMYBSADKAUSEwoLYnVpbGRpbmdJRHMYBiAD",
            "KAUSLgoKdXNlclBsdWdpbhgHIAEoCzIaLk1IVXJoby5TdG9yYWdlLlBsdWdp",
            "bkRhdGEiwwEKBVN0TWFwEioKBHNpemUYASABKAsyHC5NSFVyaG8uU3RvcmFn",
            "ZS5TdEludFZlY3RvcjISJQoFdGlsZXMYAiADKAsyFi5NSFVyaG8uU3RvcmFn",
            "ZS5TdFRpbGUSMQoLYm9yZGVyVGlsZXMYAyADKAsyHC5NSFVyaG8uU3RvcmFn",
            "ZS5TdEJvcmRlclRpbGUSNAoPbWFwUmFuZ2VUYXJnZXRzGAQgAygLMhsuTUhV",
            "cmhvLlN0b3JhZ2UuU3RNYXBUYXJnZXQiSQoNU3RMZXZlbFBsdWdpbhIOCgZ0",
            "eXBlSUQYASABKAUSKAoEZGF0YRgCIAEoCzIaLk1IVXJoby5TdG9yYWdlLlBs",
            "dWdpbkRhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MHUrho.Storage.UrhoTypesReflection.Descriptor, global::MHUrho.Storage.PluginStorageReflection.Descriptor, global::MHUrho.Storage.MHUrhoTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StLevel), global::MHUrho.Storage.StLevel.Parser, new[]{ "Map", "Units", "Buildings", "Projectiles", "Players", "PackageName", "LevelName", "Plugin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StTile), global::MHUrho.Storage.StTile.Parser, new[]{ "UnitIDs", "TileTypeID", "TopLeftPosition", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StBorderTile), global::MHUrho.Storage.StBorderTile.Parser, new[]{ "TopLeftPosition", "TopLeftHeight", "TopRightHeight", "BotLeftHeight", "BotRightHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StMapTarget), global::MHUrho.Storage.StMapTarget.Parser, new[]{ "InstanceID", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StUnit), global::MHUrho.Storage.StUnit.Parser, new[]{ "Id", "TypeID", "Position", "PlayerID", "TargetUnitID", "UserPlugin", "DefaultComponents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StProjectile), global::MHUrho.Storage.StProjectile.Parser, new[]{ "Id", "TypeID", "Position", "PlayerID", "UserPlugin", "DefaultComponents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StBuilding), global::MHUrho.Storage.StBuilding.Parser, new[]{ "Id", "TypeID", "Location", "PlayerID", "UserPlugin", "DefaultComponents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPlayers), global::MHUrho.Storage.StPlayers.Parser, new[]{ "PlayerWithInputID", "NeutralPlayerID", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPlayer), global::MHUrho.Storage.StPlayer.Parser, new[]{ "Id", "TeamID", "TypeID", "InsigniaID", "UnitIDs", "BuildingIDs", "UserPlugin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StMap), global::MHUrho.Storage.StMap.Parser, new[]{ "Size", "Tiles", "BorderTiles", "MapRangeTargets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StLevelPlugin), global::MHUrho.Storage.StLevelPlugin.Parser, new[]{ "TypeID", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StLevel : pb::IMessage<StLevel> {
    private static readonly pb::MessageParser<StLevel> _parser = new pb::MessageParser<StLevel>(() => new StLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel(StLevel other) : this() {
      Map = other.map_ != null ? other.Map.Clone() : null;
      units_ = other.units_.Clone();
      buildings_ = other.buildings_.Clone();
      projectiles_ = other.projectiles_.Clone();
      Players = other.players_ != null ? other.Players.Clone() : null;
      packageName_ = other.packageName_;
      levelName_ = other.levelName_;
      Plugin = other.plugin_ != null ? other.Plugin.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel Clone() {
      return new StLevel(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private global::MHUrho.Storage.StMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.StUnit.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StUnit> units_ = new pbc::RepeatedField<global::MHUrho.Storage.StUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StUnit> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(26, global::MHUrho.Storage.StBuilding.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StBuilding> buildings_ = new pbc::RepeatedField<global::MHUrho.Storage.StBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StBuilding> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "projectiles" field.</summary>
    public const int ProjectilesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StProjectile> _repeated_projectiles_codec
        = pb::FieldCodec.ForMessage(34, global::MHUrho.Storage.StProjectile.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StProjectile> projectiles_ = new pbc::RepeatedField<global::MHUrho.Storage.StProjectile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StProjectile> Projectiles {
      get { return projectiles_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 5;
    private global::MHUrho.Storage.StPlayers players_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StPlayers Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    /// <summary>Field number for the "packageName" field.</summary>
    public const int PackageNameFieldNumber = 6;
    private string packageName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackageName {
      get { return packageName_; }
      set {
        packageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "levelName" field.</summary>
    public const int LevelNameFieldNumber = 7;
    private string levelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelName {
      get { return levelName_; }
      set {
        levelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plugin" field.</summary>
    public const int PluginFieldNumber = 8;
    private global::MHUrho.Storage.StLevelPlugin plugin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StLevelPlugin Plugin {
      get { return plugin_; }
      set {
        plugin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Map, other.Map)) return false;
      if(!units_.Equals(other.units_)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      if(!projectiles_.Equals(other.projectiles_)) return false;
      if (!object.Equals(Players, other.Players)) return false;
      if (PackageName != other.PackageName) return false;
      if (LevelName != other.LevelName) return false;
      if (!object.Equals(Plugin, other.Plugin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_ != null) hash ^= Map.GetHashCode();
      hash ^= units_.GetHashCode();
      hash ^= buildings_.GetHashCode();
      hash ^= projectiles_.GetHashCode();
      if (players_ != null) hash ^= Players.GetHashCode();
      if (PackageName.Length != 0) hash ^= PackageName.GetHashCode();
      if (LevelName.Length != 0) hash ^= LevelName.GetHashCode();
      if (plugin_ != null) hash ^= Plugin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Map);
      }
      units_.WriteTo(output, _repeated_units_codec);
      buildings_.WriteTo(output, _repeated_buildings_codec);
      projectiles_.WriteTo(output, _repeated_projectiles_codec);
      if (players_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Players);
      }
      if (PackageName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PackageName);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(LevelName);
      }
      if (plugin_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Plugin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      size += projectiles_.CalculateSize(_repeated_projectiles_codec);
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      if (PackageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackageName);
      }
      if (LevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelName);
      }
      if (plugin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plugin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StLevel other) {
      if (other == null) {
        return;
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::MHUrho.Storage.StMap();
        }
        Map.MergeFrom(other.Map);
      }
      units_.Add(other.units_);
      buildings_.Add(other.buildings_);
      projectiles_.Add(other.projectiles_);
      if (other.players_ != null) {
        if (players_ == null) {
          players_ = new global::MHUrho.Storage.StPlayers();
        }
        Players.MergeFrom(other.Players);
      }
      if (other.PackageName.Length != 0) {
        PackageName = other.PackageName;
      }
      if (other.LevelName.Length != 0) {
        LevelName = other.LevelName;
      }
      if (other.plugin_ != null) {
        if (plugin_ == null) {
          plugin_ = new global::MHUrho.Storage.StLevelPlugin();
        }
        Plugin.MergeFrom(other.Plugin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (map_ == null) {
              map_ = new global::MHUrho.Storage.StMap();
            }
            input.ReadMessage(map_);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 34: {
            projectiles_.AddEntriesFrom(input, _repeated_projectiles_codec);
            break;
          }
          case 42: {
            if (players_ == null) {
              players_ = new global::MHUrho.Storage.StPlayers();
            }
            input.ReadMessage(players_);
            break;
          }
          case 50: {
            PackageName = input.ReadString();
            break;
          }
          case 58: {
            LevelName = input.ReadString();
            break;
          }
          case 66: {
            if (plugin_ == null) {
              plugin_ = new global::MHUrho.Storage.StLevelPlugin();
            }
            input.ReadMessage(plugin_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StTile : pb::IMessage<StTile> {
    private static readonly pb::MessageParser<StTile> _parser = new pb::MessageParser<StTile>(() => new StTile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile(StTile other) : this() {
      unitIDs_ = other.unitIDs_.Clone();
      tileTypeID_ = other.tileTypeID_;
      TopLeftPosition = other.topLeftPosition_ != null ? other.TopLeftPosition.Clone() : null;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile Clone() {
      return new StTile(this);
    }

    /// <summary>Field number for the "unitIDs" field.</summary>
    public const int UnitIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_unitIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> unitIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnitIDs {
      get { return unitIDs_; }
    }

    /// <summary>Field number for the "tileTypeID" field.</summary>
    public const int TileTypeIDFieldNumber = 3;
    private int tileTypeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileTypeID {
      get { return tileTypeID_; }
      set {
        tileTypeID_ = value;
      }
    }

    /// <summary>Field number for the "topLeftPosition" field.</summary>
    public const int TopLeftPositionFieldNumber = 4;
    private global::MHUrho.Storage.StIntVector2 topLeftPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 TopLeftPosition {
      get { return topLeftPosition_; }
      set {
        topLeftPosition_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unitIDs_.Equals(other.unitIDs_)) return false;
      if (TileTypeID != other.TileTypeID) return false;
      if (!object.Equals(TopLeftPosition, other.TopLeftPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unitIDs_.GetHashCode();
      if (TileTypeID != 0) hash ^= TileTypeID.GetHashCode();
      if (topLeftPosition_ != null) hash ^= TopLeftPosition.GetHashCode();
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unitIDs_.WriteTo(output, _repeated_unitIDs_codec);
      if (TileTypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TileTypeID);
      }
      if (topLeftPosition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TopLeftPosition);
      }
      if (Height != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unitIDs_.CalculateSize(_repeated_unitIDs_codec);
      if (TileTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileTypeID);
      }
      if (topLeftPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeftPosition);
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StTile other) {
      if (other == null) {
        return;
      }
      unitIDs_.Add(other.unitIDs_);
      if (other.TileTypeID != 0) {
        TileTypeID = other.TileTypeID;
      }
      if (other.topLeftPosition_ != null) {
        if (topLeftPosition_ == null) {
          topLeftPosition_ = new global::MHUrho.Storage.StIntVector2();
        }
        TopLeftPosition.MergeFrom(other.TopLeftPosition);
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18:
          case 16: {
            unitIDs_.AddEntriesFrom(input, _repeated_unitIDs_codec);
            break;
          }
          case 24: {
            TileTypeID = input.ReadInt32();
            break;
          }
          case 34: {
            if (topLeftPosition_ == null) {
              topLeftPosition_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(topLeftPosition_);
            break;
          }
          case 45: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StBorderTile : pb::IMessage<StBorderTile> {
    private static readonly pb::MessageParser<StBorderTile> _parser = new pb::MessageParser<StBorderTile>(() => new StBorderTile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StBorderTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBorderTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBorderTile(StBorderTile other) : this() {
      TopLeftPosition = other.topLeftPosition_ != null ? other.TopLeftPosition.Clone() : null;
      topLeftHeight_ = other.topLeftHeight_;
      topRightHeight_ = other.topRightHeight_;
      botLeftHeight_ = other.botLeftHeight_;
      botRightHeight_ = other.botRightHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBorderTile Clone() {
      return new StBorderTile(this);
    }

    /// <summary>Field number for the "topLeftPosition" field.</summary>
    public const int TopLeftPositionFieldNumber = 1;
    private global::MHUrho.Storage.StIntVector2 topLeftPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 TopLeftPosition {
      get { return topLeftPosition_; }
      set {
        topLeftPosition_ = value;
      }
    }

    /// <summary>Field number for the "topLeftHeight" field.</summary>
    public const int TopLeftHeightFieldNumber = 2;
    private float topLeftHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopLeftHeight {
      get { return topLeftHeight_; }
      set {
        topLeftHeight_ = value;
      }
    }

    /// <summary>Field number for the "topRightHeight" field.</summary>
    public const int TopRightHeightFieldNumber = 3;
    private float topRightHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TopRightHeight {
      get { return topRightHeight_; }
      set {
        topRightHeight_ = value;
      }
    }

    /// <summary>Field number for the "botLeftHeight" field.</summary>
    public const int BotLeftHeightFieldNumber = 4;
    private float botLeftHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BotLeftHeight {
      get { return botLeftHeight_; }
      set {
        botLeftHeight_ = value;
      }
    }

    /// <summary>Field number for the "botRightHeight" field.</summary>
    public const int BotRightHeightFieldNumber = 5;
    private float botRightHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BotRightHeight {
      get { return botRightHeight_; }
      set {
        botRightHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StBorderTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StBorderTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TopLeftPosition, other.TopLeftPosition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TopLeftHeight, other.TopLeftHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TopRightHeight, other.TopRightHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BotLeftHeight, other.BotLeftHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BotRightHeight, other.BotRightHeight)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (topLeftPosition_ != null) hash ^= TopLeftPosition.GetHashCode();
      if (TopLeftHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TopLeftHeight);
      if (TopRightHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TopRightHeight);
      if (BotLeftHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BotLeftHeight);
      if (BotRightHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BotRightHeight);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (topLeftPosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TopLeftPosition);
      }
      if (TopLeftHeight != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TopLeftHeight);
      }
      if (TopRightHeight != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TopRightHeight);
      }
      if (BotLeftHeight != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BotLeftHeight);
      }
      if (BotRightHeight != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BotRightHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (topLeftPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeftPosition);
      }
      if (TopLeftHeight != 0F) {
        size += 1 + 4;
      }
      if (TopRightHeight != 0F) {
        size += 1 + 4;
      }
      if (BotLeftHeight != 0F) {
        size += 1 + 4;
      }
      if (BotRightHeight != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StBorderTile other) {
      if (other == null) {
        return;
      }
      if (other.topLeftPosition_ != null) {
        if (topLeftPosition_ == null) {
          topLeftPosition_ = new global::MHUrho.Storage.StIntVector2();
        }
        TopLeftPosition.MergeFrom(other.TopLeftPosition);
      }
      if (other.TopLeftHeight != 0F) {
        TopLeftHeight = other.TopLeftHeight;
      }
      if (other.TopRightHeight != 0F) {
        TopRightHeight = other.TopRightHeight;
      }
      if (other.BotLeftHeight != 0F) {
        BotLeftHeight = other.BotLeftHeight;
      }
      if (other.BotRightHeight != 0F) {
        BotRightHeight = other.BotRightHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (topLeftPosition_ == null) {
              topLeftPosition_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(topLeftPosition_);
            break;
          }
          case 21: {
            TopLeftHeight = input.ReadFloat();
            break;
          }
          case 29: {
            TopRightHeight = input.ReadFloat();
            break;
          }
          case 37: {
            BotLeftHeight = input.ReadFloat();
            break;
          }
          case 45: {
            BotRightHeight = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StMapTarget : pb::IMessage<StMapTarget> {
    private static readonly pb::MessageParser<StMapTarget> _parser = new pb::MessageParser<StMapTarget>(() => new StMapTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StMapTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMapTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMapTarget(StMapTarget other) : this() {
      instanceID_ = other.instanceID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMapTarget Clone() {
      return new StMapTarget(this);
    }

    /// <summary>Field number for the "instanceID" field.</summary>
    public const int InstanceIDFieldNumber = 1;
    private int instanceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InstanceID {
      get { return instanceID_; }
      set {
        instanceID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::MHUrho.Storage.StVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StMapTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StMapTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceID != other.InstanceID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceID != 0) hash ^= InstanceID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InstanceID);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InstanceID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StMapTarget other) {
      if (other == null) {
        return;
      }
      if (other.InstanceID != 0) {
        InstanceID = other.InstanceID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.StVector3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstanceID = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.StVector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StUnit : pb::IMessage<StUnit> {
    private static readonly pb::MessageParser<StUnit> _parser = new pb::MessageParser<StUnit>(() => new StUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit(StUnit other) : this() {
      id_ = other.id_;
      typeID_ = other.typeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      playerID_ = other.playerID_;
      targetUnitID_ = other.targetUnitID_;
      UserPlugin = other.userPlugin_ != null ? other.UserPlugin.Clone() : null;
      defaultComponents_ = other.defaultComponents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit Clone() {
      return new StUnit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::MHUrho.Storage.StVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 4;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 5;
    private int targetUnitID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    /// <summary>Field number for the "userPlugin" field.</summary>
    public const int UserPluginFieldNumber = 6;
    private global::MHUrho.Storage.PluginData userPlugin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.PluginData UserPlugin {
      get { return userPlugin_; }
      set {
        userPlugin_ = value;
      }
    }

    /// <summary>Field number for the "defaultComponents" field.</summary>
    public const int DefaultComponentsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StDefaultComponent> _repeated_defaultComponents_codec
        = pb::FieldCodec.ForMessage(58, global::MHUrho.Storage.StDefaultComponent.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> defaultComponents_ = new pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> DefaultComponents {
      get { return defaultComponents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      if (!object.Equals(UserPlugin, other.UserPlugin)) return false;
      if(!defaultComponents_.Equals(other.defaultComponents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      if (userPlugin_ != null) hash ^= UserPlugin.GetHashCode();
      hash ^= defaultComponents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerID);
      }
      if (TargetUnitID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetUnitID);
      }
      if (userPlugin_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UserPlugin);
      }
      defaultComponents_.WriteTo(output, _repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      if (userPlugin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPlugin);
      }
      size += defaultComponents_.CalculateSize(_repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StUnit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.StVector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
      if (other.userPlugin_ != null) {
        if (userPlugin_ == null) {
          userPlugin_ = new global::MHUrho.Storage.PluginData();
        }
        UserPlugin.MergeFrom(other.UserPlugin);
      }
      defaultComponents_.Add(other.defaultComponents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.StVector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 40: {
            TargetUnitID = input.ReadInt32();
            break;
          }
          case 50: {
            if (userPlugin_ == null) {
              userPlugin_ = new global::MHUrho.Storage.PluginData();
            }
            input.ReadMessage(userPlugin_);
            break;
          }
          case 58: {
            defaultComponents_.AddEntriesFrom(input, _repeated_defaultComponents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StProjectile : pb::IMessage<StProjectile> {
    private static readonly pb::MessageParser<StProjectile> _parser = new pb::MessageParser<StProjectile>(() => new StProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StProjectile(StProjectile other) : this() {
      id_ = other.id_;
      typeID_ = other.typeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      playerID_ = other.playerID_;
      UserPlugin = other.userPlugin_ != null ? other.UserPlugin.Clone() : null;
      defaultComponents_ = other.defaultComponents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StProjectile Clone() {
      return new StProjectile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::MHUrho.Storage.StVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 4;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "userPlugin" field.</summary>
    public const int UserPluginFieldNumber = 5;
    private global::MHUrho.Storage.PluginData userPlugin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.PluginData UserPlugin {
      get { return userPlugin_; }
      set {
        userPlugin_ = value;
      }
    }

    /// <summary>Field number for the "defaultComponents" field.</summary>
    public const int DefaultComponentsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StDefaultComponent> _repeated_defaultComponents_codec
        = pb::FieldCodec.ForMessage(50, global::MHUrho.Storage.StDefaultComponent.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> defaultComponents_ = new pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> DefaultComponents {
      get { return defaultComponents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (!object.Equals(UserPlugin, other.UserPlugin)) return false;
      if(!defaultComponents_.Equals(other.defaultComponents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (userPlugin_ != null) hash ^= UserPlugin.GetHashCode();
      hash ^= defaultComponents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerID);
      }
      if (userPlugin_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserPlugin);
      }
      defaultComponents_.WriteTo(output, _repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (userPlugin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPlugin);
      }
      size += defaultComponents_.CalculateSize(_repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StProjectile other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.StVector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.userPlugin_ != null) {
        if (userPlugin_ == null) {
          userPlugin_ = new global::MHUrho.Storage.PluginData();
        }
        UserPlugin.MergeFrom(other.UserPlugin);
      }
      defaultComponents_.Add(other.defaultComponents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.StVector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 42: {
            if (userPlugin_ == null) {
              userPlugin_ = new global::MHUrho.Storage.PluginData();
            }
            input.ReadMessage(userPlugin_);
            break;
          }
          case 50: {
            defaultComponents_.AddEntriesFrom(input, _repeated_defaultComponents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StBuilding : pb::IMessage<StBuilding> {
    private static readonly pb::MessageParser<StBuilding> _parser = new pb::MessageParser<StBuilding>(() => new StBuilding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding(StBuilding other) : this() {
      id_ = other.id_;
      typeID_ = other.typeID_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      playerID_ = other.playerID_;
      UserPlugin = other.userPlugin_ != null ? other.UserPlugin.Clone() : null;
      defaultComponents_ = other.defaultComponents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding Clone() {
      return new StBuilding(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private global::MHUrho.Storage.StIntVector2 location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 4;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "userPlugin" field.</summary>
    public const int UserPluginFieldNumber = 6;
    private global::MHUrho.Storage.PluginData userPlugin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.PluginData UserPlugin {
      get { return userPlugin_; }
      set {
        userPlugin_ = value;
      }
    }

    /// <summary>Field number for the "defaultComponents" field.</summary>
    public const int DefaultComponentsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StDefaultComponent> _repeated_defaultComponents_codec
        = pb::FieldCodec.ForMessage(58, global::MHUrho.Storage.StDefaultComponent.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> defaultComponents_ = new pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StDefaultComponent> DefaultComponents {
      get { return defaultComponents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (!object.Equals(UserPlugin, other.UserPlugin)) return false;
      if(!defaultComponents_.Equals(other.defaultComponents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (userPlugin_ != null) hash ^= UserPlugin.GetHashCode();
      hash ^= defaultComponents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (location_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Location);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerID);
      }
      if (userPlugin_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UserPlugin);
      }
      defaultComponents_.WriteTo(output, _repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (userPlugin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPlugin);
      }
      size += defaultComponents_.CalculateSize(_repeated_defaultComponents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StBuilding other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::MHUrho.Storage.StIntVector2();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.userPlugin_ != null) {
        if (userPlugin_ == null) {
          userPlugin_ = new global::MHUrho.Storage.PluginData();
        }
        UserPlugin.MergeFrom(other.UserPlugin);
      }
      defaultComponents_.Add(other.defaultComponents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 26: {
            if (location_ == null) {
              location_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(location_);
            break;
          }
          case 32: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 50: {
            if (userPlugin_ == null) {
              userPlugin_ = new global::MHUrho.Storage.PluginData();
            }
            input.ReadMessage(userPlugin_);
            break;
          }
          case 58: {
            defaultComponents_.AddEntriesFrom(input, _repeated_defaultComponents_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StPlayers : pb::IMessage<StPlayers> {
    private static readonly pb::MessageParser<StPlayers> _parser = new pb::MessageParser<StPlayers>(() => new StPlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayers(StPlayers other) : this() {
      playerWithInputID_ = other.playerWithInputID_;
      neutralPlayerID_ = other.neutralPlayerID_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayers Clone() {
      return new StPlayers(this);
    }

    /// <summary>Field number for the "playerWithInputID" field.</summary>
    public const int PlayerWithInputIDFieldNumber = 1;
    private int playerWithInputID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerWithInputID {
      get { return playerWithInputID_; }
      set {
        playerWithInputID_ = value;
      }
    }

    /// <summary>Field number for the "neutralPlayerID" field.</summary>
    public const int NeutralPlayerIDFieldNumber = 2;
    private int neutralPlayerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeutralPlayerID {
      get { return neutralPlayerID_; }
      set {
        neutralPlayerID_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::MHUrho.Storage.StPlayer.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StPlayer> players_ = new pbc::RepeatedField<global::MHUrho.Storage.StPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StPlayer> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerWithInputID != other.PlayerWithInputID) return false;
      if (NeutralPlayerID != other.NeutralPlayerID) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerWithInputID != 0) hash ^= PlayerWithInputID.GetHashCode();
      if (NeutralPlayerID != 0) hash ^= NeutralPlayerID.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerWithInputID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerWithInputID);
      }
      if (NeutralPlayerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NeutralPlayerID);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerWithInputID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerWithInputID);
      }
      if (NeutralPlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeutralPlayerID);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPlayers other) {
      if (other == null) {
        return;
      }
      if (other.PlayerWithInputID != 0) {
        PlayerWithInputID = other.PlayerWithInputID;
      }
      if (other.NeutralPlayerID != 0) {
        NeutralPlayerID = other.NeutralPlayerID;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerWithInputID = input.ReadInt32();
            break;
          }
          case 16: {
            NeutralPlayerID = input.ReadInt32();
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StPlayer : pb::IMessage<StPlayer> {
    private static readonly pb::MessageParser<StPlayer> _parser = new pb::MessageParser<StPlayer>(() => new StPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer(StPlayer other) : this() {
      id_ = other.id_;
      teamID_ = other.teamID_;
      typeID_ = other.typeID_;
      insigniaID_ = other.insigniaID_;
      unitIDs_ = other.unitIDs_.Clone();
      buildingIDs_ = other.buildingIDs_.Clone();
      UserPlugin = other.userPlugin_ != null ? other.UserPlugin.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer Clone() {
      return new StPlayer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private int teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 3;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "insigniaID" field.</summary>
    public const int InsigniaIDFieldNumber = 4;
    private int insigniaID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InsigniaID {
      get { return insigniaID_; }
      set {
        insigniaID_ = value;
      }
    }

    /// <summary>Field number for the "unitIDs" field.</summary>
    public const int UnitIDsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_unitIDs_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> unitIDs_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///TODO: Redundant references both ways, could just store it in building/unit and connect it from there
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UnitIDs {
      get { return unitIDs_; }
    }

    /// <summary>Field number for the "buildingIDs" field.</summary>
    public const int BuildingIDsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_buildingIDs_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> buildingIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuildingIDs {
      get { return buildingIDs_; }
    }

    /// <summary>Field number for the "userPlugin" field.</summary>
    public const int UserPluginFieldNumber = 7;
    private global::MHUrho.Storage.PluginData userPlugin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.PluginData UserPlugin {
      get { return userPlugin_; }
      set {
        userPlugin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TeamID != other.TeamID) return false;
      if (TypeID != other.TypeID) return false;
      if (InsigniaID != other.InsigniaID) return false;
      if(!unitIDs_.Equals(other.unitIDs_)) return false;
      if(!buildingIDs_.Equals(other.buildingIDs_)) return false;
      if (!object.Equals(UserPlugin, other.UserPlugin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TeamID != 0) hash ^= TeamID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (InsigniaID != 0) hash ^= InsigniaID.GetHashCode();
      hash ^= unitIDs_.GetHashCode();
      hash ^= buildingIDs_.GetHashCode();
      if (userPlugin_ != null) hash ^= UserPlugin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TeamID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TypeID);
      }
      if (InsigniaID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InsigniaID);
      }
      unitIDs_.WriteTo(output, _repeated_unitIDs_codec);
      buildingIDs_.WriteTo(output, _repeated_buildingIDs_codec);
      if (userPlugin_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UserPlugin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TeamID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (InsigniaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InsigniaID);
      }
      size += unitIDs_.CalculateSize(_repeated_unitIDs_codec);
      size += buildingIDs_.CalculateSize(_repeated_buildingIDs_codec);
      if (userPlugin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPlugin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TeamID != 0) {
        TeamID = other.TeamID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.InsigniaID != 0) {
        InsigniaID = other.InsigniaID;
      }
      unitIDs_.Add(other.unitIDs_);
      buildingIDs_.Add(other.buildingIDs_);
      if (other.userPlugin_ != null) {
        if (userPlugin_ == null) {
          userPlugin_ = new global::MHUrho.Storage.PluginData();
        }
        UserPlugin.MergeFrom(other.UserPlugin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadInt32();
            break;
          }
          case 24: {
            TypeID = input.ReadInt32();
            break;
          }
          case 32: {
            InsigniaID = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            unitIDs_.AddEntriesFrom(input, _repeated_unitIDs_codec);
            break;
          }
          case 50:
          case 48: {
            buildingIDs_.AddEntriesFrom(input, _repeated_buildingIDs_codec);
            break;
          }
          case 58: {
            if (userPlugin_ == null) {
              userPlugin_ = new global::MHUrho.Storage.PluginData();
            }
            input.ReadMessage(userPlugin_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StMap : pb::IMessage<StMap> {
    private static readonly pb::MessageParser<StMap> _parser = new pb::MessageParser<StMap>(() => new StMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap(StMap other) : this() {
      Size = other.size_ != null ? other.Size.Clone() : null;
      tiles_ = other.tiles_.Clone();
      borderTiles_ = other.borderTiles_.Clone();
      mapRangeTargets_ = other.mapRangeTargets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap Clone() {
      return new StMap(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::MHUrho.Storage.StIntVector2 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StTile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.StTile.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StTile> tiles_ = new pbc::RepeatedField<global::MHUrho.Storage.StTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StTile> Tiles {
      get { return tiles_; }
    }

    /// <summary>Field number for the "borderTiles" field.</summary>
    public const int BorderTilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StBorderTile> _repeated_borderTiles_codec
        = pb::FieldCodec.ForMessage(26, global::MHUrho.Storage.StBorderTile.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StBorderTile> borderTiles_ = new pbc::RepeatedField<global::MHUrho.Storage.StBorderTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StBorderTile> BorderTiles {
      get { return borderTiles_; }
    }

    /// <summary>Field number for the "mapRangeTargets" field.</summary>
    public const int MapRangeTargetsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StMapTarget> _repeated_mapRangeTargets_codec
        = pb::FieldCodec.ForMessage(34, global::MHUrho.Storage.StMapTarget.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StMapTarget> mapRangeTargets_ = new pbc::RepeatedField<global::MHUrho.Storage.StMapTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StMapTarget> MapRangeTargets {
      get { return mapRangeTargets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      if(!borderTiles_.Equals(other.borderTiles_)) return false;
      if(!mapRangeTargets_.Equals(other.mapRangeTargets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      hash ^= tiles_.GetHashCode();
      hash ^= borderTiles_.GetHashCode();
      hash ^= mapRangeTargets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
      borderTiles_.WriteTo(output, _repeated_borderTiles_codec);
      mapRangeTargets_.WriteTo(output, _repeated_mapRangeTargets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      size += borderTiles_.CalculateSize(_repeated_borderTiles_codec);
      size += mapRangeTargets_.CalculateSize(_repeated_mapRangeTargets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StMap other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::MHUrho.Storage.StIntVector2();
        }
        Size.MergeFrom(other.Size);
      }
      tiles_.Add(other.tiles_);
      borderTiles_.Add(other.borderTiles_);
      mapRangeTargets_.Add(other.mapRangeTargets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (size_ == null) {
              size_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(size_);
            break;
          }
          case 18: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
          case 26: {
            borderTiles_.AddEntriesFrom(input, _repeated_borderTiles_codec);
            break;
          }
          case 34: {
            mapRangeTargets_.AddEntriesFrom(input, _repeated_mapRangeTargets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StLevelPlugin : pb::IMessage<StLevelPlugin> {
    private static readonly pb::MessageParser<StLevelPlugin> _parser = new pb::MessageParser<StLevelPlugin>(() => new StLevelPlugin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StLevelPlugin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.GameStateReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevelPlugin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevelPlugin(StLevelPlugin other) : this() {
      typeID_ = other.typeID_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevelPlugin Clone() {
      return new StLevelPlugin(this);
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 1;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::MHUrho.Storage.PluginData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.PluginData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StLevelPlugin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StLevelPlugin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TypeID);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StLevelPlugin other) {
      if (other == null) {
        return;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::MHUrho.Storage.PluginData();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeID = input.ReadInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::MHUrho.Storage.PluginData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
