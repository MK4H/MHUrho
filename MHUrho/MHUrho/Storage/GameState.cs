// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tmpDABC.tmp
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MHUrho.Storage {

  /// <summary>Holder for reflection information generated from tmpDABC.tmp</summary>
  public static partial class TmpDABCReflection {

    #region Descriptor
    /// <summary>File descriptor for tmpDABC.tmp</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TmpDABCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0bXBEQUJDLnRtcBIOTUhVcmhvLlN0b3JhZ2UikgEKB1N0TGV2ZWwSIgoD",
            "bWFwGAEgASgLMhUuTUhVcmhvLlN0b3JhZ2UuU3RNYXASJQoFdW5pdHMYAiAD",
            "KAsyFi5NSFVyaG8uU3RvcmFnZS5TdFVuaXQSKQoHcGxheWVycxgDIAMoCzIY",
            "Lk1IVXJoby5TdG9yYWdlLlN0UGxheWVyEhEKCWdhbWVTcGVlZBgEIAEoAiLO",
            "AQoKU3RQYWNrYWdlcxIrCghwYWNrYWdlcxgBIAMoCzIZLk1IVXJoby5TdG9y",
            "YWdlLlN0UGFja2FnZRItCgl0aWxlVHlwZXMYAiADKAsyGi5NSFVyaG8uU3Rv",
            "cmFnZS5TdFRpbGVUeXBlEi0KCXVuaXRUeXBlcxgDIAMoCzIaLk1IVXJoby5T",
            "dG9yYWdlLlN0VW5pdFR5cGUSNQoNYnVpbGRpbmdUeXBlcxgEIAMoCzIeLk1I",
            "VXJoby5TdG9yYWdlLlN0QnVpbGRpbmdUeXBlIiUKCVN0UGFja2FnZRIKCgJJ",
            "RBgBIAEoBRIMCgRuYW1lGAIgASgJIoQBCgZTdFRpbGUSDgoGdW5pdElEGAEg",
            "ASgFEhYKDnBhc3NpbmdVbml0SURzGAIgAygFEhIKCnRpbGVUeXBlSUQYAyAB",
            "KAUSLgoIcG9zaXRpb24YBCABKAsyHC5NSFVyaG8uU3RvcmFnZS5TdEludFZl",
            "Y3RvcjISDgoGaGVpZ2h0GAUgASgCIp8BCgZTdFVuaXQSCgoCaWQYASABKAUS",
            "DgoGdHlwZUlEGAIgASgFEisKCHBvc2l0aW9uGAMgASgLMhkuTUhVcmhvLlN0",
            "b3JhZ2UuU3RWZWN0b3IyEhAKCHBsYXllcklEGAQgASgFEiQKBHBhdGgYBSAB",
            "KAsyFi5NSFVyaG8uU3RvcmFnZS5TdFBhdGgSFAoMdGFyZ2V0VW5pdElEGAYg",
            "ASgFIgwKClN0QnVpbGRpbmciCgoIU3RQbGF5ZXIiOgoGU3RQYXRoEjAKCnBh",
            "dGhQb2ludHMYASADKAsyHC5NSFVyaG8uU3RvcmFnZS5TdEludFZlY3RvcjIi",
            "WgoFU3RNYXASKgoEc2l6ZRgBIAEoCzIcLk1IVXJoby5TdG9yYWdlLlN0SW50",
            "VmVjdG9yMhIlCgV0aWxlcxgCIAMoCzIWLk1IVXJoby5TdG9yYWdlLlN0VGls",
            "ZSJBCgpTdFRpbGVUeXBlEhEKCXBhY2thZ2VJRBgBIAEoBRISCgp0aWxlVHlw",
            "ZUlEGAIgASgFEgwKBG5hbWUYAyABKAkiQQoKU3RVbml0VHlwZRIRCglwYWNr",
            "YWdlSUQYASABKAUSEgoKdW5pdFR5cGVJRBgCIAEoBRIMCgRuYW1lGAMgASgJ",
            "IjEKDlN0QnVpbGRpbmdUeXBlEhEKCXBhY2thZ2VJRBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJIiQKDFN0SW50VmVjdG9yMhIJCgFYGAEgASgFEgkKAVkYAiABKAUi",
            "IQoJU3RWZWN0b3IyEgkKAVgYASABKAISCQoBWRgCIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StLevel), global::MHUrho.Storage.StLevel.Parser, new[]{ "Map", "Units", "Players", "GameSpeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPackages), global::MHUrho.Storage.StPackages.Parser, new[]{ "Packages", "TileTypes", "UnitTypes", "BuildingTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPackage), global::MHUrho.Storage.StPackage.Parser, new[]{ "ID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StTile), global::MHUrho.Storage.StTile.Parser, new[]{ "UnitID", "PassingUnitIDs", "TileTypeID", "Position", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StUnit), global::MHUrho.Storage.StUnit.Parser, new[]{ "Id", "TypeID", "Position", "PlayerID", "Path", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StBuilding), global::MHUrho.Storage.StBuilding.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPlayer), global::MHUrho.Storage.StPlayer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StPath), global::MHUrho.Storage.StPath.Parser, new[]{ "PathPoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StMap), global::MHUrho.Storage.StMap.Parser, new[]{ "Size", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StTileType), global::MHUrho.Storage.StTileType.Parser, new[]{ "PackageID", "TileTypeID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StUnitType), global::MHUrho.Storage.StUnitType.Parser, new[]{ "PackageID", "UnitTypeID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StBuildingType), global::MHUrho.Storage.StBuildingType.Parser, new[]{ "PackageID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StIntVector2), global::MHUrho.Storage.StIntVector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.StVector2), global::MHUrho.Storage.StVector2.Parser, new[]{ "X", "Y" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class StLevel : pb::IMessage<StLevel> {
    private static readonly pb::MessageParser<StLevel> _parser = new pb::MessageParser<StLevel>(() => new StLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel(StLevel other) : this() {
      Map = other.map_ != null ? other.Map.Clone() : null;
      units_ = other.units_.Clone();
      players_ = other.players_.Clone();
      gameSpeed_ = other.gameSpeed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StLevel Clone() {
      return new StLevel(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private global::MHUrho.Storage.StMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StUnit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.StUnit.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StUnit> units_ = new pbc::RepeatedField<global::MHUrho.Storage.StUnit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StUnit> Units {
      get { return units_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StPlayer> _repeated_players_codec
        = pb::FieldCodec.ForMessage(26, global::MHUrho.Storage.StPlayer.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StPlayer> players_ = new pbc::RepeatedField<global::MHUrho.Storage.StPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StPlayer> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "gameSpeed" field.</summary>
    public const int GameSpeedFieldNumber = 4;
    private float gameSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameSpeed {
      get { return gameSpeed_; }
      set {
        gameSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Map, other.Map)) return false;
      if(!units_.Equals(other.units_)) return false;
      if(!players_.Equals(other.players_)) return false;
      if (GameSpeed != other.GameSpeed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_ != null) hash ^= Map.GetHashCode();
      hash ^= units_.GetHashCode();
      hash ^= players_.GetHashCode();
      if (GameSpeed != 0F) hash ^= GameSpeed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Map);
      }
      units_.WriteTo(output, _repeated_units_codec);
      players_.WriteTo(output, _repeated_players_codec);
      if (GameSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GameSpeed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      size += players_.CalculateSize(_repeated_players_codec);
      if (GameSpeed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StLevel other) {
      if (other == null) {
        return;
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::MHUrho.Storage.StMap();
        }
        Map.MergeFrom(other.Map);
      }
      units_.Add(other.units_);
      players_.Add(other.players_);
      if (other.GameSpeed != 0F) {
        GameSpeed = other.GameSpeed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (map_ == null) {
              map_ = new global::MHUrho.Storage.StMap();
            }
            input.ReadMessage(map_);
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 26: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 37: {
            GameSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StPackages : pb::IMessage<StPackages> {
    private static readonly pb::MessageParser<StPackages> _parser = new pb::MessageParser<StPackages>(() => new StPackages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPackages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackages(StPackages other) : this() {
      packages_ = other.packages_.Clone();
      tileTypes_ = other.tileTypes_.Clone();
      unitTypes_ = other.unitTypes_.Clone();
      buildingTypes_ = other.buildingTypes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackages Clone() {
      return new StPackages(this);
    }

    /// <summary>Field number for the "packages" field.</summary>
    public const int PackagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StPackage> _repeated_packages_codec
        = pb::FieldCodec.ForMessage(10, global::MHUrho.Storage.StPackage.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StPackage> packages_ = new pbc::RepeatedField<global::MHUrho.Storage.StPackage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StPackage> Packages {
      get { return packages_; }
    }

    /// <summary>Field number for the "tileTypes" field.</summary>
    public const int TileTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StTileType> _repeated_tileTypes_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.StTileType.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StTileType> tileTypes_ = new pbc::RepeatedField<global::MHUrho.Storage.StTileType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StTileType> TileTypes {
      get { return tileTypes_; }
    }

    /// <summary>Field number for the "unitTypes" field.</summary>
    public const int UnitTypesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StUnitType> _repeated_unitTypes_codec
        = pb::FieldCodec.ForMessage(26, global::MHUrho.Storage.StUnitType.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StUnitType> unitTypes_ = new pbc::RepeatedField<global::MHUrho.Storage.StUnitType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StUnitType> UnitTypes {
      get { return unitTypes_; }
    }

    /// <summary>Field number for the "buildingTypes" field.</summary>
    public const int BuildingTypesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StBuildingType> _repeated_buildingTypes_codec
        = pb::FieldCodec.ForMessage(34, global::MHUrho.Storage.StBuildingType.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StBuildingType> buildingTypes_ = new pbc::RepeatedField<global::MHUrho.Storage.StBuildingType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StBuildingType> BuildingTypes {
      get { return buildingTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPackages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPackages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packages_.Equals(other.packages_)) return false;
      if(!tileTypes_.Equals(other.tileTypes_)) return false;
      if(!unitTypes_.Equals(other.unitTypes_)) return false;
      if(!buildingTypes_.Equals(other.buildingTypes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packages_.GetHashCode();
      hash ^= tileTypes_.GetHashCode();
      hash ^= unitTypes_.GetHashCode();
      hash ^= buildingTypes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      packages_.WriteTo(output, _repeated_packages_codec);
      tileTypes_.WriteTo(output, _repeated_tileTypes_codec);
      unitTypes_.WriteTo(output, _repeated_unitTypes_codec);
      buildingTypes_.WriteTo(output, _repeated_buildingTypes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packages_.CalculateSize(_repeated_packages_codec);
      size += tileTypes_.CalculateSize(_repeated_tileTypes_codec);
      size += unitTypes_.CalculateSize(_repeated_unitTypes_codec);
      size += buildingTypes_.CalculateSize(_repeated_buildingTypes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPackages other) {
      if (other == null) {
        return;
      }
      packages_.Add(other.packages_);
      tileTypes_.Add(other.tileTypes_);
      unitTypes_.Add(other.unitTypes_);
      buildingTypes_.Add(other.buildingTypes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            packages_.AddEntriesFrom(input, _repeated_packages_codec);
            break;
          }
          case 18: {
            tileTypes_.AddEntriesFrom(input, _repeated_tileTypes_codec);
            break;
          }
          case 26: {
            unitTypes_.AddEntriesFrom(input, _repeated_unitTypes_codec);
            break;
          }
          case 34: {
            buildingTypes_.AddEntriesFrom(input, _repeated_buildingTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StPackage : pb::IMessage<StPackage> {
    private static readonly pb::MessageParser<StPackage> _parser = new pb::MessageParser<StPackage>(() => new StPackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackage(StPackage other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPackage Clone() {
      return new StPackage(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPackage other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StTile : pb::IMessage<StTile> {
    private static readonly pb::MessageParser<StTile> _parser = new pb::MessageParser<StTile>(() => new StTile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile(StTile other) : this() {
      unitID_ = other.unitID_;
      passingUnitIDs_ = other.passingUnitIDs_.Clone();
      tileTypeID_ = other.tileTypeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTile Clone() {
      return new StTile(this);
    }

    /// <summary>Field number for the "unitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    /// <summary>Field number for the "passingUnitIDs" field.</summary>
    public const int PassingUnitIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_passingUnitIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> passingUnitIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PassingUnitIDs {
      get { return passingUnitIDs_; }
    }

    /// <summary>Field number for the "tileTypeID" field.</summary>
    public const int TileTypeIDFieldNumber = 3;
    private int tileTypeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileTypeID {
      get { return tileTypeID_; }
      set {
        tileTypeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::MHUrho.Storage.StIntVector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      if(!passingUnitIDs_.Equals(other.passingUnitIDs_)) return false;
      if (TileTypeID != other.TileTypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      hash ^= passingUnitIDs_.GetHashCode();
      if (TileTypeID != 0) hash ^= TileTypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      passingUnitIDs_.WriteTo(output, _repeated_passingUnitIDs_codec);
      if (TileTypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TileTypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Height != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      size += passingUnitIDs_.CalculateSize(_repeated_passingUnitIDs_codec);
      if (TileTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileTypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StTile other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      passingUnitIDs_.Add(other.passingUnitIDs_);
      if (other.TileTypeID != 0) {
        TileTypeID = other.TileTypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.StIntVector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            passingUnitIDs_.AddEntriesFrom(input, _repeated_passingUnitIDs_codec);
            break;
          }
          case 24: {
            TileTypeID = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 45: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StUnit : pb::IMessage<StUnit> {
    private static readonly pb::MessageParser<StUnit> _parser = new pb::MessageParser<StUnit>(() => new StUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit(StUnit other) : this() {
      id_ = other.id_;
      typeID_ = other.typeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      playerID_ = other.playerID_;
      Path = other.path_ != null ? other.Path.Clone() : null;
      targetUnitID_ = other.targetUnitID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnit Clone() {
      return new StUnit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::MHUrho.Storage.StVector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StVector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 4;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private global::MHUrho.Storage.StPath path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StPath Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 6;
    private int targetUnitID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (!object.Equals(Path, other.Path)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerID);
      }
      if (path_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Path);
      }
      if (TargetUnitID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetUnitID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StUnit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.StVector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::MHUrho.Storage.StPath();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.StVector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 42: {
            if (path_ == null) {
              path_ = new global::MHUrho.Storage.StPath();
            }
            input.ReadMessage(path_);
            break;
          }
          case 48: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StBuilding : pb::IMessage<StBuilding> {
    private static readonly pb::MessageParser<StBuilding> _parser = new pb::MessageParser<StBuilding>(() => new StBuilding());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding(StBuilding other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuilding Clone() {
      return new StBuilding(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StBuilding other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StPlayer : pb::IMessage<StPlayer> {
    private static readonly pb::MessageParser<StPlayer> _parser = new pb::MessageParser<StPlayer>(() => new StPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer(StPlayer other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPlayer Clone() {
      return new StPlayer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPlayer other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StPath : pb::IMessage<StPath> {
    private static readonly pb::MessageParser<StPath> _parser = new pb::MessageParser<StPath>(() => new StPath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPath(StPath other) : this() {
      pathPoints_ = other.pathPoints_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StPath Clone() {
      return new StPath(this);
    }

    /// <summary>Field number for the "pathPoints" field.</summary>
    public const int PathPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StIntVector2> _repeated_pathPoints_codec
        = pb::FieldCodec.ForMessage(10, global::MHUrho.Storage.StIntVector2.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StIntVector2> pathPoints_ = new pbc::RepeatedField<global::MHUrho.Storage.StIntVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StIntVector2> PathPoints {
      get { return pathPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathPoints_.Equals(other.pathPoints_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathPoints_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathPoints_.WriteTo(output, _repeated_pathPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathPoints_.CalculateSize(_repeated_pathPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StPath other) {
      if (other == null) {
        return;
      }
      pathPoints_.Add(other.pathPoints_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pathPoints_.AddEntriesFrom(input, _repeated_pathPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StMap : pb::IMessage<StMap> {
    private static readonly pb::MessageParser<StMap> _parser = new pb::MessageParser<StMap>(() => new StMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap(StMap other) : this() {
      Size = other.size_ != null ? other.Size.Clone() : null;
      tiles_ = other.tiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StMap Clone() {
      return new StMap(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::MHUrho.Storage.StIntVector2 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.StIntVector2 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.StTile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.StTile.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.StTile> tiles_ = new pbc::RepeatedField<global::MHUrho.Storage.StTile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.StTile> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      hash ^= tiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StMap other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::MHUrho.Storage.StIntVector2();
        }
        Size.MergeFrom(other.Size);
      }
      tiles_.Add(other.tiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (size_ == null) {
              size_ = new global::MHUrho.Storage.StIntVector2();
            }
            input.ReadMessage(size_);
            break;
          }
          case 18: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StTileType : pb::IMessage<StTileType> {
    private static readonly pb::MessageParser<StTileType> _parser = new pb::MessageParser<StTileType>(() => new StTileType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StTileType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTileType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTileType(StTileType other) : this() {
      packageID_ = other.packageID_;
      tileTypeID_ = other.tileTypeID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StTileType Clone() {
      return new StTileType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "tileTypeID" field.</summary>
    public const int TileTypeIDFieldNumber = 2;
    private int tileTypeID_;
    /// <summary>
    ///Global across all tileTypes in this level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileTypeID {
      get { return tileTypeID_; }
      set {
        tileTypeID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StTileType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StTileType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (TileTypeID != other.TileTypeID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (TileTypeID != 0) hash ^= TileTypeID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (TileTypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TileTypeID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (TileTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileTypeID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StTileType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.TileTypeID != 0) {
        TileTypeID = other.TileTypeID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 16: {
            TileTypeID = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StUnitType : pb::IMessage<StUnitType> {
    private static readonly pb::MessageParser<StUnitType> _parser = new pb::MessageParser<StUnitType>(() => new StUnitType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StUnitType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnitType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnitType(StUnitType other) : this() {
      packageID_ = other.packageID_;
      unitTypeID_ = other.unitTypeID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StUnitType Clone() {
      return new StUnitType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    /// <summary>
    ///Global across all packages in this level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "unitTypeID" field.</summary>
    public const int UnitTypeIDFieldNumber = 2;
    private int unitTypeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitTypeID {
      get { return unitTypeID_; }
      set {
        unitTypeID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StUnitType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StUnitType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (UnitTypeID != other.UnitTypeID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (UnitTypeID != 0) hash ^= UnitTypeID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (UnitTypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnitTypeID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (UnitTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTypeID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StUnitType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.UnitTypeID != 0) {
        UnitTypeID = other.UnitTypeID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 16: {
            UnitTypeID = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StBuildingType : pb::IMessage<StBuildingType> {
    private static readonly pb::MessageParser<StBuildingType> _parser = new pb::MessageParser<StBuildingType>(() => new StBuildingType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StBuildingType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuildingType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuildingType(StBuildingType other) : this() {
      packageID_ = other.packageID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StBuildingType Clone() {
      return new StBuildingType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StBuildingType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StBuildingType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StBuildingType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StIntVector2 : pb::IMessage<StIntVector2> {
    private static readonly pb::MessageParser<StIntVector2> _parser = new pb::MessageParser<StIntVector2>(() => new StIntVector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StIntVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StIntVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StIntVector2(StIntVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StIntVector2 Clone() {
      return new StIntVector2(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StIntVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StIntVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StIntVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StVector2 : pb::IMessage<StVector2> {
    private static readonly pb::MessageParser<StVector2> _parser = new pb::MessageParser<StVector2>(() => new StVector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDABCReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StVector2(StVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StVector2 Clone() {
      return new StVector2(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
