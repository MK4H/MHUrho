// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tmpDA03.tmp
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MHUrho.Storage {

  /// <summary>Holder for reflection information generated from tmpDA03.tmp</summary>
  public static partial class TmpDA03Reflection {

    #region Descriptor
    /// <summary>File descriptor for tmpDA03.tmp</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TmpDA03Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0bXBEQTAzLnRtcBIOTUhVcmhvLlN0b3JhZ2UiBwoFTGV2ZWwigAEKBFRp",
            "bGUSDgoGdW5pdElEGAEgASgFEhYKDnBhc3NpbmdVbml0SURzGAIgAygFEhIK",
            "CnRpbGVUeXBlSUQYAyABKAUSLAoIcG9zaXRpb24YBCABKAsyGi5NSFVyaG8u",
            "U3RvcmFnZS5JbnRWZWN0b3IyEg4KBmhlaWdodBgFIAEoAiKZAQoEVW5pdBIK",
            "CgJpZBgBIAEoBRIOCgZ0eXBlSUQYAiABKAUSKQoIcG9zaXRpb24YAyABKAsy",
            "Fy5NSFVyaG8uU3RvcmFnZS5WZWN0b3IyEhAKCHBsYXllcklEGAQgASgFEiIK",
            "BHBhdGgYBSABKAsyFC5NSFVyaG8uU3RvcmFnZS5QYXRoEhQKDHRhcmdldFVu",
            "aXRJRBgGIAEoBSIKCghCdWlsZGluZyIICgZQbGF5ZXIiNgoEUGF0aBIuCgpw",
            "YXRoUG9pbnRzGAEgAygLMhouTUhVcmhvLlN0b3JhZ2UuSW50VmVjdG9yMiJU",
            "CgNNYXASKAoEc2l6ZRgBIAEoCzIaLk1IVXJoby5TdG9yYWdlLkludFZlY3Rv",
            "cjISIwoFdGlsZXMYAiADKAsyFC5NSFVyaG8uU3RvcmFnZS5UaWxlIisKCFRp",
            "bGVUeXBlEhEKCXBhY2thZ2VJRBgBIAEoBRIMCgRuYW1lGAIgASgJIisKCFVu",
            "aXRUeXBlEhEKCXBhY2thZ2VJRBgBIAEoBRIMCgRuYW1lGAIgASgJIi8KDEJ1",
            "aWxkaW5nVHlwZRIRCglwYWNrYWdlSUQYASABKAUSDAoEbmFtZRgCIAEoCSIi",
            "CgpJbnRWZWN0b3IyEgkKAVgYASABKAUSCQoBWRgCIAEoBSIfCgdWZWN0b3Iy",
            "EgkKAVgYASABKAISCQoBWRgCIAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Level), global::MHUrho.Storage.Level.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Tile), global::MHUrho.Storage.Tile.Parser, new[]{ "UnitID", "PassingUnitIDs", "TileTypeID", "Position", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Unit), global::MHUrho.Storage.Unit.Parser, new[]{ "Id", "TypeID", "Position", "PlayerID", "Path", "TargetUnitID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Building), global::MHUrho.Storage.Building.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Player), global::MHUrho.Storage.Player.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Path), global::MHUrho.Storage.Path.Parser, new[]{ "PathPoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Map), global::MHUrho.Storage.Map.Parser, new[]{ "Size", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.TileType), global::MHUrho.Storage.TileType.Parser, new[]{ "PackageID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.UnitType), global::MHUrho.Storage.UnitType.Parser, new[]{ "PackageID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.BuildingType), global::MHUrho.Storage.BuildingType.Parser, new[]{ "PackageID", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.IntVector2), global::MHUrho.Storage.IntVector2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MHUrho.Storage.Vector2), global::MHUrho.Storage.Vector2.Parser, new[]{ "X", "Y" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Level : pb::IMessage<Level> {
    private static readonly pb::MessageParser<Level> _parser = new pb::MessageParser<Level>(() => new Level());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level(Level other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level Clone() {
      return new Level(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Tile : pb::IMessage<Tile> {
    private static readonly pb::MessageParser<Tile> _parser = new pb::MessageParser<Tile>(() => new Tile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile(Tile other) : this() {
      unitID_ = other.unitID_;
      passingUnitIDs_ = other.passingUnitIDs_.Clone();
      tileTypeID_ = other.tileTypeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tile Clone() {
      return new Tile(this);
    }

    /// <summary>Field number for the "unitID" field.</summary>
    public const int UnitIDFieldNumber = 1;
    private int unitID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnitID {
      get { return unitID_; }
      set {
        unitID_ = value;
      }
    }

    /// <summary>Field number for the "passingUnitIDs" field.</summary>
    public const int PassingUnitIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_passingUnitIDs_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> passingUnitIDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PassingUnitIDs {
      get { return passingUnitIDs_; }
    }

    /// <summary>Field number for the "tileTypeID" field.</summary>
    public const int TileTypeIDFieldNumber = 3;
    private int tileTypeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileTypeID {
      get { return tileTypeID_; }
      set {
        tileTypeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::MHUrho.Storage.IntVector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.IntVector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitID != other.UnitID) return false;
      if(!passingUnitIDs_.Equals(other.passingUnitIDs_)) return false;
      if (TileTypeID != other.TileTypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitID != 0) hash ^= UnitID.GetHashCode();
      hash ^= passingUnitIDs_.GetHashCode();
      if (TileTypeID != 0) hash ^= TileTypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Height != 0F) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnitID);
      }
      passingUnitIDs_.WriteTo(output, _repeated_passingUnitIDs_codec);
      if (TileTypeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TileTypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (Height != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitID);
      }
      size += passingUnitIDs_.CalculateSize(_repeated_passingUnitIDs_codec);
      if (TileTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileTypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tile other) {
      if (other == null) {
        return;
      }
      if (other.UnitID != 0) {
        UnitID = other.UnitID;
      }
      passingUnitIDs_.Add(other.passingUnitIDs_);
      if (other.TileTypeID != 0) {
        TileTypeID = other.TileTypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.IntVector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitID = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            passingUnitIDs_.AddEntriesFrom(input, _repeated_passingUnitIDs_codec);
            break;
          }
          case 24: {
            TileTypeID = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.IntVector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 45: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Unit : pb::IMessage<Unit> {
    private static readonly pb::MessageParser<Unit> _parser = new pb::MessageParser<Unit>(() => new Unit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit(Unit other) : this() {
      id_ = other.id_;
      typeID_ = other.typeID_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      playerID_ = other.playerID_;
      Path = other.path_ != null ? other.Path.Clone() : null;
      targetUnitID_ = other.targetUnitID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unit Clone() {
      return new Unit(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::MHUrho.Storage.Vector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.Vector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 4;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private global::MHUrho.Storage.Path path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.Path Path {
      get { return path_; }
      set {
        path_ = value;
      }
    }

    /// <summary>Field number for the "targetUnitID" field.</summary>
    public const int TargetUnitIDFieldNumber = 6;
    private int targetUnitID_;
    /// <summary>
    ///TODO: maybe add if it is selected, but probably just start with nothing selected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetUnitID {
      get { return targetUnitID_; }
      set {
        targetUnitID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TypeID != other.TypeID) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (PlayerID != other.PlayerID) return false;
      if (!object.Equals(Path, other.Path)) return false;
      if (TargetUnitID != other.TargetUnitID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (path_ != null) hash ^= Path.GetHashCode();
      if (TargetUnitID != 0) hash ^= TargetUnitID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerID);
      }
      if (path_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Path);
      }
      if (TargetUnitID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetUnitID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (path_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Path);
      }
      if (TargetUnitID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetUnitID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unit other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::MHUrho.Storage.Vector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.path_ != null) {
        if (path_ == null) {
          path_ = new global::MHUrho.Storage.Path();
        }
        Path.MergeFrom(other.Path);
      }
      if (other.TargetUnitID != 0) {
        TargetUnitID = other.TargetUnitID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::MHUrho.Storage.Vector2();
            }
            input.ReadMessage(position_);
            break;
          }
          case 32: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 42: {
            if (path_ == null) {
              path_ = new global::MHUrho.Storage.Path();
            }
            input.ReadMessage(path_);
            break;
          }
          case 48: {
            TargetUnitID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Building : pb::IMessage<Building> {
    private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Building> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building(Building other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Building Clone() {
      return new Building(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Building);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Building other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Building other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      pathPoints_ = other.pathPoints_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "pathPoints" field.</summary>
    public const int PathPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.IntVector2> _repeated_pathPoints_codec
        = pb::FieldCodec.ForMessage(10, global::MHUrho.Storage.IntVector2.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.IntVector2> pathPoints_ = new pbc::RepeatedField<global::MHUrho.Storage.IntVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.IntVector2> PathPoints {
      get { return pathPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pathPoints_.Equals(other.pathPoints_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pathPoints_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathPoints_.WriteTo(output, _repeated_pathPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathPoints_.CalculateSize(_repeated_pathPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      pathPoints_.Add(other.pathPoints_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pathPoints_.AddEntriesFrom(input, _repeated_pathPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map : pb::IMessage<Map> {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      Size = other.size_ != null ? other.Size.Clone() : null;
      tiles_ = other.tiles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private global::MHUrho.Storage.IntVector2 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MHUrho.Storage.IntVector2 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MHUrho.Storage.Tile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(18, global::MHUrho.Storage.Tile.Parser);
    private readonly pbc::RepeatedField<global::MHUrho.Storage.Tile> tiles_ = new pbc::RepeatedField<global::MHUrho.Storage.Tile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MHUrho.Storage.Tile> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Size, other.Size)) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (size_ != null) hash ^= Size.GetHashCode();
      hash ^= tiles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (size_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Size);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::MHUrho.Storage.IntVector2();
        }
        Size.MergeFrom(other.Size);
      }
      tiles_.Add(other.tiles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (size_ == null) {
              size_ = new global::MHUrho.Storage.IntVector2();
            }
            input.ReadMessage(size_);
            break;
          }
          case 18: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TileType : pb::IMessage<TileType> {
    private static readonly pb::MessageParser<TileType> _parser = new pb::MessageParser<TileType>(() => new TileType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileType(TileType other) : this() {
      packageID_ = other.packageID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileType Clone() {
      return new TileType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnitType : pb::IMessage<UnitType> {
    private static readonly pb::MessageParser<UnitType> _parser = new pb::MessageParser<UnitType>(() => new UnitType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnitType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitType(UnitType other) : this() {
      packageID_ = other.packageID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnitType Clone() {
      return new UnitType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnitType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnitType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnitType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingType : pb::IMessage<BuildingType> {
    private static readonly pb::MessageParser<BuildingType> _parser = new pb::MessageParser<BuildingType>(() => new BuildingType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType(BuildingType other) : this() {
      packageID_ = other.packageID_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingType Clone() {
      return new BuildingType(this);
    }

    /// <summary>Field number for the "packageID" field.</summary>
    public const int PackageIDFieldNumber = 1;
    private int packageID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageID {
      get { return packageID_; }
      set {
        packageID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageID != other.PackageID) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageID != 0) hash ^= PackageID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PackageID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingType other) {
      if (other == null) {
        return;
      }
      if (other.PackageID != 0) {
        PackageID = other.PackageID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PackageID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntVector2 : pb::IMessage<IntVector2> {
    private static readonly pb::MessageParser<IntVector2> _parser = new pb::MessageParser<IntVector2>(() => new IntVector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntVector2(IntVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntVector2 Clone() {
      return new IntVector2(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector2 : pb::IMessage<Vector2> {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MHUrho.Storage.TmpDA03Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
